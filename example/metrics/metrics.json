{
  "formatVersion": 2,
  "timestamp": "2022-07-07 22:44:56.000",
  "records": [
    {
      "path": "lib/repository/chat_room_repository.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ConfMessagesRepository": {
          "codeSpan": {
            "start": {
              "offset": 157,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 936,
              "line": 34,
              "column": 2
            },
            "text": "class ConfMessagesRepository {\r\n  ConfMessagesRepository();\r\n\r\n  Future<List<ChatMessageModel>> getMessages(\r\n    CollectionReference rootRef,\r\n  ) async {\r\n    final messageList = await rootRef.get().then(\r\n          (value) => value.docs.map(ChatMessageModel.fromFireStore).toList(),\r\n        );\r\n\r\n    return messageList;\r\n  }\r\n\r\n  Future<bool> addMessage(\r\n      {required CollectionReference rootRef,\r\n      required String userID,\r\n      required String message,\r\n      required String nickName}) async {\r\n    final data = ChatMessageModel.create(\r\n        message: message, userID: userID, nickName: nickName);\r\n\r\n    try {\r\n      await rootRef.add(data.toJson());\r\n      return true;\r\n    } on Exception catch (e) {\r\n      logger.e(e);\r\n      return false;\r\n    }\r\n  }\r\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor ConfMessagesRepository increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 191,
                      "line": 6,
                      "column": 3
                    },
                    "end": {
                      "offset": 216,
                      "line": 6,
                      "column": 28
                    },
                    "text": "ConfMessagesRepository();"
                  }
                },
                {
                  "message": "method getMessages increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 222,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 486,
                      "line": 16,
                      "column": 4
                    },
                    "text": "Future<List<ChatMessageModel>> getMessages(\r\n    CollectionReference rootRef,\r\n  ) async {\r\n    final messageList = await rootRef.get().then(\r\n          (value) => value.docs.map(ChatMessageModel.fromFireStore).toList(),\r\n        );\r\n\r\n    return messageList;\r\n  }"
                  }
                },
                {
                  "message": "method addMessage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 492,
                      "line": 18,
                      "column": 3
                    },
                    "end": {
                      "offset": 933,
                      "line": 33,
                      "column": 4
                    },
                    "text": "Future<bool> addMessage(\r\n      {required CollectionReference rootRef,\r\n      required String userID,\r\n      required String message,\r\n      required String nickName}) async {\r\n    final data = ChatMessageModel.create(\r\n        message: message, userID: userID, nickName: nickName);\r\n\r\n    try {\r\n      await rootRef.add(data.toJson());\r\n      return true;\r\n    } on Exception catch (e) {\r\n      logger.e(e);\r\n      return false;\r\n    }\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor ConfMessagesRepository decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 191,
                      "line": 6,
                      "column": 3
                    },
                    "end": {
                      "offset": 216,
                      "line": 6,
                      "column": 28
                    },
                    "text": "ConfMessagesRepository();"
                  }
                },
                {
                  "message": "functional method getMessages increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 222,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 486,
                      "line": 16,
                      "column": 4
                    },
                    "text": "Future<List<ChatMessageModel>> getMessages(\r\n    CollectionReference rootRef,\r\n  ) async {\r\n    final messageList = await rootRef.get().then(\r\n          (value) => value.docs.map(ChatMessageModel.fromFireStore).toList(),\r\n        );\r\n\r\n    return messageList;\r\n  }"
                  }
                },
                {
                  "message": "functional method addMessage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 492,
                      "line": 18,
                      "column": 3
                    },
                    "end": {
                      "offset": 933,
                      "line": 33,
                      "column": 4
                    },
                    "text": "Future<bool> addMessage(\r\n      {required CollectionReference rootRef,\r\n      required String userID,\r\n      required String message,\r\n      required String nickName}) async {\r\n    final data = ChatMessageModel.create(\r\n        message: message, userID: userID, nickName: nickName);\r\n\r\n    try {\r\n      await rootRef.add(data.toJson());\r\n      return true;\r\n    } on Exception catch (e) {\r\n      logger.e(e);\r\n      return false;\r\n    }\r\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ConfMessagesRepository.ConfMessagesRepository": {
          "codeSpan": {
            "start": {
              "offset": 191,
              "line": 6,
              "column": 3
            },
            "end": {
              "offset": 216,
              "line": 6,
              "column": 28
            },
            "text": "ConfMessagesRepository();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ConfMessagesRepository.getMessages": {
          "codeSpan": {
            "start": {
              "offset": 222,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 486,
              "line": 16,
              "column": 4
            },
            "text": "Future<List<ChatMessageModel>> getMessages(\r\n    CollectionReference rootRef,\r\n  ) async {\r\n    final messageList = await rootRef.get().then(\r\n          (value) => value.docs.map(ChatMessageModel.fromFireStore).toList(),\r\n        );\r\n\r\n    return messageList;\r\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 71.69925001442313,
              "level": "none",
              "comment": "This method has a halstead volume of 71.69925001442313.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 9 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 311,
                      "line": 10,
                      "column": 11
                    },
                    "end": {
                      "offset": 486,
                      "line": 16,
                      "column": 4
                    },
                    "text": "{\r\n    final messageList = await rootRef.get().then(\r\n          (value) => value.docs.map(ChatMessageModel.fromFireStore).toList(),\r\n        );\r\n\r\n    return messageList;\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 314,
                      "line": 11,
                      "column": 0
                    },
                    "end": {
                      "offset": 314,
                      "line": 11,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 365,
                      "line": 12,
                      "column": 0
                    },
                    "end": {
                      "offset": 365,
                      "line": 12,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 444,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 444,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 458,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 458,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 74,
              "level": "none",
              "comment": "This method has 74 maintainability index.",
              "context": []
            }
          ]
        },
        "ConfMessagesRepository.addMessage": {
          "codeSpan": {
            "start": {
              "offset": 492,
              "line": 18,
              "column": 3
            },
            "end": {
              "offset": 933,
              "line": 33,
              "column": 4
            },
            "text": "Future<bool> addMessage(\r\n      {required CollectionReference rootRef,\r\n      required String userID,\r\n      required String message,\r\n      required String nickName}) async {\r\n    final data = ChatMessageModel.create(\r\n        message: message, userID: userID, nickName: nickName);\r\n\r\n    try {\r\n      await rootRef.add(data.toJson());\r\n      return true;\r\n    } on Exception catch (e) {\r\n      logger.e(e);\r\n      return false;\r\n    }\r\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "Catch clause increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 856,
                      "line": 29,
                      "column": 7
                    },
                    "end": {
                      "offset": 928,
                      "line": 32,
                      "column": 6
                    },
                    "text": "on Exception catch (e) {\r\n      logger.e(e);\r\n      return false;\r\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 82.0447025077789,
              "level": "none",
              "comment": "This method has a halstead volume of 82.0447025077789.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 16,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 16 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 666,
                      "line": 22,
                      "column": 40
                    },
                    "end": {
                      "offset": 933,
                      "line": 33,
                      "column": 4
                    },
                    "text": "{\r\n    final data = ChatMessageModel.create(\r\n        message: message, userID: userID, nickName: nickName);\r\n\r\n    try {\r\n      await rootRef.add(data.toJson());\r\n      return true;\r\n    } on Exception catch (e) {\r\n      logger.e(e);\r\n      return false;\r\n    }\r\n  }"
                  }
                },
                {
                  "message": "Try statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 786,
                      "line": 26,
                      "column": 9
                    },
                    "end": {
                      "offset": 855,
                      "line": 29,
                      "column": 6
                    },
                    "text": "{\r\n      await rootRef.add(data.toJson());\r\n      return true;\r\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 4,
              "level": "none",
              "comment": "This method has 4 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 9 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 669,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 669,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 712,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 712,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 778,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 778,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 789,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 789,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 830,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 830,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 850,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 850,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 882,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 882,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 902,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 902,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 923,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 923,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 66,
              "level": "none",
              "comment": "This method has 66 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/repository/pdf_component.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "PDFComponentBuilder": {
          "codeSpan": {
            "start": {
              "offset": 151,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 2612,
              "line": 75,
              "column": 2
            },
            "text": "class PDFComponentBuilder {\n  const PDFComponentBuilder();\n\n  double get _pageBodyWidth =>\n      PdfPageFormat.a4.width -\n      PdfPageFormat.a4.marginLeft -\n      PdfPageFormat.a4.marginRight -\n      20;\n  double get _pageBodyHeight =>\n      PdfPageFormat.a4.height -\n      PdfPageFormat.a4.marginTop -\n      PdfPageFormat.a4.marginBottom -\n      20;\n\n  Page createPage(List<EvaluationSummaryState> dataList, Font font) {\n    return Page(\n      pageFormat: PdfPageFormat.a4,\n      theme: ThemeData.withFont(base: font),\n      orientation: PageOrientation.landscape,\n      build: (context) {\n        final items = List.generate(\n            dataList.length,\n            (index) => Container(\n                  width: _pageBodyHeight / 3,\n                  height: _pageBodyWidth / 3,\n                  padding: const EdgeInsets.all(8),\n                  decoration: BoxDecoration(\n                    border: Border.all(),\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Text(\n                        dataList[index].message,\n                        maxLines: 6,\n                      ),\n                      Row(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe65b)),\n                              Text('いいね'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbUp.toString()),\n                            ],\n                          ),\n                          SizedBox(width: widgetBetweenSpace),\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe658)),\n                              Text('いまいち'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbDown.toString()),\n                            ],\n                          ),\n                        ],\n                      ),\n                    ],\n                  ),\n                ));\n        final cards = Wrap(spacing: 8, runSpacing: 8, children: items);\n\n        return cards;\n      },\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 4,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 4 methods.",
              "context": [
                {
                  "message": "constructor PDFComponentBuilder increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 181,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 209,
                      "line": 8,
                      "column": 31
                    },
                    "text": "const PDFComponentBuilder();"
                  }
                },
                {
                  "message": "getter _pageBodyWidth increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 213,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 355,
                      "line": 14,
                      "column": 10
                    },
                    "text": "double get _pageBodyWidth =>\n      PdfPageFormat.a4.width -\n      PdfPageFormat.a4.marginLeft -\n      PdfPageFormat.a4.marginRight -\n      20;"
                  }
                },
                {
                  "message": "getter _pageBodyHeight increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 358,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 502,
                      "line": 19,
                      "column": 10
                    },
                    "text": "double get _pageBodyHeight =>\n      PdfPageFormat.a4.height -\n      PdfPageFormat.a4.marginTop -\n      PdfPageFormat.a4.marginBottom -\n      20;"
                  }
                },
                {
                  "message": "method createPage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 506,
                      "line": 21,
                      "column": 3
                    },
                    "end": {
                      "offset": 2610,
                      "line": 74,
                      "column": 4
                    },
                    "text": "Page createPage(List<EvaluationSummaryState> dataList, Font font) {\n    return Page(\n      pageFormat: PdfPageFormat.a4,\n      theme: ThemeData.withFont(base: font),\n      orientation: PageOrientation.landscape,\n      build: (context) {\n        final items = List.generate(\n            dataList.length,\n            (index) => Container(\n                  width: _pageBodyHeight / 3,\n                  height: _pageBodyWidth / 3,\n                  padding: const EdgeInsets.all(8),\n                  decoration: BoxDecoration(\n                    border: Border.all(),\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Text(\n                        dataList[index].message,\n                        maxLines: 6,\n                      ),\n                      Row(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe65b)),\n                              Text('いいね'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbUp.toString()),\n                            ],\n                          ),\n                          SizedBox(width: widgetBetweenSpace),\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe658)),\n                              Text('いまいち'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbDown.toString()),\n                            ],\n                          ),\n                        ],\n                      ),\n                    ],\n                  ),\n                ));\n        final cards = Wrap(spacing: 8, runSpacing: 8, children: items);\n\n        return cards;\n      },\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor PDFComponentBuilder decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 181,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 209,
                      "line": 8,
                      "column": 31
                    },
                    "text": "const PDFComponentBuilder();"
                  }
                },
                {
                  "message": "functional method createPage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 506,
                      "line": 21,
                      "column": 3
                    },
                    "end": {
                      "offset": 2610,
                      "line": 74,
                      "column": 4
                    },
                    "text": "Page createPage(List<EvaluationSummaryState> dataList, Font font) {\n    return Page(\n      pageFormat: PdfPageFormat.a4,\n      theme: ThemeData.withFont(base: font),\n      orientation: PageOrientation.landscape,\n      build: (context) {\n        final items = List.generate(\n            dataList.length,\n            (index) => Container(\n                  width: _pageBodyHeight / 3,\n                  height: _pageBodyWidth / 3,\n                  padding: const EdgeInsets.all(8),\n                  decoration: BoxDecoration(\n                    border: Border.all(),\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Text(\n                        dataList[index].message,\n                        maxLines: 6,\n                      ),\n                      Row(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe65b)),\n                              Text('いいね'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbUp.toString()),\n                            ],\n                          ),\n                          SizedBox(width: widgetBetweenSpace),\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe658)),\n                              Text('いまいち'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbDown.toString()),\n                            ],\n                          ),\n                        ],\n                      ),\n                    ],\n                  ),\n                ));\n        final cards = Wrap(spacing: 8, runSpacing: 8, children: items);\n\n        return cards;\n      },\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "PDFComponentBuilder.PDFComponentBuilder": {
          "codeSpan": {
            "start": {
              "offset": 181,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 209,
              "line": 8,
              "column": 31
            },
            "text": "const PDFComponentBuilder();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "PDFComponentBuilder._pageBodyWidth": {
          "codeSpan": {
            "start": {
              "offset": 213,
              "line": 10,
              "column": 3
            },
            "end": {
              "offset": 355,
              "line": 14,
              "column": 10
            },
            "text": "double get _pageBodyWidth =>\n      PdfPageFormat.a4.width -\n      PdfPageFormat.a4.marginLeft -\n      PdfPageFormat.a4.marginRight -\n      20;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This getter has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 31.019550008653873,
              "level": "none",
              "comment": "This getter has a halstead volume of 31.019550008653873.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This getter has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This getter has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This getter has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This getter has 5 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 211,
                      "line": 10,
                      "column": 0
                    },
                    "end": {
                      "offset": 211,
                      "line": 10,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 242,
                      "line": 11,
                      "column": 0
                    },
                    "end": {
                      "offset": 242,
                      "line": 11,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 273,
                      "line": 12,
                      "column": 0
                    },
                    "end": {
                      "offset": 273,
                      "line": 12,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 309,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 309,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 346,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 346,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 75,
              "level": "none",
              "comment": "This getter has 75 maintainability index.",
              "context": []
            }
          ]
        },
        "PDFComponentBuilder._pageBodyHeight": {
          "codeSpan": {
            "start": {
              "offset": 358,
              "line": 15,
              "column": 3
            },
            "end": {
              "offset": 502,
              "line": 19,
              "column": 10
            },
            "text": "double get _pageBodyHeight =>\n      PdfPageFormat.a4.height -\n      PdfPageFormat.a4.marginTop -\n      PdfPageFormat.a4.marginBottom -\n      20;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This getter has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 31.019550008653873,
              "level": "none",
              "comment": "This getter has a halstead volume of 31.019550008653873.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This getter has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This getter has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This getter has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This getter has 5 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 356,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 356,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 388,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 388,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 420,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 420,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 455,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 455,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 493,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 493,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 75,
              "level": "none",
              "comment": "This getter has 75 maintainability index.",
              "context": []
            }
          ]
        },
        "PDFComponentBuilder.createPage": {
          "codeSpan": {
            "start": {
              "offset": 506,
              "line": 21,
              "column": 3
            },
            "end": {
              "offset": 2610,
              "line": 74,
              "column": 4
            },
            "text": "Page createPage(List<EvaluationSummaryState> dataList, Font font) {\n    return Page(\n      pageFormat: PdfPageFormat.a4,\n      theme: ThemeData.withFont(base: font),\n      orientation: PageOrientation.landscape,\n      build: (context) {\n        final items = List.generate(\n            dataList.length,\n            (index) => Container(\n                  width: _pageBodyHeight / 3,\n                  height: _pageBodyWidth / 3,\n                  padding: const EdgeInsets.all(8),\n                  decoration: BoxDecoration(\n                    border: Border.all(),\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Text(\n                        dataList[index].message,\n                        maxLines: 6,\n                      ),\n                      Row(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe65b)),\n                              Text('いいね'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbUp.toString()),\n                            ],\n                          ),\n                          SizedBox(width: widgetBetweenSpace),\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe658)),\n                              Text('いまいち'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbDown.toString()),\n                            ],\n                          ),\n                        ],\n                      ),\n                    ],\n                  ),\n                ));\n        final cards = Wrap(spacing: 8, runSpacing: 8, children: items);\n\n        return cards;\n      },\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 1289.068693130408,
              "level": "none",
              "comment": "This method has a halstead volume of 1289.068693130408.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 54,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 54 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 572,
                      "line": 21,
                      "column": 69
                    },
                    "end": {
                      "offset": 2610,
                      "line": 74,
                      "column": 4
                    },
                    "text": "{\n    return Page(\n      pageFormat: PdfPageFormat.a4,\n      theme: ThemeData.withFont(base: font),\n      orientation: PageOrientation.landscape,\n      build: (context) {\n        final items = List.generate(\n            dataList.length,\n            (index) => Container(\n                  width: _pageBodyHeight / 3,\n                  height: _pageBodyWidth / 3,\n                  padding: const EdgeInsets.all(8),\n                  decoration: BoxDecoration(\n                    border: Border.all(),\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Text(\n                        dataList[index].message,\n                        maxLines: 6,\n                      ),\n                      Row(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe65b)),\n                              Text('いいね'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbUp.toString()),\n                            ],\n                          ),\n                          SizedBox(width: widgetBetweenSpace),\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe658)),\n                              Text('いまいち'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbDown.toString()),\n                            ],\n                          ),\n                        ],\n                      ),\n                    ],\n                  ),\n                ));\n        final cards = Wrap(spacing: 8, runSpacing: 8, children: items);\n\n        return cards;\n      },\n    );\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 741,
                      "line": 26,
                      "column": 24
                    },
                    "end": {
                      "offset": 2598,
                      "line": 72,
                      "column": 8
                    },
                    "text": "{\n        final items = List.generate(\n            dataList.length,\n            (index) => Container(\n                  width: _pageBodyHeight / 3,\n                  height: _pageBodyWidth / 3,\n                  padding: const EdgeInsets.all(8),\n                  decoration: BoxDecoration(\n                    border: Border.all(),\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Text(\n                        dataList[index].message,\n                        maxLines: 6,\n                      ),\n                      Row(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe65b)),\n                              Text('いいね'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbUp.toString()),\n                            ],\n                          ),\n                          SizedBox(width: widgetBetweenSpace),\n                          Row(\n                            children: [\n                              // Icon(const IconData(0xe658)),\n                              Text('いまいち'),\n                              SizedBox(width: widgetBetweenSpace),\n                              Text(dataList[index].thumbDown.toString()),\n                            ],\n                          ),\n                        ],\n                      ),\n                    ],\n                  ),\n                ));\n        final cards = Wrap(spacing: 8, runSpacing: 8, children: items);\n\n        return cards;\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 49,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 49 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 574,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 574,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 591,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 591,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 627,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 627,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 672,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 672,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 718,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 718,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 743,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 743,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 780,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 780,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 809,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 809,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 843,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 843,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 889,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 889,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 935,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 935,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 987,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 987,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1032,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1032,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1074,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1074,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1134,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1134,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1155,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1155,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1188,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1188,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1259,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1259,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1291,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1291,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1319,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1319,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1368,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1368,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1405,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1405,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1430,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1430,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1457,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1457,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1526,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1526,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1562,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1562,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1593,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1593,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1696,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1696,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1739,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1739,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1806,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 1806,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1878,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 1878,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1909,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 1909,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1938,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 1938,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2001,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 2001,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2032,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 2032,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2135,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2135,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2179,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 2179,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2246,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2246,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2320,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2320,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2351,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2351,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2380,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 2380,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2407,
                      "line": 65,
                      "column": 0
                    },
                    "end": {
                      "offset": 2407,
                      "line": 65,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2432,
                      "line": 66,
                      "column": 0
                    },
                    "end": {
                      "offset": 2432,
                      "line": 66,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2455,
                      "line": 67,
                      "column": 0
                    },
                    "end": {
                      "offset": 2455,
                      "line": 67,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2476,
                      "line": 68,
                      "column": 0
                    },
                    "end": {
                      "offset": 2476,
                      "line": 68,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2496,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 2496,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2569,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 2569,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2591,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 2591,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2600,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 2600,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 42,
              "level": "none",
              "comment": "This method has 42 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/repository/conf_sumnary_pdf_repository.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ConfSummaryPDFRepository": {
          "codeSpan": {
            "start": {
              "offset": 261,
              "line": 9,
              "column": 1
            },
            "end": {
              "offset": 1008,
              "line": 34,
              "column": 2
            },
            "text": "class ConfSummaryPDFRepository {\n  Future<Document?> generatePdf(ConferenceMessagesDetailState input) async {\n    final summaryList = input.evaluateSummary.value;\n    if (summaryList == null || summaryList.isEmpty) {\n      return null;\n    }\n\n    final pdf = Document(title: input.agenda);\n    final font = await PdfGoogleFonts.shipporiMinchoRegular();\n\n    const pdfComponentBuilder = PDFComponentBuilder();\n\n    partition(summaryList, 9)\n        .map((e) => pdfComponentBuilder.createPage(e, font))\n        .forEach(pdf.addPage);\n\n    await pdf.save();\n\n    return pdf;\n  }\n\n  Future<bool> sharePdf(\n      {required String fileName, required Document pdf}) async {\n    return Printing.sharePdf(bytes: await pdf.save(), filename: fileName);\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "method generatePdf increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 296,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 836,
                      "line": 28,
                      "column": 4
                    },
                    "text": "Future<Document?> generatePdf(ConferenceMessagesDetailState input) async {\n    final summaryList = input.evaluateSummary.value;\n    if (summaryList == null || summaryList.isEmpty) {\n      return null;\n    }\n\n    final pdf = Document(title: input.agenda);\n    final font = await PdfGoogleFonts.shipporiMinchoRegular();\n\n    const pdfComponentBuilder = PDFComponentBuilder();\n\n    partition(summaryList, 9)\n        .map((e) => pdfComponentBuilder.createPage(e, font))\n        .forEach(pdf.addPage);\n\n    await pdf.save();\n\n    return pdf;\n  }"
                  }
                },
                {
                  "message": "method sharePdf increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 840,
                      "line": 30,
                      "column": 3
                    },
                    "end": {
                      "offset": 1006,
                      "line": 33,
                      "column": 4
                    },
                    "text": "Future<bool> sharePdf(\n      {required String fileName, required Document pdf}) async {\n    return Printing.sharePdf(bytes: await pdf.save(), filename: fileName);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 1,
              "level": "none",
              "comment": "This class has a weight of 1.0.",
              "context": [
                {
                  "message": "functional method generatePdf increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 296,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 836,
                      "line": 28,
                      "column": 4
                    },
                    "text": "Future<Document?> generatePdf(ConferenceMessagesDetailState input) async {\n    final summaryList = input.evaluateSummary.value;\n    if (summaryList == null || summaryList.isEmpty) {\n      return null;\n    }\n\n    final pdf = Document(title: input.agenda);\n    final font = await PdfGoogleFonts.shipporiMinchoRegular();\n\n    const pdfComponentBuilder = PDFComponentBuilder();\n\n    partition(summaryList, 9)\n        .map((e) => pdfComponentBuilder.createPage(e, font))\n        .forEach(pdf.addPage);\n\n    await pdf.save();\n\n    return pdf;\n  }"
                  }
                },
                {
                  "message": "functional method sharePdf increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 840,
                      "line": 30,
                      "column": 3
                    },
                    "end": {
                      "offset": 1006,
                      "line": 33,
                      "column": 4
                    },
                    "text": "Future<bool> sharePdf(\n      {required String fileName, required Document pdf}) async {\n    return Printing.sharePdf(bytes: await pdf.save(), filename: fileName);\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ConfSummaryPDFRepository.generatePdf": {
          "codeSpan": {
            "start": {
              "offset": 296,
              "line": 10,
              "column": 3
            },
            "end": {
              "offset": 836,
              "line": 28,
              "column": 4
            },
            "text": "Future<Document?> generatePdf(ConferenceMessagesDetailState input) async {\n    final summaryList = input.evaluateSummary.value;\n    if (summaryList == null || summaryList.isEmpty) {\n      return null;\n    }\n\n    final pdf = Document(title: input.agenda);\n    final font = await PdfGoogleFonts.shipporiMinchoRegular();\n\n    const pdfComponentBuilder = PDFComponentBuilder();\n\n    partition(summaryList, 9)\n        .map((e) => pdfComponentBuilder.createPage(e, font))\n        .forEach(pdf.addPage);\n\n    await pdf.save();\n\n    return pdf;\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 3,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 3.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 428,
                      "line": 12,
                      "column": 5
                    },
                    "end": {
                      "offset": 502,
                      "line": 14,
                      "column": 6
                    },
                    "text": "if (summaryList == null || summaryList.isEmpty) {\n      return null;\n    }"
                  }
                },
                {
                  "message": "Operator || increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 452,
                      "line": 12,
                      "column": 29
                    },
                    "end": {
                      "offset": 454,
                      "line": 12,
                      "column": 31
                    },
                    "text": "||"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 199.68581616031315,
              "level": "none",
              "comment": "This method has a halstead volume of 199.68581616031315.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 19,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 19 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 369,
                      "line": 10,
                      "column": 76
                    },
                    "end": {
                      "offset": 836,
                      "line": 28,
                      "column": 4
                    },
                    "text": "{\n    final summaryList = input.evaluateSummary.value;\n    if (summaryList == null || summaryList.isEmpty) {\n      return null;\n    }\n\n    final pdf = Document(title: input.agenda);\n    final font = await PdfGoogleFonts.shipporiMinchoRegular();\n\n    const pdfComponentBuilder = PDFComponentBuilder();\n\n    partition(summaryList, 9)\n        .map((e) => pdfComponentBuilder.createPage(e, font))\n        .forEach(pdf.addPage);\n\n    await pdf.save();\n\n    return pdf;\n  }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 476,
                      "line": 12,
                      "column": 53
                    },
                    "end": {
                      "offset": 502,
                      "line": 14,
                      "column": 6
                    },
                    "text": "{\n      return null;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 12 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 371,
                      "line": 11,
                      "column": 0
                    },
                    "end": {
                      "offset": 371,
                      "line": 11,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 424,
                      "line": 12,
                      "column": 0
                    },
                    "end": {
                      "offset": 424,
                      "line": 12,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 478,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 478,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 497,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 497,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 504,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 504,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 551,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 551,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 615,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 615,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 671,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 671,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 701,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 701,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 762,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 762,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 794,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 794,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 817,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 817,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 60,
              "level": "none",
              "comment": "This method has 60 maintainability index.",
              "context": []
            }
          ]
        },
        "ConfSummaryPDFRepository.sharePdf": {
          "codeSpan": {
            "start": {
              "offset": 840,
              "line": 30,
              "column": 3
            },
            "end": {
              "offset": 1006,
              "line": 33,
              "column": 4
            },
            "text": "Future<bool> sharePdf(\n      {required String fileName, required Document pdf}) async {\n    return Printing.sharePdf(bytes: await pdf.save(), filename: fileName);\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 24,
              "level": "none",
              "comment": "This method has a halstead volume of 24.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 926,
                      "line": 31,
                      "column": 64
                    },
                    "end": {
                      "offset": 1006,
                      "line": 33,
                      "column": 4
                    },
                    "text": "{\n    return Printing.sharePdf(bytes: await pdf.save(), filename: fileName);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This method has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 928,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 928,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 91,
              "level": "none",
              "comment": "This method has 91 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/repository/tinder_repository.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "TinderRepository": {
          "codeSpan": {
            "start": {
              "offset": 265,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 1605,
              "line": 58,
              "column": 2
            },
            "text": "class TinderRepository {\n  TinderRepository()\n      : firebase = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance;\n\n  final FirebaseFirestore firebase;\n\n  final FirebaseAuth auth;\n\n  Future<bool> resisterEvaluateRate(\n      String roomID, EvaluateTinderState evaluateState) async {\n    final userID = auth.currentUser!.uid;\n\n    try {\n      final collectionRef = firebase\n          .collection('conference')\n          .doc(roomID)\n          .collection('messages')\n          .doc(evaluateState.docID)\n          .collection('evaluations');\n\n      await collectionRef.doc(userID).set(\n          TinderEvaluation(uid: userID, tinder: evaluateState.evaluation)\n              .toJson(),\n          SetOptions(merge: true));\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }\n\n  Future<List<TinderEvaluation>> getEvaluateRate(\n      {required String roomID, required String messageID}) async {\n    return firebase\n        .collection('conference')\n        .doc(roomID)\n        .collection('messages')\n        .doc(messageID)\n        .collection('evaluations')\n        .get()\n        .then((value) {\n      final result = <TinderEvaluation>[];\n      for (final doc in value.docs) {\n        result.add(TinderEvaluation.fromJson(doc.data()));\n      }\n\n      return result;\n    });\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor TinderRepository increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 292,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 395,
                      "line": 10,
                      "column": 38
                    },
                    "text": "TinderRepository()\n      : firebase = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance;"
                  }
                },
                {
                  "message": "method resisterEvaluateRate increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 464,
                      "line": 16,
                      "column": 3
                    },
                    "end": {
                      "offset": 1098,
                      "line": 38,
                      "column": 4
                    },
                    "text": "Future<bool> resisterEvaluateRate(\n      String roomID, EvaluateTinderState evaluateState) async {\n    final userID = auth.currentUser!.uid;\n\n    try {\n      final collectionRef = firebase\n          .collection('conference')\n          .doc(roomID)\n          .collection('messages')\n          .doc(evaluateState.docID)\n          .collection('evaluations');\n\n      await collectionRef.doc(userID).set(\n          TinderEvaluation(uid: userID, tinder: evaluateState.evaluation)\n              .toJson(),\n          SetOptions(merge: true));\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
                  }
                },
                {
                  "message": "method getEvaluateRate increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1102,
                      "line": 40,
                      "column": 3
                    },
                    "end": {
                      "offset": 1603,
                      "line": 57,
                      "column": 4
                    },
                    "text": "Future<List<TinderEvaluation>> getEvaluateRate(\n      {required String roomID, required String messageID}) async {\n    return firebase\n        .collection('conference')\n        .doc(roomID)\n        .collection('messages')\n        .doc(messageID)\n        .collection('evaluations')\n        .get()\n        .then((value) {\n      final result = <TinderEvaluation>[];\n      for (final doc in value.docs) {\n        result.add(TinderEvaluation.fromJson(doc.data()));\n      }\n\n      return result;\n    });\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor TinderRepository decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 292,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 395,
                      "line": 10,
                      "column": 38
                    },
                    "text": "TinderRepository()\n      : firebase = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance;"
                  }
                },
                {
                  "message": "functional method resisterEvaluateRate increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 464,
                      "line": 16,
                      "column": 3
                    },
                    "end": {
                      "offset": 1098,
                      "line": 38,
                      "column": 4
                    },
                    "text": "Future<bool> resisterEvaluateRate(\n      String roomID, EvaluateTinderState evaluateState) async {\n    final userID = auth.currentUser!.uid;\n\n    try {\n      final collectionRef = firebase\n          .collection('conference')\n          .doc(roomID)\n          .collection('messages')\n          .doc(evaluateState.docID)\n          .collection('evaluations');\n\n      await collectionRef.doc(userID).set(\n          TinderEvaluation(uid: userID, tinder: evaluateState.evaluation)\n              .toJson(),\n          SetOptions(merge: true));\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
                  }
                },
                {
                  "message": "functional method getEvaluateRate increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1102,
                      "line": 40,
                      "column": 3
                    },
                    "end": {
                      "offset": 1603,
                      "line": 57,
                      "column": 4
                    },
                    "text": "Future<List<TinderEvaluation>> getEvaluateRate(\n      {required String roomID, required String messageID}) async {\n    return firebase\n        .collection('conference')\n        .doc(roomID)\n        .collection('messages')\n        .doc(messageID)\n        .collection('evaluations')\n        .get()\n        .then((value) {\n      final result = <TinderEvaluation>[];\n      for (final doc in value.docs) {\n        result.add(TinderEvaluation.fromJson(doc.data()));\n      }\n\n      return result;\n    });\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "TinderRepository.TinderRepository": {
          "codeSpan": {
            "start": {
              "offset": 292,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 395,
              "line": 10,
              "column": 38
            },
            "text": "TinderRepository()\n      : firebase = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "TinderRepository.resisterEvaluateRate": {
          "codeSpan": {
            "start": {
              "offset": 464,
              "line": 16,
              "column": 3
            },
            "end": {
              "offset": 1098,
              "line": 38,
              "column": 4
            },
            "text": "Future<bool> resisterEvaluateRate(\n      String roomID, EvaluateTinderState evaluateState) async {\n    final userID = auth.currentUser!.uid;\n\n    try {\n      final collectionRef = firebase\n          .collection('conference')\n          .doc(roomID)\n          .collection('messages')\n          .doc(evaluateState.docID)\n          .collection('evaluations');\n\n      await collectionRef.doc(userID).set(\n          TinderEvaluation(uid: userID, tinder: evaluateState.evaluation)\n              .toJson(),\n          SetOptions(merge: true));\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "Catch clause increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1025,
                      "line": 34,
                      "column": 7
                    },
                    "end": {
                      "offset": 1094,
                      "line": 37,
                      "column": 6
                    },
                    "text": "on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 171.8226790216648,
              "level": "none",
              "comment": "This method has a halstead volume of 171.8226790216648.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 23,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 23 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 561,
                      "line": 17,
                      "column": 63
                    },
                    "end": {
                      "offset": 1098,
                      "line": 38,
                      "column": 4
                    },
                    "text": "{\n    final userID = auth.currentUser!.uid;\n\n    try {\n      final collectionRef = firebase\n          .collection('conference')\n          .doc(roomID)\n          .collection('messages')\n          .doc(evaluateState.docID)\n          .collection('evaluations');\n\n      await collectionRef.doc(userID).set(\n          TinderEvaluation(uid: userID, tinder: evaluateState.evaluation)\n              .toJson(),\n          SetOptions(merge: true));\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
                  }
                },
                {
                  "message": "Try statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 614,
                      "line": 20,
                      "column": 9
                    },
                    "end": {
                      "offset": 1024,
                      "line": 34,
                      "column": 6
                    },
                    "text": "{\n      final collectionRef = firebase\n          .collection('conference')\n          .doc(roomID)\n          .collection('messages')\n          .doc(evaluateState.docID)\n          .collection('evaluations');\n\n      await collectionRef.doc(userID).set(\n          TinderEvaluation(uid: userID, tinder: evaluateState.evaluation)\n              .toJson(),\n          SetOptions(merge: true));\n\n      return true;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 17,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 17 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 563,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 563,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 606,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 606,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 616,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 616,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 653,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 653,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 689,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 689,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 712,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 712,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 746,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 746,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 782,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 782,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 821,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 821,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 864,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 864,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 938,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 938,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 963,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 963,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1000,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1000,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1019,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1019,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1050,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1050,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1069,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1069,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1089,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1089,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 58,
              "level": "none",
              "comment": "This method has 58 maintainability index.",
              "context": []
            }
          ]
        },
        "TinderRepository.getEvaluateRate": {
          "codeSpan": {
            "start": {
              "offset": 1102,
              "line": 40,
              "column": 3
            },
            "end": {
              "offset": 1603,
              "line": 57,
              "column": 4
            },
            "text": "Future<List<TinderEvaluation>> getEvaluateRate(\n      {required String roomID, required String messageID}) async {\n    return firebase\n        .collection('conference')\n        .doc(roomID)\n        .collection('messages')\n        .doc(messageID)\n        .collection('evaluations')\n        .get()\n        .then((value) {\n      final result = <TinderEvaluation>[];\n      for (final doc in value.docs) {\n        result.add(TinderEvaluation.fromJson(doc.data()));\n      }\n\n      return result;\n    });\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "For statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1471,
                      "line": 51,
                      "column": 7
                    },
                    "end": {
                      "offset": 1569,
                      "line": 53,
                      "column": 8
                    },
                    "text": "for (final doc in value.docs) {\n        result.add(TinderEvaluation.fromJson(doc.data()));\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 167.58597649126395,
              "level": "none",
              "comment": "This method has a halstead volume of 167.58597649126395.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 18,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 18 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 3,
              "level": "none",
              "comment": "This method has a nesting level of 3.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1215,
                      "line": 41,
                      "column": 66
                    },
                    "end": {
                      "offset": 1603,
                      "line": 57,
                      "column": 4
                    },
                    "text": "{\n    return firebase\n        .collection('conference')\n        .doc(roomID)\n        .collection('messages')\n        .doc(messageID)\n        .collection('evaluations')\n        .get()\n        .then((value) {\n      final result = <TinderEvaluation>[];\n      for (final doc in value.docs) {\n        result.add(TinderEvaluation.fromJson(doc.data()));\n      }\n\n      return result;\n    });\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1420,
                      "line": 49,
                      "column": 23
                    },
                    "end": {
                      "offset": 1597,
                      "line": 56,
                      "column": 6
                    },
                    "text": "{\n      final result = <TinderEvaluation>[];\n      for (final doc in value.docs) {\n        result.add(TinderEvaluation.fromJson(doc.data()));\n      }\n\n      return result;\n    }"
                  }
                },
                {
                  "message": "For statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1501,
                      "line": 51,
                      "column": 37
                    },
                    "end": {
                      "offset": 1569,
                      "line": 53,
                      "column": 8
                    },
                    "text": "{\n        result.add(TinderEvaluation.fromJson(doc.data()));\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 14,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 14 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1217,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1217,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1237,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1237,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1271,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1271,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1292,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1292,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1324,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1324,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1348,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1348,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1383,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1383,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1398,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1398,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1422,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1422,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1465,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1465,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1503,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 1503,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1562,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 1562,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1571,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 1571,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1592,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 1592,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 60,
              "level": "none",
              "comment": "This method has 60 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/repository/room_info_repository.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "RoomInfoRepository": {
          "codeSpan": {
            "start": {
              "offset": 240,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 1721,
              "line": 66,
              "column": 2
            },
            "text": "class RoomInfoRepository {\n  RoomInfoRepository()\n      : fireStore = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance,\n        uuid = const Uuid();\n\n  RoomInfoRepository.test({\n    required this.fireStore,\n    required this.auth,\n    required this.uuid,\n  });\n\n  final FirebaseFirestore fireStore;\n  final FirebaseAuth auth;\n  final Uuid uuid;\n\n  Future<ChatRoomInformation> createRoom(\n      {required String agenda, required String nickName}) async {\n    final user = auth.currentUser;\n\n    final roomID = uuid.v4();\n\n    final roomDocRef = fireStore.chatRoomConverterRef(roomID);\n\n    final roomInfo = ChatRoomInformation.create(\n        agenda: agenda,\n        nickName: nickName,\n        hostUid: user!.uid,\n        roomUid: roomID,\n        participants: [user.uid]);\n\n    await roomDocRef.set(roomInfo);\n\n    return roomInfo;\n  }\n\n  Future<ChatRoomInformation> joinRoom(\n      {required String roomID, required String nickName}) async {\n    final user = auth.currentUser;\n\n    final roomDocRef = fireStore.chatRoomConverterRef(roomID);\n\n    final result = await roomDocRef.get();\n\n    if (!result.exists) {\n      logger.e('Not exist!');\n      throw Exception();\n    }\n\n    final roomInfo = result.data();\n\n    await roomDocRef.update({\n      'participants': FieldValue.arrayUnion(<String>[user!.uid])\n    });\n\n    final participants = roomInfo!.participants..add(user.uid);\n\n    return roomInfo.copyWith(participants: participants, nickName: nickName);\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 4,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 4 methods.",
              "context": [
                {
                  "message": "constructor RoomInfoRepository increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 269,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 404,
                      "line": 11,
                      "column": 29
                    },
                    "text": "RoomInfoRepository()\n      : fireStore = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance,\n        uuid = const Uuid();"
                  }
                },
                {
                  "message": "constructor test increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 408,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 516,
                      "line": 17,
                      "column": 6
                    },
                    "text": "RoomInfoRepository.test({\n    required this.fireStore,\n    required this.auth,\n    required this.uuid,\n  });"
                  }
                },
                {
                  "message": "method createRoom increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 604,
                      "line": 23,
                      "column": 3
                    },
                    "end": {
                      "offset": 1092,
                      "line": 41,
                      "column": 4
                    },
                    "text": "Future<ChatRoomInformation> createRoom(\n      {required String agenda, required String nickName}) async {\n    final user = auth.currentUser;\n\n    final roomID = uuid.v4();\n\n    final roomDocRef = fireStore.chatRoomConverterRef(roomID);\n\n    final roomInfo = ChatRoomInformation.create(\n        agenda: agenda,\n        nickName: nickName,\n        hostUid: user!.uid,\n        roomUid: roomID,\n        participants: [user.uid]);\n\n    await roomDocRef.set(roomInfo);\n\n    return roomInfo;\n  }"
                  }
                },
                {
                  "message": "method joinRoom increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1096,
                      "line": 43,
                      "column": 3
                    },
                    "end": {
                      "offset": 1719,
                      "line": 65,
                      "column": 4
                    },
                    "text": "Future<ChatRoomInformation> joinRoom(\n      {required String roomID, required String nickName}) async {\n    final user = auth.currentUser;\n\n    final roomDocRef = fireStore.chatRoomConverterRef(roomID);\n\n    final result = await roomDocRef.get();\n\n    if (!result.exists) {\n      logger.e('Not exist!');\n      throw Exception();\n    }\n\n    final roomInfo = result.data();\n\n    await roomDocRef.update({\n      'participants': FieldValue.arrayUnion(<String>[user!.uid])\n    });\n\n    final participants = roomInfo!.participants..add(user.uid);\n\n    return roomInfo.copyWith(participants: participants, nickName: nickName);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor RoomInfoRepository decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 269,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 404,
                      "line": 11,
                      "column": 29
                    },
                    "text": "RoomInfoRepository()\n      : fireStore = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance,\n        uuid = const Uuid();"
                  }
                },
                {
                  "message": "public constructor test decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 408,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 516,
                      "line": 17,
                      "column": 6
                    },
                    "text": "RoomInfoRepository.test({\n    required this.fireStore,\n    required this.auth,\n    required this.uuid,\n  });"
                  }
                },
                {
                  "message": "functional method createRoom increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 604,
                      "line": 23,
                      "column": 3
                    },
                    "end": {
                      "offset": 1092,
                      "line": 41,
                      "column": 4
                    },
                    "text": "Future<ChatRoomInformation> createRoom(\n      {required String agenda, required String nickName}) async {\n    final user = auth.currentUser;\n\n    final roomID = uuid.v4();\n\n    final roomDocRef = fireStore.chatRoomConverterRef(roomID);\n\n    final roomInfo = ChatRoomInformation.create(\n        agenda: agenda,\n        nickName: nickName,\n        hostUid: user!.uid,\n        roomUid: roomID,\n        participants: [user.uid]);\n\n    await roomDocRef.set(roomInfo);\n\n    return roomInfo;\n  }"
                  }
                },
                {
                  "message": "functional method joinRoom increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1096,
                      "line": 43,
                      "column": 3
                    },
                    "end": {
                      "offset": 1719,
                      "line": 65,
                      "column": 4
                    },
                    "text": "Future<ChatRoomInformation> joinRoom(\n      {required String roomID, required String nickName}) async {\n    final user = auth.currentUser;\n\n    final roomDocRef = fireStore.chatRoomConverterRef(roomID);\n\n    final result = await roomDocRef.get();\n\n    if (!result.exists) {\n      logger.e('Not exist!');\n      throw Exception();\n    }\n\n    final roomInfo = result.data();\n\n    await roomDocRef.update({\n      'participants': FieldValue.arrayUnion(<String>[user!.uid])\n    });\n\n    final participants = roomInfo!.participants..add(user.uid);\n\n    return roomInfo.copyWith(participants: participants, nickName: nickName);\n  }"
                  }
                }
              ]
            }
          ]
        },
        "FireStoreChatRoom": {
          "codeSpan": {
            "start": {
              "offset": 1723,
              "line": 68,
              "column": 1
            },
            "end": {
              "offset": 2077,
              "line": 74,
              "column": 2
            },
            "text": "extension FireStoreChatRoom on FirebaseFirestore {\n  DocumentReference<ChatRoomInformation> chatRoomConverterRef(String roomID) =>\n      collection('conference').doc(roomID).withConverter(\n          fromFirestore: (snapshot, _) =>\n              ChatRoomInformation.fromJson(snapshot.data()!),\n          toFirestore: (messages, _) => messages.toJson());\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 1,
              "unitType": "method",
              "level": "none",
              "comment": "This extension has 1 method.",
              "context": [
                {
                  "message": "method chatRoomConverterRef increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1776,
                      "line": 69,
                      "column": 3
                    },
                    "end": {
                      "offset": 2075,
                      "line": 73,
                      "column": 60
                    },
                    "text": "DocumentReference<ChatRoomInformation> chatRoomConverterRef(String roomID) =>\n      collection('conference').doc(roomID).withConverter(\n          fromFirestore: (snapshot, _) =>\n              ChatRoomInformation.fromJson(snapshot.data()!),\n          toFirestore: (messages, _) => messages.toJson());"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 1,
              "level": "none",
              "comment": "This extension has a weight of 1.0.",
              "context": [
                {
                  "message": "functional method chatRoomConverterRef increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1776,
                      "line": 69,
                      "column": 3
                    },
                    "end": {
                      "offset": 2075,
                      "line": 73,
                      "column": 60
                    },
                    "text": "DocumentReference<ChatRoomInformation> chatRoomConverterRef(String roomID) =>\n      collection('conference').doc(roomID).withConverter(\n          fromFirestore: (snapshot, _) =>\n              ChatRoomInformation.fromJson(snapshot.data()!),\n          toFirestore: (messages, _) => messages.toJson());"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "RoomInfoRepository.RoomInfoRepository": {
          "codeSpan": {
            "start": {
              "offset": 269,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 404,
              "line": 11,
              "column": 29
            },
            "text": "RoomInfoRepository()\n      : fireStore = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance,\n        uuid = const Uuid();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "RoomInfoRepository.test": {
          "codeSpan": {
            "start": {
              "offset": 408,
              "line": 13,
              "column": 3
            },
            "end": {
              "offset": 516,
              "line": 17,
              "column": 6
            },
            "text": "RoomInfoRepository.test({\n    required this.fireStore,\n    required this.auth,\n    required this.uuid,\n  });"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "RoomInfoRepository.createRoom": {
          "codeSpan": {
            "start": {
              "offset": 604,
              "line": 23,
              "column": 3
            },
            "end": {
              "offset": 1092,
              "line": 41,
              "column": 4
            },
            "text": "Future<ChatRoomInformation> createRoom(\n      {required String agenda, required String nickName}) async {\n    final user = auth.currentUser;\n\n    final roomID = uuid.v4();\n\n    final roomDocRef = fireStore.chatRoomConverterRef(roomID);\n\n    final roomInfo = ChatRoomInformation.create(\n        agenda: agenda,\n        nickName: nickName,\n        hostUid: user!.uid,\n        roomUid: roomID,\n        participants: [user.uid]);\n\n    await roomDocRef.set(roomInfo);\n\n    return roomInfo;\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 156.0801066523054,
              "level": "none",
              "comment": "This method has a halstead volume of 156.0801066523054.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 19,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 19 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 708,
                      "line": 24,
                      "column": 65
                    },
                    "end": {
                      "offset": 1092,
                      "line": 41,
                      "column": 4
                    },
                    "text": "{\n    final user = auth.currentUser;\n\n    final roomID = uuid.v4();\n\n    final roomDocRef = fireStore.chatRoomConverterRef(roomID);\n\n    final roomInfo = ChatRoomInformation.create(\n        agenda: agenda,\n        nickName: nickName,\n        hostUid: user!.uid,\n        roomUid: roomID,\n        participants: [user.uid]);\n\n    await roomDocRef.set(roomInfo);\n\n    return roomInfo;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 11,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 11 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 710,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 710,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 746,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 746,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 777,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 777,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 841,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 841,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 890,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 890,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 914,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 914,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 942,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 942,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 970,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 970,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 995,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 995,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1031,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1031,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1068,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1068,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 62,
              "level": "none",
              "comment": "This method has 62 maintainability index.",
              "context": []
            }
          ]
        },
        "RoomInfoRepository.joinRoom": {
          "codeSpan": {
            "start": {
              "offset": 1096,
              "line": 43,
              "column": 3
            },
            "end": {
              "offset": 1719,
              "line": 65,
              "column": 4
            },
            "text": "Future<ChatRoomInformation> joinRoom(\n      {required String roomID, required String nickName}) async {\n    final user = auth.currentUser;\n\n    final roomDocRef = fireStore.chatRoomConverterRef(roomID);\n\n    final result = await roomDocRef.get();\n\n    if (!result.exists) {\n      logger.e('Not exist!');\n      throw Exception();\n    }\n\n    final roomInfo = result.data();\n\n    await roomDocRef.update({\n      'participants': FieldValue.arrayUnion(<String>[user!.uid])\n    });\n\n    final participants = roomInfo!.participants..add(user.uid);\n\n    return roomInfo.copyWith(participants: participants, nickName: nickName);\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1348,
                      "line": 51,
                      "column": 5
                    },
                    "end": {
                      "offset": 1430,
                      "line": 54,
                      "column": 6
                    },
                    "text": "if (!result.exists) {\n      logger.e('Not exist!');\n      throw Exception();\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 245.34452978042594,
              "level": "none",
              "comment": "This method has a halstead volume of 245.34452978042594.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 23,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 23 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1198,
                      "line": 44,
                      "column": 65
                    },
                    "end": {
                      "offset": 1719,
                      "line": 65,
                      "column": 4
                    },
                    "text": "{\n    final user = auth.currentUser;\n\n    final roomDocRef = fireStore.chatRoomConverterRef(roomID);\n\n    final result = await roomDocRef.get();\n\n    if (!result.exists) {\n      logger.e('Not exist!');\n      throw Exception();\n    }\n\n    final roomInfo = result.data();\n\n    await roomDocRef.update({\n      'participants': FieldValue.arrayUnion(<String>[user!.uid])\n    });\n\n    final participants = roomInfo!.participants..add(user.uid);\n\n    return roomInfo.copyWith(participants: participants, nickName: nickName);\n  }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1368,
                      "line": 51,
                      "column": 25
                    },
                    "end": {
                      "offset": 1430,
                      "line": 54,
                      "column": 6
                    },
                    "text": "{\n      logger.e('Not exist!');\n      throw Exception();\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 13,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 13 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1200,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1200,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1236,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1236,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1300,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1300,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1344,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1344,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1370,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 1370,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1400,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 1400,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1425,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 1425,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1432,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 1432,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1469,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 1469,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1499,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 1499,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1564,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 1564,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1573,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 1573,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1638,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 1638,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 59,
              "level": "none",
              "comment": "This method has 59 maintainability index.",
              "context": []
            }
          ]
        },
        "FireStoreChatRoom.chatRoomConverterRef": {
          "codeSpan": {
            "start": {
              "offset": 1776,
              "line": 69,
              "column": 3
            },
            "end": {
              "offset": 2075,
              "line": 73,
              "column": 60
            },
            "text": "DocumentReference<ChatRoomInformation> chatRoomConverterRef(String roomID) =>\n      collection('conference').doc(roomID).withConverter(\n          fromFirestore: (snapshot, _) =>\n              ChatRoomInformation.fromJson(snapshot.data()!),\n          toFirestore: (messages, _) => messages.toJson());"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 91.37651812938249,
              "level": "none",
              "comment": "This method has a halstead volume of 91.37651812938249.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This method has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 5 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1774,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 1774,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1854,
                      "line": 70,
                      "column": 0
                    },
                    "end": {
                      "offset": 1854,
                      "line": 70,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1912,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 1912,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1954,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 1954,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2016,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 2016,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 71,
              "level": "none",
              "comment": "This method has 71 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/repository/user_join_conf_repository.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "UserInfoConfRepository": {
          "codeSpan": {
            "start": {
              "offset": 207,
              "line": 6,
              "column": 1
            },
            "end": {
              "offset": 1750,
              "line": 63,
              "column": 2
            },
            "text": "class UserInfoConfRepository {\n  UserInfoConfRepository()\n      : firestore = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance,\n        dateTime = DateTime.now();\n\n  final FirebaseFirestore firestore;\n  final FirebaseAuth auth;\n  final DateTime dateTime;\n\n  Future<void> createUserConfInfo(\n      {required String agenda,\n      required String roomID,\n      required String hostUiD}) async {\n    final roomDocRef = firestore.collection('conference').doc(roomID);\n    final userID = auth.currentUser!.uid;\n\n    try {\n      await firestore\n          .collection('users')\n          .doc(userID)\n          .collection('conferences')\n          .doc(roomID)\n          .set(\n              UserJoinConf(\n                agenda: agenda,\n                roomUid: roomID,\n                hostUid: hostUiD != userID ? hostUiD : userID,\n                roomRef: roomDocRef,\n                createAt: dateTime,\n              ).toJson(),\n              SetOptions(merge: true));\n    } on Exception catch (e) {\n      logger.e(e);\n      rethrow;\n    }\n  }\n\n  Future<List<UserJoinConf>> getUserConfInfoList() async {\n    final userID = auth.currentUser!.uid;\n\n    return firestore\n        .collection('users')\n        .doc(userID)\n        .collection('conferences')\n        .orderBy('createAt', descending: true)\n        .get()\n        .then((value) {\n      final result = <UserJoinConf>[];\n\n      for (final userInfoConf in value.docs) {\n        result.add(UserJoinConf.fromJson(userInfoConf.data()));\n      }\n\n      return result;\n    });\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor UserInfoConfRepository increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 240,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 385,
                      "line": 10,
                      "column": 35
                    },
                    "text": "UserInfoConfRepository()\n      : firestore = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance,\n        dateTime = DateTime.now();"
                  }
                },
                {
                  "message": "method createUserConfInfo increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 481,
                      "line": 16,
                      "column": 3
                    },
                    "end": {
                      "offset": 1260,
                      "line": 42,
                      "column": 4
                    },
                    "text": "Future<void> createUserConfInfo(\n      {required String agenda,\n      required String roomID,\n      required String hostUiD}) async {\n    final roomDocRef = firestore.collection('conference').doc(roomID);\n    final userID = auth.currentUser!.uid;\n\n    try {\n      await firestore\n          .collection('users')\n          .doc(userID)\n          .collection('conferences')\n          .doc(roomID)\n          .set(\n              UserJoinConf(\n                agenda: agenda,\n                roomUid: roomID,\n                hostUid: hostUiD != userID ? hostUiD : userID,\n                roomRef: roomDocRef,\n                createAt: dateTime,\n              ).toJson(),\n              SetOptions(merge: true));\n    } on Exception catch (e) {\n      logger.e(e);\n      rethrow;\n    }\n  }"
                  }
                },
                {
                  "message": "method getUserConfInfoList increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1264,
                      "line": 44,
                      "column": 3
                    },
                    "end": {
                      "offset": 1748,
                      "line": 62,
                      "column": 4
                    },
                    "text": "Future<List<UserJoinConf>> getUserConfInfoList() async {\n    final userID = auth.currentUser!.uid;\n\n    return firestore\n        .collection('users')\n        .doc(userID)\n        .collection('conferences')\n        .orderBy('createAt', descending: true)\n        .get()\n        .then((value) {\n      final result = <UserJoinConf>[];\n\n      for (final userInfoConf in value.docs) {\n        result.add(UserJoinConf.fromJson(userInfoConf.data()));\n      }\n\n      return result;\n    });\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor UserInfoConfRepository decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 240,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 385,
                      "line": 10,
                      "column": 35
                    },
                    "text": "UserInfoConfRepository()\n      : firestore = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance,\n        dateTime = DateTime.now();"
                  }
                },
                {
                  "message": "functional method createUserConfInfo increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 481,
                      "line": 16,
                      "column": 3
                    },
                    "end": {
                      "offset": 1260,
                      "line": 42,
                      "column": 4
                    },
                    "text": "Future<void> createUserConfInfo(\n      {required String agenda,\n      required String roomID,\n      required String hostUiD}) async {\n    final roomDocRef = firestore.collection('conference').doc(roomID);\n    final userID = auth.currentUser!.uid;\n\n    try {\n      await firestore\n          .collection('users')\n          .doc(userID)\n          .collection('conferences')\n          .doc(roomID)\n          .set(\n              UserJoinConf(\n                agenda: agenda,\n                roomUid: roomID,\n                hostUid: hostUiD != userID ? hostUiD : userID,\n                roomRef: roomDocRef,\n                createAt: dateTime,\n              ).toJson(),\n              SetOptions(merge: true));\n    } on Exception catch (e) {\n      logger.e(e);\n      rethrow;\n    }\n  }"
                  }
                },
                {
                  "message": "functional method getUserConfInfoList increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1264,
                      "line": 44,
                      "column": 3
                    },
                    "end": {
                      "offset": 1748,
                      "line": 62,
                      "column": 4
                    },
                    "text": "Future<List<UserJoinConf>> getUserConfInfoList() async {\n    final userID = auth.currentUser!.uid;\n\n    return firestore\n        .collection('users')\n        .doc(userID)\n        .collection('conferences')\n        .orderBy('createAt', descending: true)\n        .get()\n        .then((value) {\n      final result = <UserJoinConf>[];\n\n      for (final userInfoConf in value.docs) {\n        result.add(UserJoinConf.fromJson(userInfoConf.data()));\n      }\n\n      return result;\n    });\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "UserInfoConfRepository.UserInfoConfRepository": {
          "codeSpan": {
            "start": {
              "offset": 240,
              "line": 7,
              "column": 3
            },
            "end": {
              "offset": 385,
              "line": 10,
              "column": 35
            },
            "text": "UserInfoConfRepository()\n      : firestore = FirebaseFirestore.instance,\n        auth = FirebaseAuth.instance,\n        dateTime = DateTime.now();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "UserInfoConfRepository.createUserConfInfo": {
          "codeSpan": {
            "start": {
              "offset": 481,
              "line": 16,
              "column": 3
            },
            "end": {
              "offset": 1260,
              "line": 42,
              "column": 4
            },
            "text": "Future<void> createUserConfInfo(\n      {required String agenda,\n      required String roomID,\n      required String hostUiD}) async {\n    final roomDocRef = firestore.collection('conference').doc(roomID);\n    final userID = auth.currentUser!.uid;\n\n    try {\n      await firestore\n          .collection('users')\n          .doc(userID)\n          .collection('conferences')\n          .doc(roomID)\n          .set(\n              UserJoinConf(\n                agenda: agenda,\n                roomUid: roomID,\n                hostUid: hostUiD != userID ? hostUiD : userID,\n                roomRef: roomDocRef,\n                createAt: dateTime,\n              ).toJson(),\n              SetOptions(merge: true));\n    } on Exception catch (e) {\n      logger.e(e);\n      rethrow;\n    }\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 3,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 3.",
              "context": [
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1009,
                      "line": 33,
                      "column": 26
                    },
                    "end": {
                      "offset": 1045,
                      "line": 33,
                      "column": 62
                    },
                    "text": "hostUiD != userID ? hostUiD : userID"
                  }
                },
                {
                  "message": "Catch clause increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1192,
                      "line": 38,
                      "column": 7
                    },
                    "end": {
                      "offset": 1256,
                      "line": 41,
                      "column": 6
                    },
                    "text": "on Exception catch (e) {\n      logger.e(e);\n      rethrow;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 225.71696739799185,
              "level": "none",
              "comment": "This method has a halstead volume of 225.71696739799185.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 27,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 27 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 613,
                      "line": 19,
                      "column": 39
                    },
                    "end": {
                      "offset": 1260,
                      "line": 42,
                      "column": 4
                    },
                    "text": "{\n    final roomDocRef = firestore.collection('conference').doc(roomID);\n    final userID = auth.currentUser!.uid;\n\n    try {\n      await firestore\n          .collection('users')\n          .doc(userID)\n          .collection('conferences')\n          .doc(roomID)\n          .set(\n              UserJoinConf(\n                agenda: agenda,\n                roomUid: roomID,\n                hostUid: hostUiD != userID ? hostUiD : userID,\n                roomRef: roomDocRef,\n                createAt: dateTime,\n              ).toJson(),\n              SetOptions(merge: true));\n    } on Exception catch (e) {\n      logger.e(e);\n      rethrow;\n    }\n  }"
                  }
                },
                {
                  "message": "Try statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 737,
                      "line": 23,
                      "column": 9
                    },
                    "end": {
                      "offset": 1191,
                      "line": 38,
                      "column": 6
                    },
                    "text": "{\n      await firestore\n          .collection('users')\n          .doc(userID)\n          .collection('conferences')\n          .doc(roomID)\n          .set(\n              UserJoinConf(\n                agenda: agenda,\n                roomUid: roomID,\n                hostUid: hostUiD != userID ? hostUiD : userID,\n                roomRef: roomDocRef,\n                createAt: dateTime,\n              ).toJson(),\n              SetOptions(merge: true));\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 3,
              "level": "none",
              "comment": "This method has 3 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 21,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 21 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 615,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 615,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 686,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 686,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 729,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 729,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 739,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 739,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 761,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 761,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 792,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 792,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 815,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 815,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 852,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 852,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 875,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 875,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 891,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 891,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 919,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 919,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 951,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 951,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 984,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 984,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1047,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1047,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1084,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1084,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1120,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1120,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1146,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1146,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1186,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1186,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1217,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1217,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1236,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1236,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1251,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1251,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 55,
              "level": "none",
              "comment": "This method has 55 maintainability index.",
              "context": []
            }
          ]
        },
        "UserInfoConfRepository.getUserConfInfoList": {
          "codeSpan": {
            "start": {
              "offset": 1264,
              "line": 44,
              "column": 3
            },
            "end": {
              "offset": 1748,
              "line": 62,
              "column": 4
            },
            "text": "Future<List<UserJoinConf>> getUserConfInfoList() async {\n    final userID = auth.currentUser!.uid;\n\n    return firestore\n        .collection('users')\n        .doc(userID)\n        .collection('conferences')\n        .orderBy('createAt', descending: true)\n        .get()\n        .then((value) {\n      final result = <UserJoinConf>[];\n\n      for (final userInfoConf in value.docs) {\n        result.add(UserJoinConf.fromJson(userInfoConf.data()));\n      }\n\n      return result;\n    });\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "For statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1602,
                      "line": 56,
                      "column": 7
                    },
                    "end": {
                      "offset": 1714,
                      "line": 58,
                      "column": 8
                    },
                    "text": "for (final userInfoConf in value.docs) {\n        result.add(UserJoinConf.fromJson(userInfoConf.data()));\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 208.0838499786226,
              "level": "none",
              "comment": "This method has a halstead volume of 208.0838499786226.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 19,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 19 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 3,
              "level": "none",
              "comment": "This method has a nesting level of 3.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1319,
                      "line": 44,
                      "column": 58
                    },
                    "end": {
                      "offset": 1748,
                      "line": 62,
                      "column": 4
                    },
                    "text": "{\n    final userID = auth.currentUser!.uid;\n\n    return firestore\n        .collection('users')\n        .doc(userID)\n        .collection('conferences')\n        .orderBy('createAt', descending: true)\n        .get()\n        .then((value) {\n      final result = <UserJoinConf>[];\n\n      for (final userInfoConf in value.docs) {\n        result.add(UserJoinConf.fromJson(userInfoConf.data()));\n      }\n\n      return result;\n    });\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1554,
                      "line": 53,
                      "column": 23
                    },
                    "end": {
                      "offset": 1742,
                      "line": 61,
                      "column": 6
                    },
                    "text": "{\n      final result = <UserJoinConf>[];\n\n      for (final userInfoConf in value.docs) {\n        result.add(UserJoinConf.fromJson(userInfoConf.data()));\n      }\n\n      return result;\n    }"
                  }
                },
                {
                  "message": "For statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1641,
                      "line": 56,
                      "column": 46
                    },
                    "end": {
                      "offset": 1714,
                      "line": 58,
                      "column": 8
                    },
                    "text": "{\n        result.add(UserJoinConf.fromJson(userInfoConf.data()));\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 14,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 14 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1321,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1321,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1364,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1364,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1385,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1385,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1414,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1414,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1435,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1435,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1470,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1470,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1517,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 1517,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1532,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 1532,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1556,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 1556,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1596,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 1596,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1643,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 1643,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1707,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 1707,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1716,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 1716,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1737,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 1737,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 59,
              "level": "none",
              "comment": "This method has 59 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/repository/user_info_repository.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "UserInfoRepository": {
          "codeSpan": {
            "start": {
              "offset": 227,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 928,
              "line": 34,
              "column": 2
            },
            "text": "class UserInfoRepository {\n  UserInfoRepository()\n      : _auth = FirebaseAuth.instance,\n        _store = FirebaseFirestore.instance;\n\n  final FirebaseAuth _auth;\n  final FirebaseFirestore _store;\n\n  Future<String> fetchNickName() async {\n    final uid = _auth.currentUser!.uid;\n\n    final nickName = await _store.doc('users/$uid').get();\n\n    if (!nickName.exists) {\n      return _auth.currentUser!.displayName!;\n    }\n\n    return nickName.data()!['nickName'] as String;\n  }\n\n  Future<void> updateNickName(String nickName) async {\n    final uid = _auth.currentUser!.uid;\n\n    await _store\n        .doc('users/$uid')\n        .set(<String, String>{'nickName': nickName}, SetOptions(merge: true));\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor UserInfoRepository increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 256,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 360,
                      "line": 10,
                      "column": 45
                    },
                    "text": "UserInfoRepository()\n      : _auth = FirebaseAuth.instance,\n        _store = FirebaseFirestore.instance;"
                  }
                },
                {
                  "message": "method fetchNickName increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 427,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 702,
                      "line": 25,
                      "column": 4
                    },
                    "text": "Future<String> fetchNickName() async {\n    final uid = _auth.currentUser!.uid;\n\n    final nickName = await _store.doc('users/$uid').get();\n\n    if (!nickName.exists) {\n      return _auth.currentUser!.displayName!;\n    }\n\n    return nickName.data()!['nickName'] as String;\n  }"
                  }
                },
                {
                  "message": "method updateNickName increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 706,
                      "line": 27,
                      "column": 3
                    },
                    "end": {
                      "offset": 926,
                      "line": 33,
                      "column": 4
                    },
                    "text": "Future<void> updateNickName(String nickName) async {\n    final uid = _auth.currentUser!.uid;\n\n    await _store\n        .doc('users/$uid')\n        .set(<String, String>{'nickName': nickName}, SetOptions(merge: true));\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor UserInfoRepository decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 256,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 360,
                      "line": 10,
                      "column": 45
                    },
                    "text": "UserInfoRepository()\n      : _auth = FirebaseAuth.instance,\n        _store = FirebaseFirestore.instance;"
                  }
                },
                {
                  "message": "functional method fetchNickName increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 427,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 702,
                      "line": 25,
                      "column": 4
                    },
                    "text": "Future<String> fetchNickName() async {\n    final uid = _auth.currentUser!.uid;\n\n    final nickName = await _store.doc('users/$uid').get();\n\n    if (!nickName.exists) {\n      return _auth.currentUser!.displayName!;\n    }\n\n    return nickName.data()!['nickName'] as String;\n  }"
                  }
                },
                {
                  "message": "functional method updateNickName increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 706,
                      "line": 27,
                      "column": 3
                    },
                    "end": {
                      "offset": 926,
                      "line": 33,
                      "column": 4
                    },
                    "text": "Future<void> updateNickName(String nickName) async {\n    final uid = _auth.currentUser!.uid;\n\n    await _store\n        .doc('users/$uid')\n        .set(<String, String>{'nickName': nickName}, SetOptions(merge: true));\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "UserInfoRepository.UserInfoRepository": {
          "codeSpan": {
            "start": {
              "offset": 256,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 360,
              "line": 10,
              "column": 45
            },
            "text": "UserInfoRepository()\n      : _auth = FirebaseAuth.instance,\n        _store = FirebaseFirestore.instance;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "UserInfoRepository.fetchNickName": {
          "codeSpan": {
            "start": {
              "offset": 427,
              "line": 15,
              "column": 3
            },
            "end": {
              "offset": 702,
              "line": 25,
              "column": 4
            },
            "text": "Future<String> fetchNickName() async {\n    final uid = _auth.currentUser!.uid;\n\n    final nickName = await _store.doc('users/$uid').get();\n\n    if (!nickName.exists) {\n      return _auth.currentUser!.displayName!;\n    }\n\n    return nickName.data()!['nickName'] as String;\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 571,
                      "line": 20,
                      "column": 5
                    },
                    "end": {
                      "offset": 646,
                      "line": 22,
                      "column": 6
                    },
                    "text": "if (!nickName.exists) {\n      return _auth.currentUser!.displayName!;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 101.57915548582149,
              "level": "none",
              "comment": "This method has a halstead volume of 101.57915548582149.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 11,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 11 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 464,
                      "line": 15,
                      "column": 40
                    },
                    "end": {
                      "offset": 702,
                      "line": 25,
                      "column": 4
                    },
                    "text": "{\n    final uid = _auth.currentUser!.uid;\n\n    final nickName = await _store.doc('users/$uid').get();\n\n    if (!nickName.exists) {\n      return _auth.currentUser!.displayName!;\n    }\n\n    return nickName.data()!['nickName'] as String;\n  }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 593,
                      "line": 20,
                      "column": 27
                    },
                    "end": {
                      "offset": 646,
                      "line": 22,
                      "column": 6
                    },
                    "text": "{\n      return _auth.currentUser!.displayName!;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 6 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 466,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 466,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 507,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 507,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 567,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 567,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 595,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 595,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 641,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 641,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 648,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 648,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 69,
              "level": "none",
              "comment": "This method has 69 maintainability index.",
              "context": []
            }
          ]
        },
        "UserInfoRepository.updateNickName": {
          "codeSpan": {
            "start": {
              "offset": 706,
              "line": 27,
              "column": 3
            },
            "end": {
              "offset": 926,
              "line": 33,
              "column": 4
            },
            "text": "Future<void> updateNickName(String nickName) async {\n    final uid = _auth.currentUser!.uid;\n\n    await _store\n        .doc('users/$uid')\n        .set(<String, String>{'nickName': nickName}, SetOptions(merge: true));\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 70.32403072095333,
              "level": "none",
              "comment": "This method has a halstead volume of 70.32403072095333.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 7,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 7 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 757,
                      "line": 27,
                      "column": 54
                    },
                    "end": {
                      "offset": 926,
                      "line": 33,
                      "column": 4
                    },
                    "text": "{\n    final uid = _auth.currentUser!.uid;\n\n    await _store\n        .doc('users/$uid')\n        .set(<String, String>{'nickName': nickName}, SetOptions(merge: true));\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 759,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 759,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 800,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 800,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 817,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 817,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 844,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 844,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 74,
              "level": "none",
              "comment": "This method has 74 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/repository/user_repository.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "UserAuthRepository": {
          "codeSpan": {
            "start": {
              "offset": 206,
              "line": 6,
              "column": 1
            },
            "end": {
              "offset": 1477,
              "line": 53,
              "column": 2
            },
            "text": "class UserAuthRepository {\n  UserAuthRepository() : _auth = FirebaseAuth.instance;\n\n  final FirebaseAuth _auth;\n\n  Future<SignUpStatus> emailSignUp(\n      {required String email, required String password}) async {\n    return _auth\n        .createUserWithEmailAndPassword(\n      email: email,\n      password: password,\n    )\n        .then((_) {\n      _auth.currentUser!\n        ..updateDisplayName(email.split('@').first)\n        ..updatePhotoURL('');\n\n      return SignUpStatus.success;\n    }).catchError((dynamic onError) {\n      if (onError is FirebaseAuthException) {\n        return SignUpStatusExtention.getErrorState(onError);\n      }\n\n      return SignUpStatus.failed;\n    });\n  }\n\n  Future<LoginStatus> emailLogin(\n      {required String email, required String password}) async {\n    return _auth\n        .signInWithEmailAndPassword(email: email, password: password)\n        .then((value) => LoginStatus.success)\n        .catchError((dynamic error) {\n      if (error is FirebaseAuthException) {\n        return LoginStatusExtension.getErrorStatus(error);\n      }\n      return LoginStatus.failed;\n    });\n  }\n\n  UserProfile getProfile() {\n    return UserProfile.fromUser(user: _auth.currentUser);\n  }\n\n  Future<void> logout() async {\n    await _auth.signOut();\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 5,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 5 methods.",
              "context": [
                {
                  "message": "constructor UserAuthRepository increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 235,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 288,
                      "line": 7,
                      "column": 56
                    },
                    "text": "UserAuthRepository() : _auth = FirebaseAuth.instance;"
                  }
                },
                {
                  "message": "method emailSignUp increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 321,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 892,
                      "line": 31,
                      "column": 4
                    },
                    "text": "Future<SignUpStatus> emailSignUp(\n      {required String email, required String password}) async {\n    return _auth\n        .createUserWithEmailAndPassword(\n      email: email,\n      password: password,\n    )\n        .then((_) {\n      _auth.currentUser!\n        ..updateDisplayName(email.split('@').first)\n        ..updatePhotoURL('');\n\n      return SignUpStatus.success;\n    }).catchError((dynamic onError) {\n      if (onError is FirebaseAuthException) {\n        return SignUpStatusExtention.getErrorState(onError);\n      }\n\n      return SignUpStatus.failed;\n    });\n  }"
                  }
                },
                {
                  "message": "method emailLogin increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 896,
                      "line": 33,
                      "column": 3
                    },
                    "end": {
                      "offset": 1319,
                      "line": 44,
                      "column": 4
                    },
                    "text": "Future<LoginStatus> emailLogin(\n      {required String email, required String password}) async {\n    return _auth\n        .signInWithEmailAndPassword(email: email, password: password)\n        .then((value) => LoginStatus.success)\n        .catchError((dynamic error) {\n      if (error is FirebaseAuthException) {\n        return LoginStatusExtension.getErrorStatus(error);\n      }\n      return LoginStatus.failed;\n    });\n  }"
                  }
                },
                {
                  "message": "method getProfile increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1323,
                      "line": 46,
                      "column": 3
                    },
                    "end": {
                      "offset": 1411,
                      "line": 48,
                      "column": 4
                    },
                    "text": "UserProfile getProfile() {\n    return UserProfile.fromUser(user: _auth.currentUser);\n  }"
                  }
                },
                {
                  "message": "method logout increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1415,
                      "line": 50,
                      "column": 3
                    },
                    "end": {
                      "offset": 1475,
                      "line": 52,
                      "column": 4
                    },
                    "text": "Future<void> logout() async {\n    await _auth.signOut();\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.8,
              "level": "none",
              "comment": "This class has a weight of 0.8.",
              "context": [
                {
                  "message": "public constructor UserAuthRepository decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 235,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 288,
                      "line": 7,
                      "column": 56
                    },
                    "text": "UserAuthRepository() : _auth = FirebaseAuth.instance;"
                  }
                },
                {
                  "message": "functional method emailSignUp increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 321,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 892,
                      "line": 31,
                      "column": 4
                    },
                    "text": "Future<SignUpStatus> emailSignUp(\n      {required String email, required String password}) async {\n    return _auth\n        .createUserWithEmailAndPassword(\n      email: email,\n      password: password,\n    )\n        .then((_) {\n      _auth.currentUser!\n        ..updateDisplayName(email.split('@').first)\n        ..updatePhotoURL('');\n\n      return SignUpStatus.success;\n    }).catchError((dynamic onError) {\n      if (onError is FirebaseAuthException) {\n        return SignUpStatusExtention.getErrorState(onError);\n      }\n\n      return SignUpStatus.failed;\n    });\n  }"
                  }
                },
                {
                  "message": "functional method emailLogin increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 896,
                      "line": 33,
                      "column": 3
                    },
                    "end": {
                      "offset": 1319,
                      "line": 44,
                      "column": 4
                    },
                    "text": "Future<LoginStatus> emailLogin(\n      {required String email, required String password}) async {\n    return _auth\n        .signInWithEmailAndPassword(email: email, password: password)\n        .then((value) => LoginStatus.success)\n        .catchError((dynamic error) {\n      if (error is FirebaseAuthException) {\n        return LoginStatusExtension.getErrorStatus(error);\n      }\n      return LoginStatus.failed;\n    });\n  }"
                  }
                },
                {
                  "message": "functional method getProfile increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1323,
                      "line": 46,
                      "column": 3
                    },
                    "end": {
                      "offset": 1411,
                      "line": 48,
                      "column": 4
                    },
                    "text": "UserProfile getProfile() {\n    return UserProfile.fromUser(user: _auth.currentUser);\n  }"
                  }
                },
                {
                  "message": "functional method logout increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1415,
                      "line": 50,
                      "column": 3
                    },
                    "end": {
                      "offset": 1475,
                      "line": 52,
                      "column": 4
                    },
                    "text": "Future<void> logout() async {\n    await _auth.signOut();\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "UserAuthRepository.UserAuthRepository": {
          "codeSpan": {
            "start": {
              "offset": 235,
              "line": 7,
              "column": 3
            },
            "end": {
              "offset": 288,
              "line": 7,
              "column": 56
            },
            "text": "UserAuthRepository() : _auth = FirebaseAuth.instance;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "UserAuthRepository.emailSignUp": {
          "codeSpan": {
            "start": {
              "offset": 321,
              "line": 11,
              "column": 3
            },
            "end": {
              "offset": 892,
              "line": 31,
              "column": 4
            },
            "text": "Future<SignUpStatus> emailSignUp(\n      {required String email, required String password}) async {\n    return _auth\n        .createUserWithEmailAndPassword(\n      email: email,\n      password: password,\n    )\n        .then((_) {\n      _auth.currentUser!\n        ..updateDisplayName(email.split('@').first)\n        ..updatePhotoURL('');\n\n      return SignUpStatus.success;\n    }).catchError((dynamic onError) {\n      if (onError is FirebaseAuthException) {\n        return SignUpStatusExtention.getErrorState(onError);\n      }\n\n      return SignUpStatus.failed;\n    });\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 737,
                      "line": 25,
                      "column": 7
                    },
                    "end": {
                      "offset": 845,
                      "line": 27,
                      "column": 8
                    },
                    "text": "if (onError is FirebaseAuthException) {\n        return SignUpStatusExtention.getErrorState(onError);\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 218.51214931322758,
              "level": "none",
              "comment": "This method has a halstead volume of 218.51214931322758.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 21,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 21 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 3,
              "level": "none",
              "comment": "This method has a nesting level of 3.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 418,
                      "line": 12,
                      "column": 64
                    },
                    "end": {
                      "offset": 892,
                      "line": 31,
                      "column": 4
                    },
                    "text": "{\n    return _auth\n        .createUserWithEmailAndPassword(\n      email: email,\n      password: password,\n    )\n        .then((_) {\n      _auth.currentUser!\n        ..updateDisplayName(email.split('@').first)\n        ..updatePhotoURL('');\n\n      return SignUpStatus.success;\n    }).catchError((dynamic onError) {\n      if (onError is FirebaseAuthException) {\n        return SignUpStatusExtention.getErrorState(onError);\n      }\n\n      return SignUpStatus.failed;\n    });\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 729,
                      "line": 24,
                      "column": 37
                    },
                    "end": {
                      "offset": 886,
                      "line": 30,
                      "column": 6
                    },
                    "text": "{\n      if (onError is FirebaseAuthException) {\n        return SignUpStatusExtention.getErrorState(onError);\n      }\n\n      return SignUpStatus.failed;\n    }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 775,
                      "line": 25,
                      "column": 45
                    },
                    "end": {
                      "offset": 845,
                      "line": 27,
                      "column": 8
                    },
                    "text": "{\n        return SignUpStatusExtention.getErrorState(onError);\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 16,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 16 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 420,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 420,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 437,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 437,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 478,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 478,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 498,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 498,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 524,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 524,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 530,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 530,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 550,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 550,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 575,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 575,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 627,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 627,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 658,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 658,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 693,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 693,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 731,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 731,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 777,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 777,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 838,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 838,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 847,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 847,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 881,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 881,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 58,
              "level": "none",
              "comment": "This method has 58 maintainability index.",
              "context": []
            }
          ]
        },
        "UserAuthRepository.emailLogin": {
          "codeSpan": {
            "start": {
              "offset": 896,
              "line": 33,
              "column": 3
            },
            "end": {
              "offset": 1319,
              "line": 44,
              "column": 4
            },
            "text": "Future<LoginStatus> emailLogin(\n      {required String email, required String password}) async {\n    return _auth\n        .signInWithEmailAndPassword(email: email, password: password)\n        .then((value) => LoginStatus.success)\n        .catchError((dynamic error) {\n      if (error is FirebaseAuthException) {\n        return LoginStatusExtension.getErrorStatus(error);\n      }\n      return LoginStatus.failed;\n    });\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1170,
                      "line": 39,
                      "column": 7
                    },
                    "end": {
                      "offset": 1274,
                      "line": 41,
                      "column": 8
                    },
                    "text": "if (error is FirebaseAuthException) {\n        return LoginStatusExtension.getErrorStatus(error);\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 113.29982727264704,
              "level": "none",
              "comment": "This method has a halstead volume of 113.29982727264704.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 12 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 3,
              "level": "none",
              "comment": "This method has a nesting level of 3.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 991,
                      "line": 34,
                      "column": 64
                    },
                    "end": {
                      "offset": 1319,
                      "line": 44,
                      "column": 4
                    },
                    "text": "{\n    return _auth\n        .signInWithEmailAndPassword(email: email, password: password)\n        .then((value) => LoginStatus.success)\n        .catchError((dynamic error) {\n      if (error is FirebaseAuthException) {\n        return LoginStatusExtension.getErrorStatus(error);\n      }\n      return LoginStatus.failed;\n    });\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1162,
                      "line": 38,
                      "column": 37
                    },
                    "end": {
                      "offset": 1313,
                      "line": 43,
                      "column": 6
                    },
                    "text": "{\n      if (error is FirebaseAuthException) {\n        return LoginStatusExtension.getErrorStatus(error);\n      }\n      return LoginStatus.failed;\n    }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1206,
                      "line": 39,
                      "column": 43
                    },
                    "end": {
                      "offset": 1274,
                      "line": 41,
                      "column": 8
                    },
                    "text": "{\n        return LoginStatusExtension.getErrorStatus(error);\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 9 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 993,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 993,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1010,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1010,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1080,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1080,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1126,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1126,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1164,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1164,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1208,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1208,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1267,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1267,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1275,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1275,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1308,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1308,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 65,
              "level": "none",
              "comment": "This method has 65 maintainability index.",
              "context": []
            }
          ]
        },
        "UserAuthRepository.getProfile": {
          "codeSpan": {
            "start": {
              "offset": 1323,
              "line": 46,
              "column": 3
            },
            "end": {
              "offset": 1411,
              "line": 48,
              "column": 4
            },
            "text": "UserProfile getProfile() {\n    return UserProfile.fromUser(user: _auth.currentUser);\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 11.60964047443681,
              "level": "none",
              "comment": "This method has a halstead volume of 11.60964047443681.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1348,
                      "line": 46,
                      "column": 28
                    },
                    "end": {
                      "offset": 1411,
                      "line": 48,
                      "column": 4
                    },
                    "text": "{\n    return UserProfile.fromUser(user: _auth.currentUser);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This method has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1350,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1350,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 93,
              "level": "none",
              "comment": "This method has 93 maintainability index.",
              "context": []
            }
          ]
        },
        "UserAuthRepository.logout": {
          "codeSpan": {
            "start": {
              "offset": 1415,
              "line": 50,
              "column": 3
            },
            "end": {
              "offset": 1475,
              "line": 52,
              "column": 4
            },
            "text": "Future<void> logout() async {\n    await _auth.signOut();\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 4.754887502163469,
              "level": "none",
              "comment": "This method has a halstead volume of 4.754887502163469.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1443,
                      "line": 50,
                      "column": 31
                    },
                    "end": {
                      "offset": 1475,
                      "line": 52,
                      "column": 4
                    },
                    "text": "{\n    await _auth.signOut();\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This method has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1445,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1445,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 96,
              "level": "none",
              "comment": "This method has 96 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/chat_room.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ChatRoom": {
          "codeSpan": {
            "start": {
              "offset": 816,
              "line": 19,
              "column": 1
            },
            "end": {
              "offset": 8617,
              "line": 242,
              "column": 2
            },
            "text": "class ChatRoom extends HookConsumerWidget {\n  ChatRoom(this._chatRoomInformation, {Key? key}) : super(key: key);\n\n  final ChatRoomInformation _chatRoomInformation;\n\n  static const routeName = '/chat';\n\n  final _inputTextKey = GlobalKey<FormFieldState<String>>();\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final roomConfig = ref.read(chatRoomFamilyProvider(_chatRoomInformation));\n\n    final fireStoreRef = roomConfig.chatDocRef!.withConverter<ChatMessageModel>(\n        fromFirestore: (snapshot, _) =>\n            ChatMessageModel.fromJson(snapshot.data()!),\n        toFirestore: (messages, _) => messages.toJson());\n\n    return BaseScaffold(\n        title: roomConfig.chatModel.agenda,\n        leadingWidget: Container(),\n        enableBack: false,\n        actionWidget: [\n          PopupMenuButton<VoidCallback>(\n              icon: const Icon(Icons.settings),\n              onSelected: (event) => event.call(),\n              itemBuilder: (context) {\n                return [\n                  PopupMenuItem(\n                      value: () {\n                        Navigator.of(context).pushNamed(\n                            EvaluateTinderPage.routeName,\n                            arguments: roomConfig);\n                      },\n                      child: const Text('意見を評価する')),\n                  PopupMenuItem(\n                    value: Navigator.of(context).pop,\n                    child: const Text('会議を終了する'),\n                  )\n                ];\n              }),\n        ],\n        child: StreamBuilder<QuerySnapshot<ChatMessageModel>>(\n          stream: fireStoreRef.snapshots(),\n          builder: (context, snapshot) {\n            // TODO(me): エラー時の表示を考える\n            if (snapshot.hasError) {\n              return Container();\n            }\n\n            switch (snapshot.connectionState) {\n              case ConnectionState.none:\n                return Container();\n              case ConnectionState.waiting:\n                return const Center(\n                  child: CircularProgressIndicator(),\n                );\n              case ConnectionState.active:\n              case ConnectionState.done:\n                break;\n            }\n\n            final messages = snapshot.data!.docs;\n\n            WidgetsBinding.instance!.addPostFrameCallback((_) {\n              if (roomConfig.user?.uid == roomConfig.chatModel.hostUid &&\n                  messages.isEmpty) {\n                showDialog<void>(\n                  context: context,\n                  builder: (BuildContext context) => _roomIdDialog(roomConfig),\n                );\n              }\n            });\n\n            return buildView(messages, roomConfig, context, ref);\n          },\n        ));\n  }\n\n  CupertinoAlertDialog _roomIdDialog(ChatRoomState roomConfig) {\n    return CupertinoAlertDialog(\n      content: Material(\n        color: Colors.transparent,\n        child: SizedBox(\n          height: 300,\n          width: 500,\n          child: Column(\n            children: [\n              QrImageView(\n                data: roomConfig.chatModel.roomUid ?? '',\n              ),\n              Row(\n                children: [\n                  Flexible(\n                    child: SelectableText(\n                      roomConfig.chatModel.roomUid ?? '',\n                      maxLines: 2,\n                    ),\n                  ),\n                  IconButton(\n                    onPressed: () {\n                      Share.share(roomConfig.chatModel.roomUid ?? '');\n                    },\n                    icon: const Icon(Icons.share),\n                    iconSize: 16,\n                  ),\n                  IconButton(\n                    onPressed: () {\n                      Clipboard.setData(\n                          ClipboardData(text: roomConfig.chatModel.roomUid));\n                    },\n                    icon: const Icon(Icons.copy),\n                    iconSize: 16,\n                  )\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n      actions: [\n        CupertinoDialogAction(\n          onPressed: () => navigatorKey.currentState!.pop(),\n          child: const Text('OK'),\n        ),\n      ],\n    );\n  }\n\n  Widget buildView(\n    List<QueryDocumentSnapshot<ChatMessageModel>> messages,\n    ChatRoomState roomConfig,\n    BuildContext context,\n    WidgetRef ref,\n  ) {\n    messages.sort((a, b) => b.data().createAt!.compareTo(a.data().createAt!));\n\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.end,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Expanded(\n          child: ListView.builder(\n              reverse: true,\n              keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,\n              itemCount: messages.length,\n              itemBuilder: (context, index) {\n                final selfMessage =\n                    messages[index].data().uid == (roomConfig.user!.uid);\n\n                return Padding(\n                  padding: const EdgeInsets.only(\n                      right: horizontalPadding,\n                      left: horizontalPadding,\n                      bottom: widgetBetweenSpace),\n                  child: Align(\n                    alignment: selfMessage\n                        ? Alignment.centerRight\n                        : Alignment.centerLeft,\n                    child: Card(\n                      elevation: 2,\n                      color: selfMessage\n                          ? Theme.of(context).secondaryHeaderColor\n                          : Theme.of(context).selectedRowColor,\n                      child: Padding(\n                        padding: const EdgeInsets.symmetric(\n                            vertical: widgetBetweenSpace,\n                            horizontal: horizontalPadding),\n                        child: Text(\n                          messages[index].data().message,\n                          style: Theme.of(context).textTheme.subtitle1,\n                        ),\n                      ),\n                    ),\n                  ),\n                );\n              }),\n        ),\n        DecoratedBox(\n          decoration: BoxDecoration(\n              color: Theme.of(context).textSelectionTheme.selectionColor),\n          child: Padding(\n            padding: const EdgeInsets.symmetric(horizontal: horizontalPadding),\n            child: Row(\n              children: [\n                Expanded(\n                  child: TextFormField(\n                    key: _inputTextKey,\n                    keyboardType: TextInputType.multiline,\n                    maxLength: 140,\n                    minLines: 1,\n                    maxLines: 2,\n                    autovalidateMode: AutovalidateMode.onUserInteraction,\n                    validator: ideaFormValidation,\n                    decoration: const InputDecoration(\n                        hintText: 'アイデアを入力しましょう。',\n                        enabledBorder: InputBorder.none,\n                        focusedBorder: InputBorder.none),\n                  ),\n                ),\n                TextButton(\n                  onPressed: () {\n                    if (_inputTextKey.currentState!.value!.isNotEmpty &&\n                        _inputTextKey.currentState!.isValid) {\n                      ref\n                          .read(chatRoomFamilyProvider(_chatRoomInformation)\n                              .notifier)\n                          .sendMessage(_inputTextKey.currentState!.value!);\n                      _inputTextKey.currentState!.reset();\n                    }\n                  },\n                  child: Icon(\n                    Icons.send,\n                    color: Theme.of(context).primaryColor,\n                  ),\n                )\n              ],\n            ),\n          ),\n        )\n      ],\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 4,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 4 methods.",
              "context": [
                {
                  "message": "constructor ChatRoom increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 862,
                      "line": 20,
                      "column": 3
                    },
                    "end": {
                      "offset": 928,
                      "line": 20,
                      "column": 69
                    },
                    "text": "ChatRoom(this._chatRoomInformation, {Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1094,
                      "line": 29,
                      "column": 3
                    },
                    "end": {
                      "offset": 3535,
                      "line": 96,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final roomConfig = ref.read(chatRoomFamilyProvider(_chatRoomInformation));\n\n    final fireStoreRef = roomConfig.chatDocRef!.withConverter<ChatMessageModel>(\n        fromFirestore: (snapshot, _) =>\n            ChatMessageModel.fromJson(snapshot.data()!),\n        toFirestore: (messages, _) => messages.toJson());\n\n    return BaseScaffold(\n        title: roomConfig.chatModel.agenda,\n        leadingWidget: Container(),\n        enableBack: false,\n        actionWidget: [\n          PopupMenuButton<VoidCallback>(\n              icon: const Icon(Icons.settings),\n              onSelected: (event) => event.call(),\n              itemBuilder: (context) {\n                return [\n                  PopupMenuItem(\n                      value: () {\n                        Navigator.of(context).pushNamed(\n                            EvaluateTinderPage.routeName,\n                            arguments: roomConfig);\n                      },\n                      child: const Text('意見を評価する')),\n                  PopupMenuItem(\n                    value: Navigator.of(context).pop,\n                    child: const Text('会議を終了する'),\n                  )\n                ];\n              }),\n        ],\n        child: StreamBuilder<QuerySnapshot<ChatMessageModel>>(\n          stream: fireStoreRef.snapshots(),\n          builder: (context, snapshot) {\n            // TODO(me): エラー時の表示を考える\n            if (snapshot.hasError) {\n              return Container();\n            }\n\n            switch (snapshot.connectionState) {\n              case ConnectionState.none:\n                return Container();\n              case ConnectionState.waiting:\n                return const Center(\n                  child: CircularProgressIndicator(),\n                );\n              case ConnectionState.active:\n              case ConnectionState.done:\n                break;\n            }\n\n            final messages = snapshot.data!.docs;\n\n            WidgetsBinding.instance!.addPostFrameCallback((_) {\n              if (roomConfig.user?.uid == roomConfig.chatModel.hostUid &&\n                  messages.isEmpty) {\n                showDialog<void>(\n                  context: context,\n                  builder: (BuildContext context) => _roomIdDialog(roomConfig),\n                );\n              }\n            });\n\n            return buildView(messages, roomConfig, context, ref);\n          },\n        ));\n  }"
                  }
                },
                {
                  "message": "method _roomIdDialog increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 3539,
                      "line": 98,
                      "column": 3
                    },
                    "end": {
                      "offset": 5007,
                      "line": 146,
                      "column": 4
                    },
                    "text": "CupertinoAlertDialog _roomIdDialog(ChatRoomState roomConfig) {\n    return CupertinoAlertDialog(\n      content: Material(\n        color: Colors.transparent,\n        child: SizedBox(\n          height: 300,\n          width: 500,\n          child: Column(\n            children: [\n              QrImageView(\n                data: roomConfig.chatModel.roomUid ?? '',\n              ),\n              Row(\n                children: [\n                  Flexible(\n                    child: SelectableText(\n                      roomConfig.chatModel.roomUid ?? '',\n                      maxLines: 2,\n                    ),\n                  ),\n                  IconButton(\n                    onPressed: () {\n                      Share.share(roomConfig.chatModel.roomUid ?? '');\n                    },\n                    icon: const Icon(Icons.share),\n                    iconSize: 16,\n                  ),\n                  IconButton(\n                    onPressed: () {\n                      Clipboard.setData(\n                          ClipboardData(text: roomConfig.chatModel.roomUid));\n                    },\n                    icon: const Icon(Icons.copy),\n                    iconSize: 16,\n                  )\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n      actions: [\n        CupertinoDialogAction(\n          onPressed: () => navigatorKey.currentState!.pop(),\n          child: const Text('OK'),\n        ),\n      ],\n    );\n  }"
                  }
                },
                {
                  "message": "method buildView increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 5011,
                      "line": 148,
                      "column": 3
                    },
                    "end": {
                      "offset": 8615,
                      "line": 241,
                      "column": 4
                    },
                    "text": "Widget buildView(\n    List<QueryDocumentSnapshot<ChatMessageModel>> messages,\n    ChatRoomState roomConfig,\n    BuildContext context,\n    WidgetRef ref,\n  ) {\n    messages.sort((a, b) => b.data().createAt!.compareTo(a.data().createAt!));\n\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.end,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Expanded(\n          child: ListView.builder(\n              reverse: true,\n              keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,\n              itemCount: messages.length,\n              itemBuilder: (context, index) {\n                final selfMessage =\n                    messages[index].data().uid == (roomConfig.user!.uid);\n\n                return Padding(\n                  padding: const EdgeInsets.only(\n                      right: horizontalPadding,\n                      left: horizontalPadding,\n                      bottom: widgetBetweenSpace),\n                  child: Align(\n                    alignment: selfMessage\n                        ? Alignment.centerRight\n                        : Alignment.centerLeft,\n                    child: Card(\n                      elevation: 2,\n                      color: selfMessage\n                          ? Theme.of(context).secondaryHeaderColor\n                          : Theme.of(context).selectedRowColor,\n                      child: Padding(\n                        padding: const EdgeInsets.symmetric(\n                            vertical: widgetBetweenSpace,\n                            horizontal: horizontalPadding),\n                        child: Text(\n                          messages[index].data().message,\n                          style: Theme.of(context).textTheme.subtitle1,\n                        ),\n                      ),\n                    ),\n                  ),\n                );\n              }),\n        ),\n        DecoratedBox(\n          decoration: BoxDecoration(\n              color: Theme.of(context).textSelectionTheme.selectionColor),\n          child: Padding(\n            padding: const EdgeInsets.symmetric(horizontal: horizontalPadding),\n            child: Row(\n              children: [\n                Expanded(\n                  child: TextFormField(\n                    key: _inputTextKey,\n                    keyboardType: TextInputType.multiline,\n                    maxLength: 140,\n                    minLines: 1,\n                    maxLines: 2,\n                    autovalidateMode: AutovalidateMode.onUserInteraction,\n                    validator: ideaFormValidation,\n                    decoration: const InputDecoration(\n                        hintText: 'アイデアを入力しましょう。',\n                        enabledBorder: InputBorder.none,\n                        focusedBorder: InputBorder.none),\n                  ),\n                ),\n                TextButton(\n                  onPressed: () {\n                    if (_inputTextKey.currentState!.value!.isNotEmpty &&\n                        _inputTextKey.currentState!.isValid) {\n                      ref\n                          .read(chatRoomFamilyProvider(_chatRoomInformation)\n                              .notifier)\n                          .sendMessage(_inputTextKey.currentState!.value!);\n                      _inputTextKey.currentState!.reset();\n                    }\n                  },\n                  child: Icon(\n                    Icons.send,\n                    color: Theme.of(context).primaryColor,\n                  ),\n                )\n              ],\n            ),\n          ),\n        )\n      ],\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor ChatRoom decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 862,
                      "line": 20,
                      "column": 3
                    },
                    "end": {
                      "offset": 928,
                      "line": 20,
                      "column": 69
                    },
                    "text": "ChatRoom(this._chatRoomInformation, {Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1094,
                      "line": 29,
                      "column": 3
                    },
                    "end": {
                      "offset": 3535,
                      "line": 96,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final roomConfig = ref.read(chatRoomFamilyProvider(_chatRoomInformation));\n\n    final fireStoreRef = roomConfig.chatDocRef!.withConverter<ChatMessageModel>(\n        fromFirestore: (snapshot, _) =>\n            ChatMessageModel.fromJson(snapshot.data()!),\n        toFirestore: (messages, _) => messages.toJson());\n\n    return BaseScaffold(\n        title: roomConfig.chatModel.agenda,\n        leadingWidget: Container(),\n        enableBack: false,\n        actionWidget: [\n          PopupMenuButton<VoidCallback>(\n              icon: const Icon(Icons.settings),\n              onSelected: (event) => event.call(),\n              itemBuilder: (context) {\n                return [\n                  PopupMenuItem(\n                      value: () {\n                        Navigator.of(context).pushNamed(\n                            EvaluateTinderPage.routeName,\n                            arguments: roomConfig);\n                      },\n                      child: const Text('意見を評価する')),\n                  PopupMenuItem(\n                    value: Navigator.of(context).pop,\n                    child: const Text('会議を終了する'),\n                  )\n                ];\n              }),\n        ],\n        child: StreamBuilder<QuerySnapshot<ChatMessageModel>>(\n          stream: fireStoreRef.snapshots(),\n          builder: (context, snapshot) {\n            // TODO(me): エラー時の表示を考える\n            if (snapshot.hasError) {\n              return Container();\n            }\n\n            switch (snapshot.connectionState) {\n              case ConnectionState.none:\n                return Container();\n              case ConnectionState.waiting:\n                return const Center(\n                  child: CircularProgressIndicator(),\n                );\n              case ConnectionState.active:\n              case ConnectionState.done:\n                break;\n            }\n\n            final messages = snapshot.data!.docs;\n\n            WidgetsBinding.instance!.addPostFrameCallback((_) {\n              if (roomConfig.user?.uid == roomConfig.chatModel.hostUid &&\n                  messages.isEmpty) {\n                showDialog<void>(\n                  context: context,\n                  builder: (BuildContext context) => _roomIdDialog(roomConfig),\n                );\n              }\n            });\n\n            return buildView(messages, roomConfig, context, ref);\n          },\n        ));\n  }"
                  }
                },
                {
                  "message": "functional method buildView increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 5011,
                      "line": 148,
                      "column": 3
                    },
                    "end": {
                      "offset": 8615,
                      "line": 241,
                      "column": 4
                    },
                    "text": "Widget buildView(\n    List<QueryDocumentSnapshot<ChatMessageModel>> messages,\n    ChatRoomState roomConfig,\n    BuildContext context,\n    WidgetRef ref,\n  ) {\n    messages.sort((a, b) => b.data().createAt!.compareTo(a.data().createAt!));\n\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.end,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Expanded(\n          child: ListView.builder(\n              reverse: true,\n              keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,\n              itemCount: messages.length,\n              itemBuilder: (context, index) {\n                final selfMessage =\n                    messages[index].data().uid == (roomConfig.user!.uid);\n\n                return Padding(\n                  padding: const EdgeInsets.only(\n                      right: horizontalPadding,\n                      left: horizontalPadding,\n                      bottom: widgetBetweenSpace),\n                  child: Align(\n                    alignment: selfMessage\n                        ? Alignment.centerRight\n                        : Alignment.centerLeft,\n                    child: Card(\n                      elevation: 2,\n                      color: selfMessage\n                          ? Theme.of(context).secondaryHeaderColor\n                          : Theme.of(context).selectedRowColor,\n                      child: Padding(\n                        padding: const EdgeInsets.symmetric(\n                            vertical: widgetBetweenSpace,\n                            horizontal: horizontalPadding),\n                        child: Text(\n                          messages[index].data().message,\n                          style: Theme.of(context).textTheme.subtitle1,\n                        ),\n                      ),\n                    ),\n                  ),\n                );\n              }),\n        ),\n        DecoratedBox(\n          decoration: BoxDecoration(\n              color: Theme.of(context).textSelectionTheme.selectionColor),\n          child: Padding(\n            padding: const EdgeInsets.symmetric(horizontal: horizontalPadding),\n            child: Row(\n              children: [\n                Expanded(\n                  child: TextFormField(\n                    key: _inputTextKey,\n                    keyboardType: TextInputType.multiline,\n                    maxLength: 140,\n                    minLines: 1,\n                    maxLines: 2,\n                    autovalidateMode: AutovalidateMode.onUserInteraction,\n                    validator: ideaFormValidation,\n                    decoration: const InputDecoration(\n                        hintText: 'アイデアを入力しましょう。',\n                        enabledBorder: InputBorder.none,\n                        focusedBorder: InputBorder.none),\n                  ),\n                ),\n                TextButton(\n                  onPressed: () {\n                    if (_inputTextKey.currentState!.value!.isNotEmpty &&\n                        _inputTextKey.currentState!.isValid) {\n                      ref\n                          .read(chatRoomFamilyProvider(_chatRoomInformation)\n                              .notifier)\n                          .sendMessage(_inputTextKey.currentState!.value!);\n                      _inputTextKey.currentState!.reset();\n                    }\n                  },\n                  child: Icon(\n                    Icons.send,\n                    color: Theme.of(context).primaryColor,\n                  ),\n                )\n              ],\n            ),\n          ),\n        )\n      ],\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ChatRoom.ChatRoom": {
          "codeSpan": {
            "start": {
              "offset": 862,
              "line": 20,
              "column": 3
            },
            "end": {
              "offset": 928,
              "line": 20,
              "column": 69
            },
            "text": "ChatRoom(this._chatRoomInformation, {Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatRoom.build": {
          "codeSpan": {
            "start": {
              "offset": 1094,
              "line": 29,
              "column": 3
            },
            "end": {
              "offset": 3535,
              "line": 96,
              "column": 4
            },
            "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final roomConfig = ref.read(chatRoomFamilyProvider(_chatRoomInformation));\n\n    final fireStoreRef = roomConfig.chatDocRef!.withConverter<ChatMessageModel>(\n        fromFirestore: (snapshot, _) =>\n            ChatMessageModel.fromJson(snapshot.data()!),\n        toFirestore: (messages, _) => messages.toJson());\n\n    return BaseScaffold(\n        title: roomConfig.chatModel.agenda,\n        leadingWidget: Container(),\n        enableBack: false,\n        actionWidget: [\n          PopupMenuButton<VoidCallback>(\n              icon: const Icon(Icons.settings),\n              onSelected: (event) => event.call(),\n              itemBuilder: (context) {\n                return [\n                  PopupMenuItem(\n                      value: () {\n                        Navigator.of(context).pushNamed(\n                            EvaluateTinderPage.routeName,\n                            arguments: roomConfig);\n                      },\n                      child: const Text('意見を評価する')),\n                  PopupMenuItem(\n                    value: Navigator.of(context).pop,\n                    child: const Text('会議を終了する'),\n                  )\n                ];\n              }),\n        ],\n        child: StreamBuilder<QuerySnapshot<ChatMessageModel>>(\n          stream: fireStoreRef.snapshots(),\n          builder: (context, snapshot) {\n            // TODO(me): エラー時の表示を考える\n            if (snapshot.hasError) {\n              return Container();\n            }\n\n            switch (snapshot.connectionState) {\n              case ConnectionState.none:\n                return Container();\n              case ConnectionState.waiting:\n                return const Center(\n                  child: CircularProgressIndicator(),\n                );\n              case ConnectionState.active:\n              case ConnectionState.done:\n                break;\n            }\n\n            final messages = snapshot.data!.docs;\n\n            WidgetsBinding.instance!.addPostFrameCallback((_) {\n              if (roomConfig.user?.uid == roomConfig.chatModel.hostUid &&\n                  messages.isEmpty) {\n                showDialog<void>(\n                  context: context,\n                  builder: (BuildContext context) => _roomIdDialog(roomConfig),\n                );\n              }\n            });\n\n            return buildView(messages, roomConfig, context, ref);\n          },\n        ));\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 9,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 9.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2537,
                      "line": 65,
                      "column": 13
                    },
                    "end": {
                      "offset": 2609,
                      "line": 67,
                      "column": 14
                    },
                    "text": "if (snapshot.hasError) {\n              return Container();\n            }"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2673,
                      "line": 70,
                      "column": 15
                    },
                    "end": {
                      "offset": 2735,
                      "line": 71,
                      "column": 36
                    },
                    "text": "case ConnectionState.none:\n                return Container();"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2750,
                      "line": 72,
                      "column": 15
                    },
                    "end": {
                      "offset": 2889,
                      "line": 75,
                      "column": 19
                    },
                    "text": "case ConnectionState.waiting:\n                return const Center(\n                  child: CircularProgressIndicator(),\n                );"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2904,
                      "line": 76,
                      "column": 15
                    },
                    "end": {
                      "offset": 2932,
                      "line": 76,
                      "column": 43
                    },
                    "text": "case ConnectionState.active:"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2947,
                      "line": 77,
                      "column": 15
                    },
                    "end": {
                      "offset": 2996,
                      "line": 78,
                      "column": 23
                    },
                    "text": "case ConnectionState.done:\n                break;"
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3141,
                      "line": 84,
                      "column": 15
                    },
                    "end": {
                      "offset": 3423,
                      "line": 90,
                      "column": 16
                    },
                    "text": "if (roomConfig.user?.uid == roomConfig.chatModel.hostUid &&\n                  messages.isEmpty) {\n                showDialog<void>(\n                  context: context,\n                  builder: (BuildContext context) => _roomIdDialog(roomConfig),\n                );\n              }"
                  }
                },
                {
                  "message": "Operator ?. increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3160,
                      "line": 84,
                      "column": 34
                    },
                    "end": {
                      "offset": 3162,
                      "line": 84,
                      "column": 36
                    },
                    "text": "?."
                  }
                },
                {
                  "message": "Operator && increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3198,
                      "line": 84,
                      "column": 72
                    },
                    "end": {
                      "offset": 3200,
                      "line": 84,
                      "column": 74
                    },
                    "text": "&&"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 1599.4478080065026,
              "level": "none",
              "comment": "This method has a halstead volume of 1599.4478080065026.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 69,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 69 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 4,
              "level": "none",
              "comment": "This method has a nesting level of 4.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1144,
                      "line": 29,
                      "column": 53
                    },
                    "end": {
                      "offset": 3535,
                      "line": 96,
                      "column": 4
                    },
                    "text": "{\n    final roomConfig = ref.read(chatRoomFamilyProvider(_chatRoomInformation));\n\n    final fireStoreRef = roomConfig.chatDocRef!.withConverter<ChatMessageModel>(\n        fromFirestore: (snapshot, _) =>\n            ChatMessageModel.fromJson(snapshot.data()!),\n        toFirestore: (messages, _) => messages.toJson());\n\n    return BaseScaffold(\n        title: roomConfig.chatModel.agenda,\n        leadingWidget: Container(),\n        enableBack: false,\n        actionWidget: [\n          PopupMenuButton<VoidCallback>(\n              icon: const Icon(Icons.settings),\n              onSelected: (event) => event.call(),\n              itemBuilder: (context) {\n                return [\n                  PopupMenuItem(\n                      value: () {\n                        Navigator.of(context).pushNamed(\n                            EvaluateTinderPage.routeName,\n                            arguments: roomConfig);\n                      },\n                      child: const Text('意見を評価する')),\n                  PopupMenuItem(\n                    value: Navigator.of(context).pop,\n                    child: const Text('会議を終了する'),\n                  )\n                ];\n              }),\n        ],\n        child: StreamBuilder<QuerySnapshot<ChatMessageModel>>(\n          stream: fireStoreRef.snapshots(),\n          builder: (context, snapshot) {\n            // TODO(me): エラー時の表示を考える\n            if (snapshot.hasError) {\n              return Container();\n            }\n\n            switch (snapshot.connectionState) {\n              case ConnectionState.none:\n                return Container();\n              case ConnectionState.waiting:\n                return const Center(\n                  child: CircularProgressIndicator(),\n                );\n              case ConnectionState.active:\n              case ConnectionState.done:\n                break;\n            }\n\n            final messages = snapshot.data!.docs;\n\n            WidgetsBinding.instance!.addPostFrameCallback((_) {\n              if (roomConfig.user?.uid == roomConfig.chatModel.hostUid &&\n                  messages.isEmpty) {\n                showDialog<void>(\n                  context: context,\n                  builder: (BuildContext context) => _roomIdDialog(roomConfig),\n                );\n              }\n            });\n\n            return buildView(messages, roomConfig, context, ref);\n          },\n        ));\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2486,
                      "line": 63,
                      "column": 40
                    },
                    "end": {
                      "offset": 3518,
                      "line": 94,
                      "column": 12
                    },
                    "text": "{\n            // TODO(me): エラー時の表示を考える\n            if (snapshot.hasError) {\n              return Container();\n            }\n\n            switch (snapshot.connectionState) {\n              case ConnectionState.none:\n                return Container();\n              case ConnectionState.waiting:\n                return const Center(\n                  child: CircularProgressIndicator(),\n                );\n              case ConnectionState.active:\n              case ConnectionState.done:\n                break;\n            }\n\n            final messages = snapshot.data!.docs;\n\n            WidgetsBinding.instance!.addPostFrameCallback((_) {\n              if (roomConfig.user?.uid == roomConfig.chatModel.hostUid &&\n                  messages.isEmpty) {\n                showDialog<void>(\n                  context: context,\n                  builder: (BuildContext context) => _roomIdDialog(roomConfig),\n                );\n              }\n            });\n\n            return buildView(messages, roomConfig, context, ref);\n          }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 3125,
                      "line": 83,
                      "column": 63
                    },
                    "end": {
                      "offset": 3437,
                      "line": 91,
                      "column": 14
                    },
                    "text": "{\n              if (roomConfig.user?.uid == roomConfig.chatModel.hostUid &&\n                  messages.isEmpty) {\n                showDialog<void>(\n                  context: context,\n                  builder: (BuildContext context) => _roomIdDialog(roomConfig),\n                );\n              }\n            }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 3237,
                      "line": 85,
                      "column": 37
                    },
                    "end": {
                      "offset": 3423,
                      "line": 90,
                      "column": 16
                    },
                    "text": "{\n                showDialog<void>(\n                  context: context,\n                  builder: (BuildContext context) => _roomIdDialog(roomConfig),\n                );\n              }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 59,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 59 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1146,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1146,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1226,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1226,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1307,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1307,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1347,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1347,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1404,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1404,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1463,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1463,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1488,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1488,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1532,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1532,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1568,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1568,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1595,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1595,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1619,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1619,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1660,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1660,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1708,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1708,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1759,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1759,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1798,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1798,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1823,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1823,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1856,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1856,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1890,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1890,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1947,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1947,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2005,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 2005,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2057,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 2057,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2082,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 2082,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2135,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 2135,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2168,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 2168,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2222,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 2222,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2272,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 2272,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2292,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 2292,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2311,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2311,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2329,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 2329,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2340,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2340,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2403,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2403,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2447,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2447,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2525,
                      "line": 65,
                      "column": 0
                    },
                    "end": {
                      "offset": 2525,
                      "line": 65,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2562,
                      "line": 66,
                      "column": 0
                    },
                    "end": {
                      "offset": 2562,
                      "line": 66,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2596,
                      "line": 67,
                      "column": 0
                    },
                    "end": {
                      "offset": 2596,
                      "line": 67,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2611,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 2611,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2659,
                      "line": 70,
                      "column": 0
                    },
                    "end": {
                      "offset": 2659,
                      "line": 70,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2700,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 2700,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2736,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 2736,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2780,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 2780,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2817,
                      "line": 74,
                      "column": 0
                    },
                    "end": {
                      "offset": 2817,
                      "line": 74,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2871,
                      "line": 75,
                      "column": 0
                    },
                    "end": {
                      "offset": 2871,
                      "line": 75,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2890,
                      "line": 76,
                      "column": 0
                    },
                    "end": {
                      "offset": 2890,
                      "line": 76,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2933,
                      "line": 77,
                      "column": 0
                    },
                    "end": {
                      "offset": 2933,
                      "line": 77,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2974,
                      "line": 78,
                      "column": 0
                    },
                    "end": {
                      "offset": 2974,
                      "line": 78,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2997,
                      "line": 79,
                      "column": 0
                    },
                    "end": {
                      "offset": 2997,
                      "line": 79,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3012,
                      "line": 81,
                      "column": 0
                    },
                    "end": {
                      "offset": 3012,
                      "line": 81,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3063,
                      "line": 83,
                      "column": 0
                    },
                    "end": {
                      "offset": 3063,
                      "line": 83,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3127,
                      "line": 84,
                      "column": 0
                    },
                    "end": {
                      "offset": 3127,
                      "line": 84,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3201,
                      "line": 85,
                      "column": 0
                    },
                    "end": {
                      "offset": 3201,
                      "line": 85,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3239,
                      "line": 86,
                      "column": 0
                    },
                    "end": {
                      "offset": 3239,
                      "line": 86,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3273,
                      "line": 87,
                      "column": 0
                    },
                    "end": {
                      "offset": 3273,
                      "line": 87,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3309,
                      "line": 88,
                      "column": 0
                    },
                    "end": {
                      "offset": 3309,
                      "line": 88,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3389,
                      "line": 89,
                      "column": 0
                    },
                    "end": {
                      "offset": 3389,
                      "line": 89,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3408,
                      "line": 90,
                      "column": 0
                    },
                    "end": {
                      "offset": 3408,
                      "line": 90,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3424,
                      "line": 91,
                      "column": 0
                    },
                    "end": {
                      "offset": 3424,
                      "line": 91,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3441,
                      "line": 93,
                      "column": 0
                    },
                    "end": {
                      "offset": 3441,
                      "line": 93,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3507,
                      "line": 94,
                      "column": 0
                    },
                    "end": {
                      "offset": 3507,
                      "line": 94,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3520,
                      "line": 95,
                      "column": 0
                    },
                    "end": {
                      "offset": 3520,
                      "line": 95,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 38,
              "level": "none",
              "comment": "This method has 38 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatRoom._roomIdDialog": {
          "codeSpan": {
            "start": {
              "offset": 3539,
              "line": 98,
              "column": 3
            },
            "end": {
              "offset": 5007,
              "line": 146,
              "column": 4
            },
            "text": "CupertinoAlertDialog _roomIdDialog(ChatRoomState roomConfig) {\n    return CupertinoAlertDialog(\n      content: Material(\n        color: Colors.transparent,\n        child: SizedBox(\n          height: 300,\n          width: 500,\n          child: Column(\n            children: [\n              QrImageView(\n                data: roomConfig.chatModel.roomUid ?? '',\n              ),\n              Row(\n                children: [\n                  Flexible(\n                    child: SelectableText(\n                      roomConfig.chatModel.roomUid ?? '',\n                      maxLines: 2,\n                    ),\n                  ),\n                  IconButton(\n                    onPressed: () {\n                      Share.share(roomConfig.chatModel.roomUid ?? '');\n                    },\n                    icon: const Icon(Icons.share),\n                    iconSize: 16,\n                  ),\n                  IconButton(\n                    onPressed: () {\n                      Clipboard.setData(\n                          ClipboardData(text: roomConfig.chatModel.roomUid));\n                    },\n                    icon: const Icon(Icons.copy),\n                    iconSize: 16,\n                  )\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n      actions: [\n        CupertinoDialogAction(\n          onPressed: () => navigatorKey.currentState!.pop(),\n          child: const Text('OK'),\n        ),\n      ],\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 4,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 4.",
              "context": [
                {
                  "message": "Operator ?? increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3892,
                      "line": 108,
                      "column": 52
                    },
                    "end": {
                      "offset": 3894,
                      "line": 108,
                      "column": 54
                    },
                    "text": "??"
                  }
                },
                {
                  "message": "Operator ?? increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 4085,
                      "line": 114,
                      "column": 52
                    },
                    "end": {
                      "offset": 4087,
                      "line": 114,
                      "column": 54
                    },
                    "text": "??"
                  }
                },
                {
                  "message": "Operator ?? increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 4300,
                      "line": 120,
                      "column": 64
                    },
                    "end": {
                      "offset": 4302,
                      "line": 120,
                      "column": 66
                    },
                    "text": "??"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 442.1700286678584,
              "level": "none",
              "comment": "This method has a halstead volume of 442.1700286678584.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 49,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 49 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 3600,
                      "line": 98,
                      "column": 64
                    },
                    "end": {
                      "offset": 5007,
                      "line": 146,
                      "column": 4
                    },
                    "text": "{\n    return CupertinoAlertDialog(\n      content: Material(\n        color: Colors.transparent,\n        child: SizedBox(\n          height: 300,\n          width: 500,\n          child: Column(\n            children: [\n              QrImageView(\n                data: roomConfig.chatModel.roomUid ?? '',\n              ),\n              Row(\n                children: [\n                  Flexible(\n                    child: SelectableText(\n                      roomConfig.chatModel.roomUid ?? '',\n                      maxLines: 2,\n                    ),\n                  ),\n                  IconButton(\n                    onPressed: () {\n                      Share.share(roomConfig.chatModel.roomUid ?? '');\n                    },\n                    icon: const Icon(Icons.share),\n                    iconSize: 16,\n                  ),\n                  IconButton(\n                    onPressed: () {\n                      Clipboard.setData(\n                          ClipboardData(text: roomConfig.chatModel.roomUid));\n                    },\n                    icon: const Icon(Icons.copy),\n                    iconSize: 16,\n                  )\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n      actions: [\n        CupertinoDialogAction(\n          onPressed: () => navigatorKey.currentState!.pop(),\n          child: const Text('OK'),\n        ),\n      ],\n    );\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 4235,
                      "line": 119,
                      "column": 35
                    },
                    "end": {
                      "offset": 4329,
                      "line": 121,
                      "column": 22
                    },
                    "text": "{\n                      Share.share(roomConfig.chatModel.roomUid ?? '');\n                    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 47,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 47 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3602,
                      "line": 99,
                      "column": 0
                    },
                    "end": {
                      "offset": 3602,
                      "line": 99,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3635,
                      "line": 100,
                      "column": 0
                    },
                    "end": {
                      "offset": 3635,
                      "line": 100,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3660,
                      "line": 101,
                      "column": 0
                    },
                    "end": {
                      "offset": 3660,
                      "line": 101,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3695,
                      "line": 102,
                      "column": 0
                    },
                    "end": {
                      "offset": 3695,
                      "line": 102,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3720,
                      "line": 103,
                      "column": 0
                    },
                    "end": {
                      "offset": 3720,
                      "line": 103,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3743,
                      "line": 104,
                      "column": 0
                    },
                    "end": {
                      "offset": 3743,
                      "line": 104,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3765,
                      "line": 105,
                      "column": 0
                    },
                    "end": {
                      "offset": 3765,
                      "line": 105,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3790,
                      "line": 106,
                      "column": 0
                    },
                    "end": {
                      "offset": 3790,
                      "line": 106,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3814,
                      "line": 107,
                      "column": 0
                    },
                    "end": {
                      "offset": 3814,
                      "line": 107,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3841,
                      "line": 108,
                      "column": 0
                    },
                    "end": {
                      "offset": 3841,
                      "line": 108,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3899,
                      "line": 109,
                      "column": 0
                    },
                    "end": {
                      "offset": 3899,
                      "line": 109,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3916,
                      "line": 110,
                      "column": 0
                    },
                    "end": {
                      "offset": 3916,
                      "line": 110,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3935,
                      "line": 111,
                      "column": 0
                    },
                    "end": {
                      "offset": 3935,
                      "line": 111,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3963,
                      "line": 112,
                      "column": 0
                    },
                    "end": {
                      "offset": 3963,
                      "line": 112,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3991,
                      "line": 113,
                      "column": 0
                    },
                    "end": {
                      "offset": 3991,
                      "line": 113,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4034,
                      "line": 114,
                      "column": 0
                    },
                    "end": {
                      "offset": 4034,
                      "line": 114,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4092,
                      "line": 115,
                      "column": 0
                    },
                    "end": {
                      "offset": 4092,
                      "line": 115,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4127,
                      "line": 116,
                      "column": 0
                    },
                    "end": {
                      "offset": 4127,
                      "line": 116,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4150,
                      "line": 117,
                      "column": 0
                    },
                    "end": {
                      "offset": 4150,
                      "line": 117,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4171,
                      "line": 118,
                      "column": 0
                    },
                    "end": {
                      "offset": 4171,
                      "line": 118,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4201,
                      "line": 119,
                      "column": 0
                    },
                    "end": {
                      "offset": 4201,
                      "line": 119,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4237,
                      "line": 120,
                      "column": 0
                    },
                    "end": {
                      "offset": 4237,
                      "line": 120,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4308,
                      "line": 121,
                      "column": 0
                    },
                    "end": {
                      "offset": 4308,
                      "line": 121,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4331,
                      "line": 122,
                      "column": 0
                    },
                    "end": {
                      "offset": 4331,
                      "line": 122,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4382,
                      "line": 123,
                      "column": 0
                    },
                    "end": {
                      "offset": 4382,
                      "line": 123,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4416,
                      "line": 124,
                      "column": 0
                    },
                    "end": {
                      "offset": 4416,
                      "line": 124,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4437,
                      "line": 125,
                      "column": 0
                    },
                    "end": {
                      "offset": 4437,
                      "line": 125,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4467,
                      "line": 126,
                      "column": 0
                    },
                    "end": {
                      "offset": 4467,
                      "line": 126,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4503,
                      "line": 127,
                      "column": 0
                    },
                    "end": {
                      "offset": 4503,
                      "line": 127,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4544,
                      "line": 128,
                      "column": 0
                    },
                    "end": {
                      "offset": 4544,
                      "line": 128,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4622,
                      "line": 129,
                      "column": 0
                    },
                    "end": {
                      "offset": 4622,
                      "line": 129,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4645,
                      "line": 130,
                      "column": 0
                    },
                    "end": {
                      "offset": 4645,
                      "line": 130,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4695,
                      "line": 131,
                      "column": 0
                    },
                    "end": {
                      "offset": 4695,
                      "line": 131,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4729,
                      "line": 132,
                      "column": 0
                    },
                    "end": {
                      "offset": 4729,
                      "line": 132,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4749,
                      "line": 133,
                      "column": 0
                    },
                    "end": {
                      "offset": 4749,
                      "line": 133,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4768,
                      "line": 134,
                      "column": 0
                    },
                    "end": {
                      "offset": 4768,
                      "line": 134,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4785,
                      "line": 135,
                      "column": 0
                    },
                    "end": {
                      "offset": 4785,
                      "line": 135,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4800,
                      "line": 136,
                      "column": 0
                    },
                    "end": {
                      "offset": 4800,
                      "line": 136,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4813,
                      "line": 137,
                      "column": 0
                    },
                    "end": {
                      "offset": 4813,
                      "line": 137,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4824,
                      "line": 138,
                      "column": 0
                    },
                    "end": {
                      "offset": 4824,
                      "line": 138,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4833,
                      "line": 139,
                      "column": 0
                    },
                    "end": {
                      "offset": 4833,
                      "line": 139,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4850,
                      "line": 140,
                      "column": 0
                    },
                    "end": {
                      "offset": 4850,
                      "line": 140,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4881,
                      "line": 141,
                      "column": 0
                    },
                    "end": {
                      "offset": 4881,
                      "line": 141,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4942,
                      "line": 142,
                      "column": 0
                    },
                    "end": {
                      "offset": 4942,
                      "line": 142,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4977,
                      "line": 143,
                      "column": 0
                    },
                    "end": {
                      "offset": 4977,
                      "line": 143,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4988,
                      "line": 144,
                      "column": 0
                    },
                    "end": {
                      "offset": 4988,
                      "line": 144,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4997,
                      "line": 145,
                      "column": 0
                    },
                    "end": {
                      "offset": 4997,
                      "line": 145,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 45,
              "level": "none",
              "comment": "This method has 45 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatRoom.buildView": {
          "codeSpan": {
            "start": {
              "offset": 5011,
              "line": 148,
              "column": 3
            },
            "end": {
              "offset": 8615,
              "line": 241,
              "column": 4
            },
            "text": "Widget buildView(\n    List<QueryDocumentSnapshot<ChatMessageModel>> messages,\n    ChatRoomState roomConfig,\n    BuildContext context,\n    WidgetRef ref,\n  ) {\n    messages.sort((a, b) => b.data().createAt!.compareTo(a.data().createAt!));\n\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.end,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Expanded(\n          child: ListView.builder(\n              reverse: true,\n              keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,\n              itemCount: messages.length,\n              itemBuilder: (context, index) {\n                final selfMessage =\n                    messages[index].data().uid == (roomConfig.user!.uid);\n\n                return Padding(\n                  padding: const EdgeInsets.only(\n                      right: horizontalPadding,\n                      left: horizontalPadding,\n                      bottom: widgetBetweenSpace),\n                  child: Align(\n                    alignment: selfMessage\n                        ? Alignment.centerRight\n                        : Alignment.centerLeft,\n                    child: Card(\n                      elevation: 2,\n                      color: selfMessage\n                          ? Theme.of(context).secondaryHeaderColor\n                          : Theme.of(context).selectedRowColor,\n                      child: Padding(\n                        padding: const EdgeInsets.symmetric(\n                            vertical: widgetBetweenSpace,\n                            horizontal: horizontalPadding),\n                        child: Text(\n                          messages[index].data().message,\n                          style: Theme.of(context).textTheme.subtitle1,\n                        ),\n                      ),\n                    ),\n                  ),\n                );\n              }),\n        ),\n        DecoratedBox(\n          decoration: BoxDecoration(\n              color: Theme.of(context).textSelectionTheme.selectionColor),\n          child: Padding(\n            padding: const EdgeInsets.symmetric(horizontal: horizontalPadding),\n            child: Row(\n              children: [\n                Expanded(\n                  child: TextFormField(\n                    key: _inputTextKey,\n                    keyboardType: TextInputType.multiline,\n                    maxLength: 140,\n                    minLines: 1,\n                    maxLines: 2,\n                    autovalidateMode: AutovalidateMode.onUserInteraction,\n                    validator: ideaFormValidation,\n                    decoration: const InputDecoration(\n                        hintText: 'アイデアを入力しましょう。',\n                        enabledBorder: InputBorder.none,\n                        focusedBorder: InputBorder.none),\n                  ),\n                ),\n                TextButton(\n                  onPressed: () {\n                    if (_inputTextKey.currentState!.value!.isNotEmpty &&\n                        _inputTextKey.currentState!.isValid) {\n                      ref\n                          .read(chatRoomFamilyProvider(_chatRoomInformation)\n                              .notifier)\n                          .sendMessage(_inputTextKey.currentState!.value!);\n                      _inputTextKey.currentState!.reset();\n                    }\n                  },\n                  child: Icon(\n                    Icons.send,\n                    color: Theme.of(context).primaryColor,\n                  ),\n                )\n              ],\n            ),\n          ),\n        )\n      ],\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 5,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 5.",
              "context": [
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 6040,
                      "line": 175,
                      "column": 32
                    },
                    "end": {
                      "offset": 6146,
                      "line": 177,
                      "column": 47
                    },
                    "text": "selfMessage\n                        ? Alignment.centerRight\n                        : Alignment.centerLeft"
                  }
                },
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 6246,
                      "line": 180,
                      "column": 30
                    },
                    "end": {
                      "offset": 6387,
                      "line": 182,
                      "column": 63
                    },
                    "text": "selfMessage\n                          ? Theme.of(context).secondaryHeaderColor\n                          : Theme.of(context).selectedRowColor"
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 7942,
                      "line": 221,
                      "column": 21
                    },
                    "end": {
                      "offset": 8358,
                      "line": 228,
                      "column": 22
                    },
                    "text": "if (_inputTextKey.currentState!.value!.isNotEmpty &&\n                        _inputTextKey.currentState!.isValid) {\n                      ref\n                          .read(chatRoomFamilyProvider(_chatRoomInformation)\n                              .notifier)\n                          .sendMessage(_inputTextKey.currentState!.value!);\n                      _inputTextKey.currentState!.reset();\n                    }"
                  }
                },
                {
                  "message": "Operator && increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 7992,
                      "line": 221,
                      "column": 71
                    },
                    "end": {
                      "offset": 7994,
                      "line": 221,
                      "column": 73
                    },
                    "text": "&&"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 1901.8597952623163,
              "level": "none",
              "comment": "This method has a halstead volume of 1901.8597952623163.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 94,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 94 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 3,
              "level": "none",
              "comment": "This method has a nesting level of 3.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 5168,
                      "line": 153,
                      "column": 5
                    },
                    "end": {
                      "offset": 8615,
                      "line": 241,
                      "column": 4
                    },
                    "text": "{\n    messages.sort((a, b) => b.data().createAt!.compareTo(a.data().createAt!));\n\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.end,\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Expanded(\n          child: ListView.builder(\n              reverse: true,\n              keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.onDrag,\n              itemCount: messages.length,\n              itemBuilder: (context, index) {\n                final selfMessage =\n                    messages[index].data().uid == (roomConfig.user!.uid);\n\n                return Padding(\n                  padding: const EdgeInsets.only(\n                      right: horizontalPadding,\n                      left: horizontalPadding,\n                      bottom: widgetBetweenSpace),\n                  child: Align(\n                    alignment: selfMessage\n                        ? Alignment.centerRight\n                        : Alignment.centerLeft,\n                    child: Card(\n                      elevation: 2,\n                      color: selfMessage\n                          ? Theme.of(context).secondaryHeaderColor\n                          : Theme.of(context).selectedRowColor,\n                      child: Padding(\n                        padding: const EdgeInsets.symmetric(\n                            vertical: widgetBetweenSpace,\n                            horizontal: horizontalPadding),\n                        child: Text(\n                          messages[index].data().message,\n                          style: Theme.of(context).textTheme.subtitle1,\n                        ),\n                      ),\n                    ),\n                  ),\n                );\n              }),\n        ),\n        DecoratedBox(\n          decoration: BoxDecoration(\n              color: Theme.of(context).textSelectionTheme.selectionColor),\n          child: Padding(\n            padding: const EdgeInsets.symmetric(horizontal: horizontalPadding),\n            child: Row(\n              children: [\n                Expanded(\n                  child: TextFormField(\n                    key: _inputTextKey,\n                    keyboardType: TextInputType.multiline,\n                    maxLength: 140,\n                    minLines: 1,\n                    maxLines: 2,\n                    autovalidateMode: AutovalidateMode.onUserInteraction,\n                    validator: ideaFormValidation,\n                    decoration: const InputDecoration(\n                        hintText: 'アイデアを入力しましょう。',\n                        enabledBorder: InputBorder.none,\n                        focusedBorder: InputBorder.none),\n                  ),\n                ),\n                TextButton(\n                  onPressed: () {\n                    if (_inputTextKey.currentState!.value!.isNotEmpty &&\n                        _inputTextKey.currentState!.isValid) {\n                      ref\n                          .read(chatRoomFamilyProvider(_chatRoomInformation)\n                              .notifier)\n                          .sendMessage(_inputTextKey.currentState!.value!);\n                      _inputTextKey.currentState!.reset();\n                    }\n                  },\n                  child: Icon(\n                    Icons.send,\n                    color: Theme.of(context).primaryColor,\n                  ),\n                )\n              ],\n            ),\n          ),\n        )\n      ],\n    );\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 7920,
                      "line": 220,
                      "column": 33
                    },
                    "end": {
                      "offset": 8378,
                      "line": 229,
                      "column": 20
                    },
                    "text": "{\n                    if (_inputTextKey.currentState!.value!.isNotEmpty &&\n                        _inputTextKey.currentState!.isValid) {\n                      ref\n                          .read(chatRoomFamilyProvider(_chatRoomInformation)\n                              .notifier)\n                          .sendMessage(_inputTextKey.currentState!.value!);\n                      _inputTextKey.currentState!.reset();\n                    }\n                  }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 8056,
                      "line": 222,
                      "column": 62
                    },
                    "end": {
                      "offset": 8358,
                      "line": 228,
                      "column": 22
                    },
                    "text": "{\n                      ref\n                          .read(chatRoomFamilyProvider(_chatRoomInformation)\n                              .notifier)\n                          .sendMessage(_inputTextKey.currentState!.value!);\n                      _inputTextKey.currentState!.reset();\n                    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 4,
              "level": "none",
              "comment": "This method has 4 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 85,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 85 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5170,
                      "line": 154,
                      "column": 0
                    },
                    "end": {
                      "offset": 5170,
                      "line": 154,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5250,
                      "line": 156,
                      "column": 0
                    },
                    "end": {
                      "offset": 5250,
                      "line": 156,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5269,
                      "line": 157,
                      "column": 0
                    },
                    "end": {
                      "offset": 5269,
                      "line": 157,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5317,
                      "line": 158,
                      "column": 0
                    },
                    "end": {
                      "offset": 5317,
                      "line": 158,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5369,
                      "line": 159,
                      "column": 0
                    },
                    "end": {
                      "offset": 5369,
                      "line": 159,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5387,
                      "line": 160,
                      "column": 0
                    },
                    "end": {
                      "offset": 5387,
                      "line": 160,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5405,
                      "line": 161,
                      "column": 0
                    },
                    "end": {
                      "offset": 5405,
                      "line": 161,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5440,
                      "line": 162,
                      "column": 0
                    },
                    "end": {
                      "offset": 5440,
                      "line": 162,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5469,
                      "line": 163,
                      "column": 0
                    },
                    "end": {
                      "offset": 5469,
                      "line": 163,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5550,
                      "line": 164,
                      "column": 0
                    },
                    "end": {
                      "offset": 5550,
                      "line": 164,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5592,
                      "line": 165,
                      "column": 0
                    },
                    "end": {
                      "offset": 5592,
                      "line": 165,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5638,
                      "line": 166,
                      "column": 0
                    },
                    "end": {
                      "offset": 5638,
                      "line": 166,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5674,
                      "line": 167,
                      "column": 0
                    },
                    "end": {
                      "offset": 5674,
                      "line": 167,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5749,
                      "line": 169,
                      "column": 0
                    },
                    "end": {
                      "offset": 5749,
                      "line": 169,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5781,
                      "line": 170,
                      "column": 0
                    },
                    "end": {
                      "offset": 5781,
                      "line": 170,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5831,
                      "line": 171,
                      "column": 0
                    },
                    "end": {
                      "offset": 5831,
                      "line": 171,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5879,
                      "line": 172,
                      "column": 0
                    },
                    "end": {
                      "offset": 5879,
                      "line": 172,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5926,
                      "line": 173,
                      "column": 0
                    },
                    "end": {
                      "offset": 5926,
                      "line": 173,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5977,
                      "line": 174,
                      "column": 0
                    },
                    "end": {
                      "offset": 5977,
                      "line": 174,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6009,
                      "line": 175,
                      "column": 0
                    },
                    "end": {
                      "offset": 6009,
                      "line": 175,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6052,
                      "line": 176,
                      "column": 0
                    },
                    "end": {
                      "offset": 6052,
                      "line": 176,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6100,
                      "line": 177,
                      "column": 0
                    },
                    "end": {
                      "offset": 6100,
                      "line": 177,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6148,
                      "line": 178,
                      "column": 0
                    },
                    "end": {
                      "offset": 6148,
                      "line": 178,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6181,
                      "line": 179,
                      "column": 0
                    },
                    "end": {
                      "offset": 6181,
                      "line": 179,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6217,
                      "line": 180,
                      "column": 0
                    },
                    "end": {
                      "offset": 6217,
                      "line": 180,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6258,
                      "line": 181,
                      "column": 0
                    },
                    "end": {
                      "offset": 6258,
                      "line": 181,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6325,
                      "line": 182,
                      "column": 0
                    },
                    "end": {
                      "offset": 6325,
                      "line": 182,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6389,
                      "line": 183,
                      "column": 0
                    },
                    "end": {
                      "offset": 6389,
                      "line": 183,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6427,
                      "line": 184,
                      "column": 0
                    },
                    "end": {
                      "offset": 6427,
                      "line": 184,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6488,
                      "line": 185,
                      "column": 0
                    },
                    "end": {
                      "offset": 6488,
                      "line": 185,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6546,
                      "line": 186,
                      "column": 0
                    },
                    "end": {
                      "offset": 6546,
                      "line": 186,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6606,
                      "line": 187,
                      "column": 0
                    },
                    "end": {
                      "offset": 6606,
                      "line": 187,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6643,
                      "line": 188,
                      "column": 0
                    },
                    "end": {
                      "offset": 6643,
                      "line": 188,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6701,
                      "line": 189,
                      "column": 0
                    },
                    "end": {
                      "offset": 6701,
                      "line": 189,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6773,
                      "line": 190,
                      "column": 0
                    },
                    "end": {
                      "offset": 6773,
                      "line": 190,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6800,
                      "line": 191,
                      "column": 0
                    },
                    "end": {
                      "offset": 6800,
                      "line": 191,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6825,
                      "line": 192,
                      "column": 0
                    },
                    "end": {
                      "offset": 6825,
                      "line": 192,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6848,
                      "line": 193,
                      "column": 0
                    },
                    "end": {
                      "offset": 6848,
                      "line": 193,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6869,
                      "line": 194,
                      "column": 0
                    },
                    "end": {
                      "offset": 6869,
                      "line": 194,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6888,
                      "line": 195,
                      "column": 0
                    },
                    "end": {
                      "offset": 6888,
                      "line": 195,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6906,
                      "line": 196,
                      "column": 0
                    },
                    "end": {
                      "offset": 6906,
                      "line": 196,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6917,
                      "line": 197,
                      "column": 0
                    },
                    "end": {
                      "offset": 6917,
                      "line": 197,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6939,
                      "line": 198,
                      "column": 0
                    },
                    "end": {
                      "offset": 6939,
                      "line": 198,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6976,
                      "line": 199,
                      "column": 0
                    },
                    "end": {
                      "offset": 6976,
                      "line": 199,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7051,
                      "line": 200,
                      "column": 0
                    },
                    "end": {
                      "offset": 7051,
                      "line": 200,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7077,
                      "line": 201,
                      "column": 0
                    },
                    "end": {
                      "offset": 7077,
                      "line": 201,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7157,
                      "line": 202,
                      "column": 0
                    },
                    "end": {
                      "offset": 7157,
                      "line": 202,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7181,
                      "line": 203,
                      "column": 0
                    },
                    "end": {
                      "offset": 7181,
                      "line": 203,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7207,
                      "line": 204,
                      "column": 0
                    },
                    "end": {
                      "offset": 7207,
                      "line": 204,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7233,
                      "line": 205,
                      "column": 0
                    },
                    "end": {
                      "offset": 7233,
                      "line": 205,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7273,
                      "line": 206,
                      "column": 0
                    },
                    "end": {
                      "offset": 7273,
                      "line": 206,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7313,
                      "line": 207,
                      "column": 0
                    },
                    "end": {
                      "offset": 7313,
                      "line": 207,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7372,
                      "line": 208,
                      "column": 0
                    },
                    "end": {
                      "offset": 7372,
                      "line": 208,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7408,
                      "line": 209,
                      "column": 0
                    },
                    "end": {
                      "offset": 7408,
                      "line": 209,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7441,
                      "line": 210,
                      "column": 0
                    },
                    "end": {
                      "offset": 7441,
                      "line": 210,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7474,
                      "line": 211,
                      "column": 0
                    },
                    "end": {
                      "offset": 7474,
                      "line": 211,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7548,
                      "line": 212,
                      "column": 0
                    },
                    "end": {
                      "offset": 7548,
                      "line": 212,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7599,
                      "line": 213,
                      "column": 0
                    },
                    "end": {
                      "offset": 7599,
                      "line": 213,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7654,
                      "line": 214,
                      "column": 0
                    },
                    "end": {
                      "offset": 7654,
                      "line": 214,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7705,
                      "line": 215,
                      "column": 0
                    },
                    "end": {
                      "offset": 7705,
                      "line": 215,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7762,
                      "line": 216,
                      "column": 0
                    },
                    "end": {
                      "offset": 7762,
                      "line": 216,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7820,
                      "line": 217,
                      "column": 0
                    },
                    "end": {
                      "offset": 7820,
                      "line": 217,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7841,
                      "line": 218,
                      "column": 0
                    },
                    "end": {
                      "offset": 7841,
                      "line": 218,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7860,
                      "line": 219,
                      "column": 0
                    },
                    "end": {
                      "offset": 7860,
                      "line": 219,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7888,
                      "line": 220,
                      "column": 0
                    },
                    "end": {
                      "offset": 7888,
                      "line": 220,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7922,
                      "line": 221,
                      "column": 0
                    },
                    "end": {
                      "offset": 7922,
                      "line": 221,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7995,
                      "line": 222,
                      "column": 0
                    },
                    "end": {
                      "offset": 7995,
                      "line": 222,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8058,
                      "line": 223,
                      "column": 0
                    },
                    "end": {
                      "offset": 8058,
                      "line": 223,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8084,
                      "line": 224,
                      "column": 0
                    },
                    "end": {
                      "offset": 8084,
                      "line": 224,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8161,
                      "line": 225,
                      "column": 0
                    },
                    "end": {
                      "offset": 8161,
                      "line": 225,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8202,
                      "line": 226,
                      "column": 0
                    },
                    "end": {
                      "offset": 8202,
                      "line": 226,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8278,
                      "line": 227,
                      "column": 0
                    },
                    "end": {
                      "offset": 8278,
                      "line": 227,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8337,
                      "line": 228,
                      "column": 0
                    },
                    "end": {
                      "offset": 8337,
                      "line": 228,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8359,
                      "line": 229,
                      "column": 0
                    },
                    "end": {
                      "offset": 8359,
                      "line": 229,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8380,
                      "line": 230,
                      "column": 0
                    },
                    "end": {
                      "offset": 8380,
                      "line": 230,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8411,
                      "line": 231,
                      "column": 0
                    },
                    "end": {
                      "offset": 8411,
                      "line": 231,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8443,
                      "line": 232,
                      "column": 0
                    },
                    "end": {
                      "offset": 8443,
                      "line": 232,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8502,
                      "line": 233,
                      "column": 0
                    },
                    "end": {
                      "offset": 8502,
                      "line": 233,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8523,
                      "line": 234,
                      "column": 0
                    },
                    "end": {
                      "offset": 8523,
                      "line": 234,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8541,
                      "line": 235,
                      "column": 0
                    },
                    "end": {
                      "offset": 8541,
                      "line": 235,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8558,
                      "line": 236,
                      "column": 0
                    },
                    "end": {
                      "offset": 8558,
                      "line": 236,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8573,
                      "line": 237,
                      "column": 0
                    },
                    "end": {
                      "offset": 8573,
                      "line": 237,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8586,
                      "line": 238,
                      "column": 0
                    },
                    "end": {
                      "offset": 8586,
                      "line": 238,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8596,
                      "line": 239,
                      "column": 0
                    },
                    "end": {
                      "offset": 8596,
                      "line": 239,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8605,
                      "line": 240,
                      "column": 0
                    },
                    "end": {
                      "offset": 8605,
                      "line": 240,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 35,
              "level": "none",
              "comment": "This method has 35 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/conf_history_page.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ConferenceHistoryPage": {
          "codeSpan": {
            "start": {
              "offset": 501,
              "line": 11,
              "column": 1
            },
            "end": {
              "offset": 2048,
              "line": 55,
              "column": 2
            },
            "text": "class ConferenceHistoryPage extends HookConsumerWidget {\n  const ConferenceHistoryPage({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final state = ref.watch(confHistoryProvider);\n    return BaseScaffold(\n        title: '会議履歴',\n        child: state.when(\n            data: (value) => _buildView(value, ref),\n            loading: () => const LoadingView(),\n            error: (error, _) => NetworkErrorView(\n                reload: () =>\n                    ref.watch(confHistoryProvider.notifier).initState())));\n  }\n\n  Widget _buildView(List<ConferenceHistoryState> stateList, WidgetRef ref) {\n    if (stateList.isEmpty) {\n      return const Center(\n        child: Text('会議を一度も行っていません。'),\n      );\n    }\n    final conferenceState = ref.watch(conferenceStateProvider.notifier);\n    return Padding(\n      padding: const EdgeInsets.all(16),\n      child: ListView.separated(\n          itemBuilder: (context, index) {\n            final listItem = stateList[index];\n            const format = 'yyyy/MM/dd H:m';\n\n            return ListTile(\n              title: Text(listItem.agenda),\n              subtitle:\n                  Text('作成日：${DateFormat(format).format(listItem.createAt)}'),\n              onTap: () {\n                conferenceState.state = listItem;\n                Navigator.pushNamed(context, '/history_detail');\n              },\n            );\n          },\n          separatorBuilder: (context, _) => const SizedBox(height: 4),\n          itemCount: stateList.length),\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor ConferenceHistoryPage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 560,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 618,
                      "line": 12,
                      "column": 61
                    },
                    "text": "const ConferenceHistoryPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 634,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 1072,
                      "line": 25,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final state = ref.watch(confHistoryProvider);\n    return BaseScaffold(\n        title: '会議履歴',\n        child: state.when(\n            data: (value) => _buildView(value, ref),\n            loading: () => const LoadingView(),\n            error: (error, _) => NetworkErrorView(\n                reload: () =>\n                    ref.watch(confHistoryProvider.notifier).initState())));\n  }"
                  }
                },
                {
                  "message": "method _buildView increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1076,
                      "line": 27,
                      "column": 3
                    },
                    "end": {
                      "offset": 2046,
                      "line": 54,
                      "column": 4
                    },
                    "text": "Widget _buildView(List<ConferenceHistoryState> stateList, WidgetRef ref) {\n    if (stateList.isEmpty) {\n      return const Center(\n        child: Text('会議を一度も行っていません。'),\n      );\n    }\n    final conferenceState = ref.watch(conferenceStateProvider.notifier);\n    return Padding(\n      padding: const EdgeInsets.all(16),\n      child: ListView.separated(\n          itemBuilder: (context, index) {\n            final listItem = stateList[index];\n            const format = 'yyyy/MM/dd H:m';\n\n            return ListTile(\n              title: Text(listItem.agenda),\n              subtitle:\n                  Text('作成日：${DateFormat(format).format(listItem.createAt)}'),\n              onTap: () {\n                conferenceState.state = listItem;\n                Navigator.pushNamed(context, '/history_detail');\n              },\n            );\n          },\n          separatorBuilder: (context, _) => const SizedBox(height: 4),\n          itemCount: stateList.length),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor ConferenceHistoryPage decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 560,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 618,
                      "line": 12,
                      "column": 61
                    },
                    "text": "const ConferenceHistoryPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 634,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 1072,
                      "line": 25,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final state = ref.watch(confHistoryProvider);\n    return BaseScaffold(\n        title: '会議履歴',\n        child: state.when(\n            data: (value) => _buildView(value, ref),\n            loading: () => const LoadingView(),\n            error: (error, _) => NetworkErrorView(\n                reload: () =>\n                    ref.watch(confHistoryProvider.notifier).initState())));\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ConferenceHistoryPage.ConferenceHistoryPage": {
          "codeSpan": {
            "start": {
              "offset": 560,
              "line": 12,
              "column": 3
            },
            "end": {
              "offset": 618,
              "line": 12,
              "column": 61
            },
            "text": "const ConferenceHistoryPage({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ConferenceHistoryPage.build": {
          "codeSpan": {
            "start": {
              "offset": 634,
              "line": 15,
              "column": 3
            },
            "end": {
              "offset": 1072,
              "line": 25,
              "column": 4
            },
            "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final state = ref.watch(confHistoryProvider);\n    return BaseScaffold(\n        title: '会議履歴',\n        child: state.when(\n            data: (value) => _buildView(value, ref),\n            loading: () => const LoadingView(),\n            error: (error, _) => NetworkErrorView(\n                reload: () =>\n                    ref.watch(confHistoryProvider.notifier).initState())));\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 185.8429080801566,
              "level": "none",
              "comment": "This method has a halstead volume of 185.8429080801566.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 12 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 684,
                      "line": 15,
                      "column": 53
                    },
                    "end": {
                      "offset": 1072,
                      "line": 25,
                      "column": 4
                    },
                    "text": "{\n    final state = ref.watch(confHistoryProvider);\n    return BaseScaffold(\n        title: '会議履歴',\n        child: state.when(\n            data: (value) => _buildView(value, ref),\n            loading: () => const LoadingView(),\n            error: (error, _) => NetworkErrorView(\n                reload: () =>\n                    ref.watch(confHistoryProvider.notifier).initState())));\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 9 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 686,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 686,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 736,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 736,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 761,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 761,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 784,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 784,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 811,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 811,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 864,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 864,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 912,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 912,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 963,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 963,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 993,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 993,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 64,
              "level": "none",
              "comment": "This method has 64 maintainability index.",
              "context": []
            }
          ]
        },
        "ConferenceHistoryPage._buildView": {
          "codeSpan": {
            "start": {
              "offset": 1076,
              "line": 27,
              "column": 3
            },
            "end": {
              "offset": 2046,
              "line": 54,
              "column": 4
            },
            "text": "Widget _buildView(List<ConferenceHistoryState> stateList, WidgetRef ref) {\n    if (stateList.isEmpty) {\n      return const Center(\n        child: Text('会議を一度も行っていません。'),\n      );\n    }\n    final conferenceState = ref.watch(conferenceStateProvider.notifier);\n    return Padding(\n      padding: const EdgeInsets.all(16),\n      child: ListView.separated(\n          itemBuilder: (context, index) {\n            final listItem = stateList[index];\n            const format = 'yyyy/MM/dd H:m';\n\n            return ListTile(\n              title: Text(listItem.agenda),\n              subtitle:\n                  Text('作成日：${DateFormat(format).format(listItem.createAt)}'),\n              onTap: () {\n                conferenceState.state = listItem;\n                Navigator.pushNamed(context, '/history_detail');\n              },\n            );\n          },\n          separatorBuilder: (context, _) => const SizedBox(height: 4),\n          itemCount: stateList.length),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1155,
                      "line": 28,
                      "column": 5
                    },
                    "end": {
                      "offset": 1260,
                      "line": 32,
                      "column": 6
                    },
                    "text": "if (stateList.isEmpty) {\n      return const Center(\n        child: Text('会議を一度も行っていません。'),\n      );\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 472.31347620992267,
              "level": "none",
              "comment": "This method has a halstead volume of 472.31347620992267.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 28,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 28 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 3,
              "level": "none",
              "comment": "This method has a nesting level of 3.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1149,
                      "line": 27,
                      "column": 76
                    },
                    "end": {
                      "offset": 2046,
                      "line": 54,
                      "column": 4
                    },
                    "text": "{\n    if (stateList.isEmpty) {\n      return const Center(\n        child: Text('会議を一度も行っていません。'),\n      );\n    }\n    final conferenceState = ref.watch(conferenceStateProvider.notifier);\n    return Padding(\n      padding: const EdgeInsets.all(16),\n      child: ListView.separated(\n          itemBuilder: (context, index) {\n            final listItem = stateList[index];\n            const format = 'yyyy/MM/dd H:m';\n\n            return ListTile(\n              title: Text(listItem.agenda),\n              subtitle:\n                  Text('作成日：${DateFormat(format).format(listItem.createAt)}'),\n              onTap: () {\n                conferenceState.state = listItem;\n                Navigator.pushNamed(context, '/history_detail');\n              },\n            );\n          },\n          separatorBuilder: (context, _) => const SizedBox(height: 4),\n          itemCount: stateList.length),\n    );\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1468,
                      "line": 37,
                      "column": 41
                    },
                    "end": {
                      "offset": 1923,
                      "line": 50,
                      "column": 12
                    },
                    "text": "{\n            final listItem = stateList[index];\n            const format = 'yyyy/MM/dd H:m';\n\n            return ListTile(\n              title: Text(listItem.agenda),\n              subtitle:\n                  Text('作成日：${DateFormat(format).format(listItem.createAt)}'),\n              onTap: () {\n                conferenceState.state = listItem;\n                Navigator.pushNamed(context, '/history_detail');\n              },\n            );\n          }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1763,
                      "line": 45,
                      "column": 25
                    },
                    "end": {
                      "offset": 1895,
                      "line": 48,
                      "column": 16
                    },
                    "text": "{\n                conferenceState.state = listItem;\n                Navigator.pushNamed(context, '/history_detail');\n              }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 25,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 25 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1151,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 1151,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1180,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1180,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1207,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1207,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1246,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1246,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1255,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1255,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1261,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1261,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1334,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1334,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1354,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1354,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1395,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1395,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1428,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1428,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1470,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1470,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1517,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1517,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1563,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1563,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1592,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1592,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1636,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1636,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1660,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1660,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1739,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1739,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1765,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1765,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1815,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1815,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1880,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1880,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1897,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1897,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1912,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1912,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1925,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1925,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1996,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 1996,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2036,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 2036,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 51,
              "level": "none",
              "comment": "This method has 51 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/sign_up_page.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "SignUpPage": {
          "codeSpan": {
            "start": {
              "offset": 499,
              "line": 12,
              "column": 1
            },
            "end": {
              "offset": 5644,
              "line": 137,
              "column": 2
            },
            "text": "class SignUpPage extends HookConsumerWidget {\n  SignUpPage({Key? key}) : super(key: key);\n\n  static const rootName = '/sign_up';\n\n  final _formKey = GlobalKey<FormState>();\n  final _emailTextKey = GlobalKey<FormFieldState<String>>();\n  final _passwordTextKey = GlobalKey<FormFieldState<String>>();\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final signUpController = ref.watch(signUpProvider.notifier);\n\n    return BaseScaffold(\n        title: '',\n        transparentAppbar: true,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n          child: Column(\n            children: [\n              Form(\n                  key: _formKey,\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.only(bottom: 8),\n                        child: Text(\n                          'Create Account',\n                          style: Theme.of(context).textTheme.headline4,\n                        ),\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Email')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _emailTextKey,\n                              decoration: const InputDecoration(\n                                hintText: 'example@email.com',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              validator: emailValidation,\n                              keyboardType: TextInputType.emailAddress,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Password')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _passwordTextKey,\n                              // ignore: missing_return\n                              validator: passwordValidation,\n                              obscureText: true,\n                              decoration: const InputDecoration(\n                                hintText: 'password',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              keyboardType: TextInputType.visiblePassword,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  )),\n              const Divider(thickness: 1.5),\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: CautionButton(\n                  buttonText: 'Sing Up',\n                  onPressed: () async {\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      signUpController.update(\n                          email: _emailTextKey.currentState!.value!,\n                          password: _passwordTextKey.currentState!.value!);\n\n                      final result = await signUpController.signUp();\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.statusString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == SignUpStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ),\n              const SizedBox(height: widgetBetweenSpace * 2),\n              TextButton(\n                onPressed: () {\n                  Navigator.pushNamed(context, LoginPage.rootName);\n                },\n                child: const Text(\n                  'アカウントをお持ちですか？\\nお持ちの場合はこちらをタップしてください。',\n                  textAlign: TextAlign.center,\n                ),\n              )\n            ],\n          ),\n        ));\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor SignUpPage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 547,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 588,
                      "line": 13,
                      "column": 44
                    },
                    "text": "SignUpPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 812,
                      "line": 22,
                      "column": 3
                    },
                    "end": {
                      "offset": 5642,
                      "line": 136,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final signUpController = ref.watch(signUpProvider.notifier);\n\n    return BaseScaffold(\n        title: '',\n        transparentAppbar: true,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n          child: Column(\n            children: [\n              Form(\n                  key: _formKey,\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.only(bottom: 8),\n                        child: Text(\n                          'Create Account',\n                          style: Theme.of(context).textTheme.headline4,\n                        ),\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Email')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _emailTextKey,\n                              decoration: const InputDecoration(\n                                hintText: 'example@email.com',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              validator: emailValidation,\n                              keyboardType: TextInputType.emailAddress,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Password')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _passwordTextKey,\n                              // ignore: missing_return\n                              validator: passwordValidation,\n                              obscureText: true,\n                              decoration: const InputDecoration(\n                                hintText: 'password',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              keyboardType: TextInputType.visiblePassword,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  )),\n              const Divider(thickness: 1.5),\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: CautionButton(\n                  buttonText: 'Sing Up',\n                  onPressed: () async {\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      signUpController.update(\n                          email: _emailTextKey.currentState!.value!,\n                          password: _passwordTextKey.currentState!.value!);\n\n                      final result = await signUpController.signUp();\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.statusString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == SignUpStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ),\n              const SizedBox(height: widgetBetweenSpace * 2),\n              TextButton(\n                onPressed: () {\n                  Navigator.pushNamed(context, LoginPage.rootName);\n                },\n                child: const Text(\n                  'アカウントをお持ちですか？\\nお持ちの場合はこちらをタップしてください。',\n                  textAlign: TextAlign.center,\n                ),\n              )\n            ],\n          ),\n        ));\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor SignUpPage decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 547,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 588,
                      "line": 13,
                      "column": 44
                    },
                    "text": "SignUpPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 812,
                      "line": 22,
                      "column": 3
                    },
                    "end": {
                      "offset": 5642,
                      "line": 136,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final signUpController = ref.watch(signUpProvider.notifier);\n\n    return BaseScaffold(\n        title: '',\n        transparentAppbar: true,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n          child: Column(\n            children: [\n              Form(\n                  key: _formKey,\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.only(bottom: 8),\n                        child: Text(\n                          'Create Account',\n                          style: Theme.of(context).textTheme.headline4,\n                        ),\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Email')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _emailTextKey,\n                              decoration: const InputDecoration(\n                                hintText: 'example@email.com',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              validator: emailValidation,\n                              keyboardType: TextInputType.emailAddress,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Password')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _passwordTextKey,\n                              // ignore: missing_return\n                              validator: passwordValidation,\n                              obscureText: true,\n                              decoration: const InputDecoration(\n                                hintText: 'password',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              keyboardType: TextInputType.visiblePassword,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  )),\n              const Divider(thickness: 1.5),\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: CautionButton(\n                  buttonText: 'Sing Up',\n                  onPressed: () async {\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      signUpController.update(\n                          email: _emailTextKey.currentState!.value!,\n                          password: _passwordTextKey.currentState!.value!);\n\n                      final result = await signUpController.signUp();\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.statusString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == SignUpStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ),\n              const SizedBox(height: widgetBetweenSpace * 2),\n              TextButton(\n                onPressed: () {\n                  Navigator.pushNamed(context, LoginPage.rootName);\n                },\n                child: const Text(\n                  'アカウントをお持ちですか？\\nお持ちの場合はこちらをタップしてください。',\n                  textAlign: TextAlign.center,\n                ),\n              )\n            ],\n          ),\n        ));\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "SignUpPage.SignUpPage": {
          "codeSpan": {
            "start": {
              "offset": 547,
              "line": 13,
              "column": 3
            },
            "end": {
              "offset": 588,
              "line": 13,
              "column": 44
            },
            "text": "SignUpPage({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "SignUpPage.build": {
          "codeSpan": {
            "start": {
              "offset": 812,
              "line": 22,
              "column": 3
            },
            "end": {
              "offset": 5642,
              "line": 136,
              "column": 4
            },
            "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final signUpController = ref.watch(signUpProvider.notifier);\n\n    return BaseScaffold(\n        title: '',\n        transparentAppbar: true,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n          child: Column(\n            children: [\n              Form(\n                  key: _formKey,\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.only(bottom: 8),\n                        child: Text(\n                          'Create Account',\n                          style: Theme.of(context).textTheme.headline4,\n                        ),\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Email')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _emailTextKey,\n                              decoration: const InputDecoration(\n                                hintText: 'example@email.com',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              validator: emailValidation,\n                              keyboardType: TextInputType.emailAddress,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Password')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _passwordTextKey,\n                              // ignore: missing_return\n                              validator: passwordValidation,\n                              obscureText: true,\n                              decoration: const InputDecoration(\n                                hintText: 'password',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              keyboardType: TextInputType.visiblePassword,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  )),\n              const Divider(thickness: 1.5),\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: CautionButton(\n                  buttonText: 'Sing Up',\n                  onPressed: () async {\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      signUpController.update(\n                          email: _emailTextKey.currentState!.value!,\n                          password: _passwordTextKey.currentState!.value!);\n\n                      final result = await signUpController.signUp();\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.statusString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == SignUpStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ),\n              const SizedBox(height: widgetBetweenSpace * 2),\n              TextButton(\n                onPressed: () {\n                  Navigator.pushNamed(context, LoginPage.rootName);\n                },\n                child: const Text(\n                  'アカウントをお持ちですか？\\nお持ちの場合はこちらをタップしてください。',\n                  textAlign: TextAlign.center,\n                ),\n              )\n            ],\n          ),\n        ));\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 3,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 3.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3886,
                      "line": 92,
                      "column": 21
                    },
                    "end": {
                      "offset": 5159,
                      "line": 119,
                      "column": 22
                    },
                    "text": "if (_formKey.currentState!.validate()) {\n                      signUpController.update(\n                          email: _emailTextKey.currentState!.value!,\n                          password: _passwordTextKey.currentState!.value!);\n\n                      final result = await signUpController.signUp();\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.statusString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == SignUpStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }"
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 4585,
                      "line": 106,
                      "column": 33
                    },
                    "end": {
                      "offset": 4841,
                      "line": 110,
                      "column": 34
                    },
                    "text": "if (result == SignUpStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 1858.7334661963737,
              "level": "none",
              "comment": "This method has a halstead volume of 1858.7334661963737.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 116,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 116 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 5,
              "level": "none",
              "comment": "This method has a nesting level of 5.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 862,
                      "line": 22,
                      "column": 53
                    },
                    "end": {
                      "offset": 5642,
                      "line": 136,
                      "column": 4
                    },
                    "text": "{\n    final signUpController = ref.watch(signUpProvider.notifier);\n\n    return BaseScaffold(\n        title: '',\n        transparentAppbar: true,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n          child: Column(\n            children: [\n              Form(\n                  key: _formKey,\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.only(bottom: 8),\n                        child: Text(\n                          'Create Account',\n                          style: Theme.of(context).textTheme.headline4,\n                        ),\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Email')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _emailTextKey,\n                              decoration: const InputDecoration(\n                                hintText: 'example@email.com',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              validator: emailValidation,\n                              keyboardType: TextInputType.emailAddress,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Password')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _passwordTextKey,\n                              // ignore: missing_return\n                              validator: passwordValidation,\n                              obscureText: true,\n                              decoration: const InputDecoration(\n                                hintText: 'password',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              keyboardType: TextInputType.visiblePassword,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  )),\n              const Divider(thickness: 1.5),\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: CautionButton(\n                  buttonText: 'Sing Up',\n                  onPressed: () async {\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      signUpController.update(\n                          email: _emailTextKey.currentState!.value!,\n                          password: _passwordTextKey.currentState!.value!);\n\n                      final result = await signUpController.signUp();\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.statusString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == SignUpStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ),\n              const SizedBox(height: widgetBetweenSpace * 2),\n              TextButton(\n                onPressed: () {\n                  Navigator.pushNamed(context, LoginPage.rootName);\n                },\n                child: const Text(\n                  'アカウントをお持ちですか？\\nお持ちの場合はこちらをタップしてください。',\n                  textAlign: TextAlign.center,\n                ),\n              )\n            ],\n          ),\n        ));\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 3810,
                      "line": 90,
                      "column": 39
                    },
                    "end": {
                      "offset": 5179,
                      "line": 120,
                      "column": 20
                    },
                    "text": "{\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      signUpController.update(\n                          email: _emailTextKey.currentState!.value!,\n                          password: _passwordTextKey.currentState!.value!);\n\n                      final result = await signUpController.signUp();\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.statusString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == SignUpStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 3925,
                      "line": 92,
                      "column": 60
                    },
                    "end": {
                      "offset": 5159,
                      "line": 119,
                      "column": 22
                    },
                    "text": "{\n                      signUpController.update(\n                          email: _emailTextKey.currentState!.value!,\n                          password: _passwordTextKey.currentState!.value!);\n\n                      final result = await signUpController.signUp();\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.statusString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == SignUpStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 4551,
                      "line": 105,
                      "column": 45
                    },
                    "end": {
                      "offset": 4969,
                      "line": 113,
                      "column": 32
                    },
                    "text": "{\n                                if (result == SignUpStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 4621,
                      "line": 106,
                      "column": 69
                    },
                    "end": {
                      "offset": 4841,
                      "line": 110,
                      "column": 34
                    },
                    "text": "{\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 109,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 109 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 864,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 864,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 930,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 930,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 955,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 955,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 974,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 974,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1007,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 1007,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1045,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1045,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1122,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1122,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1147,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1147,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1171,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1171,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1191,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1191,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1224,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1224,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1257,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1257,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1289,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1289,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1320,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1320,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1387,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1387,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1424,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1424,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1468,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1468,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1540,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1540,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1567,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1567,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1592,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1592,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1645,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1645,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1672,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1672,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1708,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1708,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1783,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1783,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1835,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1835,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1871,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1871,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1921,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1921,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1971,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1971,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2036,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 2036,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2099,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 2099,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2164,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 2164,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2229,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 2229,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2262,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 2262,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2320,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 2320,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2392,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 2392,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2423,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2423,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2452,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 2452,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2479,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2479,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2504,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2504,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2557,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2557,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2584,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 2584,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2620,
                      "line": 65,
                      "column": 0
                    },
                    "end": {
                      "offset": 2620,
                      "line": 65,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2698,
                      "line": 66,
                      "column": 0
                    },
                    "end": {
                      "offset": 2698,
                      "line": 66,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2750,
                      "line": 67,
                      "column": 0
                    },
                    "end": {
                      "offset": 2750,
                      "line": 67,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2786,
                      "line": 68,
                      "column": 0
                    },
                    "end": {
                      "offset": 2786,
                      "line": 68,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2836,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 2836,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2945,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 2945,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3006,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 3006,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3055,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 3055,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3120,
                      "line": 74,
                      "column": 0
                    },
                    "end": {
                      "offset": 3120,
                      "line": 74,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3174,
                      "line": 75,
                      "column": 0
                    },
                    "end": {
                      "offset": 3174,
                      "line": 75,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3239,
                      "line": 76,
                      "column": 0
                    },
                    "end": {
                      "offset": 3239,
                      "line": 76,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3304,
                      "line": 77,
                      "column": 0
                    },
                    "end": {
                      "offset": 3304,
                      "line": 77,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3337,
                      "line": 78,
                      "column": 0
                    },
                    "end": {
                      "offset": 3337,
                      "line": 78,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3412,
                      "line": 79,
                      "column": 0
                    },
                    "end": {
                      "offset": 3412,
                      "line": 79,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3443,
                      "line": 80,
                      "column": 0
                    },
                    "end": {
                      "offset": 3443,
                      "line": 80,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3472,
                      "line": 81,
                      "column": 0
                    },
                    "end": {
                      "offset": 3472,
                      "line": 81,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3499,
                      "line": 82,
                      "column": 0
                    },
                    "end": {
                      "offset": 3499,
                      "line": 82,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3524,
                      "line": 83,
                      "column": 0
                    },
                    "end": {
                      "offset": 3524,
                      "line": 83,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3547,
                      "line": 84,
                      "column": 0
                    },
                    "end": {
                      "offset": 3547,
                      "line": 84,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3569,
                      "line": 85,
                      "column": 0
                    },
                    "end": {
                      "offset": 3569,
                      "line": 85,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3614,
                      "line": 86,
                      "column": 0
                    },
                    "end": {
                      "offset": 3614,
                      "line": 86,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3637,
                      "line": 87,
                      "column": 0
                    },
                    "end": {
                      "offset": 3637,
                      "line": 87,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3693,
                      "line": 88,
                      "column": 0
                    },
                    "end": {
                      "offset": 3693,
                      "line": 88,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3731,
                      "line": 89,
                      "column": 0
                    },
                    "end": {
                      "offset": 3731,
                      "line": 89,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3772,
                      "line": 90,
                      "column": 0
                    },
                    "end": {
                      "offset": 3772,
                      "line": 90,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3812,
                      "line": 91,
                      "column": 0
                    },
                    "end": {
                      "offset": 3812,
                      "line": 91,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3866,
                      "line": 92,
                      "column": 0
                    },
                    "end": {
                      "offset": 3866,
                      "line": 92,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3927,
                      "line": 93,
                      "column": 0
                    },
                    "end": {
                      "offset": 3927,
                      "line": 93,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3974,
                      "line": 94,
                      "column": 0
                    },
                    "end": {
                      "offset": 3974,
                      "line": 94,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4043,
                      "line": 95,
                      "column": 0
                    },
                    "end": {
                      "offset": 4043,
                      "line": 95,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4120,
                      "line": 97,
                      "column": 0
                    },
                    "end": {
                      "offset": 4120,
                      "line": 97,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4191,
                      "line": 99,
                      "column": 0
                    },
                    "end": {
                      "offset": 4191,
                      "line": 99,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4246,
                      "line": 100,
                      "column": 0
                    },
                    "end": {
                      "offset": 4246,
                      "line": 100,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4288,
                      "line": 101,
                      "column": 0
                    },
                    "end": {
                      "offset": 4288,
                      "line": 101,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4356,
                      "line": 102,
                      "column": 0
                    },
                    "end": {
                      "offset": 4356,
                      "line": 102,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4419,
                      "line": 103,
                      "column": 0
                    },
                    "end": {
                      "offset": 4419,
                      "line": 103,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4456,
                      "line": 104,
                      "column": 0
                    },
                    "end": {
                      "offset": 4456,
                      "line": 104,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4507,
                      "line": 105,
                      "column": 0
                    },
                    "end": {
                      "offset": 4507,
                      "line": 105,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4553,
                      "line": 106,
                      "column": 0
                    },
                    "end": {
                      "offset": 4553,
                      "line": 106,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4623,
                      "line": 107,
                      "column": 0
                    },
                    "end": {
                      "offset": 4623,
                      "line": 107,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4704,
                      "line": 108,
                      "column": 0
                    },
                    "end": {
                      "offset": 4704,
                      "line": 108,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4766,
                      "line": 109,
                      "column": 0
                    },
                    "end": {
                      "offset": 4766,
                      "line": 109,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4808,
                      "line": 110,
                      "column": 0
                    },
                    "end": {
                      "offset": 4808,
                      "line": 110,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4842,
                      "line": 111,
                      "column": 0
                    },
                    "end": {
                      "offset": 4842,
                      "line": 111,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4898,
                      "line": 112,
                      "column": 0
                    },
                    "end": {
                      "offset": 4898,
                      "line": 112,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4938,
                      "line": 113,
                      "column": 0
                    },
                    "end": {
                      "offset": 4938,
                      "line": 113,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4971,
                      "line": 114,
                      "column": 0
                    },
                    "end": {
                      "offset": 4971,
                      "line": 114,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5026,
                      "line": 115,
                      "column": 0
                    },
                    "end": {
                      "offset": 5026,
                      "line": 115,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5057,
                      "line": 116,
                      "column": 0
                    },
                    "end": {
                      "offset": 5057,
                      "line": 116,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5086,
                      "line": 117,
                      "column": 0
                    },
                    "end": {
                      "offset": 5086,
                      "line": 117,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5113,
                      "line": 118,
                      "column": 0
                    },
                    "end": {
                      "offset": 5113,
                      "line": 118,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5138,
                      "line": 119,
                      "column": 0
                    },
                    "end": {
                      "offset": 5138,
                      "line": 119,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5160,
                      "line": 120,
                      "column": 0
                    },
                    "end": {
                      "offset": 5160,
                      "line": 120,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5181,
                      "line": 121,
                      "column": 0
                    },
                    "end": {
                      "offset": 5181,
                      "line": 121,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5200,
                      "line": 122,
                      "column": 0
                    },
                    "end": {
                      "offset": 5200,
                      "line": 122,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5217,
                      "line": 123,
                      "column": 0
                    },
                    "end": {
                      "offset": 5217,
                      "line": 123,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5279,
                      "line": 124,
                      "column": 0
                    },
                    "end": {
                      "offset": 5279,
                      "line": 124,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5305,
                      "line": 125,
                      "column": 0
                    },
                    "end": {
                      "offset": 5305,
                      "line": 125,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5337,
                      "line": 126,
                      "column": 0
                    },
                    "end": {
                      "offset": 5337,
                      "line": 126,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5405,
                      "line": 127,
                      "column": 0
                    },
                    "end": {
                      "offset": 5405,
                      "line": 127,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5424,
                      "line": 128,
                      "column": 0
                    },
                    "end": {
                      "offset": 5424,
                      "line": 128,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5459,
                      "line": 129,
                      "column": 0
                    },
                    "end": {
                      "offset": 5459,
                      "line": 129,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5517,
                      "line": 130,
                      "column": 0
                    },
                    "end": {
                      "offset": 5517,
                      "line": 130,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5564,
                      "line": 131,
                      "column": 0
                    },
                    "end": {
                      "offset": 5564,
                      "line": 131,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5583,
                      "line": 132,
                      "column": 0
                    },
                    "end": {
                      "offset": 5583,
                      "line": 132,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5599,
                      "line": 133,
                      "column": 0
                    },
                    "end": {
                      "offset": 5599,
                      "line": 133,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5614,
                      "line": 134,
                      "column": 0
                    },
                    "end": {
                      "offset": 5614,
                      "line": 134,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5627,
                      "line": 135,
                      "column": 0
                    },
                    "end": {
                      "offset": 5627,
                      "line": 135,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 33,
              "level": "none",
              "comment": "This method has 33 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/evaluate_tinder_page.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "EvaluateTinderPage": {
          "codeSpan": {
            "start": {
              "offset": 780,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 1262,
              "line": 31,
              "column": 2
            },
            "text": "class EvaluateTinderPage extends StatefulHookConsumerWidget {\n  EvaluateTinderPage({required this.chatRoomState, Key? key})\n      : tinderProvider = tinderFamilyProvider(chatRoomState),\n        super(key: key);\n\n  static const routeName = '/tinder';\n\n  final ChatRoomState chatRoomState;\n  final AutoDisposeStateNotifierProvider<TinderNotifier,\n      AsyncValue<TinderPageState>> tinderProvider;\n\n  @override\n  _EvaluateTinderPageState createState() => _EvaluateTinderPageState();\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor EvaluateTinderPage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 844,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 990,
                      "line": 21,
                      "column": 25
                    },
                    "text": "EvaluateTinderPage({required this.chatRoomState, Key? key})\n      : tinderProvider = tinderFamilyProvider(chatRoomState),\n        super(key: key);"
                  }
                },
                {
                  "message": "method createState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1191,
                      "line": 30,
                      "column": 3
                    },
                    "end": {
                      "offset": 1260,
                      "line": 30,
                      "column": 72
                    },
                    "text": "_EvaluateTinderPageState createState() => _EvaluateTinderPageState();"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor EvaluateTinderPage decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 844,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 990,
                      "line": 21,
                      "column": 25
                    },
                    "text": "EvaluateTinderPage({required this.chatRoomState, Key? key})\n      : tinderProvider = tinderFamilyProvider(chatRoomState),\n        super(key: key);"
                  }
                },
                {
                  "message": "functional method createState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1191,
                      "line": 30,
                      "column": 3
                    },
                    "end": {
                      "offset": 1260,
                      "line": 30,
                      "column": 72
                    },
                    "text": "_EvaluateTinderPageState createState() => _EvaluateTinderPageState();"
                  }
                }
              ]
            }
          ]
        },
        "_EvaluateTinderPageState": {
          "codeSpan": {
            "start": {
              "offset": 1264,
              "line": 33,
              "column": 1
            },
            "end": {
              "offset": 8369,
              "line": 212,
              "column": 2
            },
            "text": "class _EvaluateTinderPageState extends ConsumerState<EvaluateTinderPage> {\n  @override\n  Widget build(BuildContext context) {\n    late final controller = SwipeableStackController<EvaluateTinderState>();\n\n    return BaseScaffold(\n        title: '意見を評価する',\n        transparentAppbar: true,\n        enableBack: false,\n        leadingWidget: Container(),\n        actionWidget: [\n          PopupMenuButton<VoidCallback>(\n              icon: const Icon(Icons.settings),\n              onSelected: (event) => event.call(),\n              itemBuilder: (context) {\n                return [\n                  PopupMenuItem(\n                    value: () {\n                      Navigator.of(context).popUntil(ModalRoute.withName('/'));\n                    },\n                    child: const Text('評価を中断する'),\n                  )\n                ];\n              }),\n        ],\n        child: ref.watch(widget.tinderProvider).when(\n            data: (data) => _buildView(controller, data, context),\n            error: (error, _) => NetworkErrorView(\n                  reload: () =>\n                      ref.read(widget.tinderProvider.notifier).initState(),\n                ),\n            loading: () => const LoadingView()));\n  }\n\n  Padding _buildView(SwipeableStackController<EvaluateTinderState> controller,\n      TinderPageState state, BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Column(\n        children: [\n          Expanded(\n            child: Stack(\n              children: [\n                Center(\n                  child: PrimaryButton(\n                    buttonText: '評価を終了する',\n                    onPressed: () {\n                      showCupertinoDialog<void>(\n                          context: context,\n                          builder: (dialogContext) => CupertinoAlertDialog(\n                                title: const Text('確認'),\n                                content: const Text('評価を終了して、ホーム画面へ戻りますか？'),\n                                actions: [\n                                  CupertinoDialogAction(\n                                    onPressed: () =>\n                                        Navigator.of(dialogContext).pop(),\n                                    child: const Text('キャンセル'),\n                                  ),\n                                  CupertinoDialogAction(\n                                    onPressed: () => Navigator.of(context)\n                                        .popUntil(ModalRoute.withName('/')),\n                                    child: const Text('OK'),\n                                  ),\n                                ],\n                              ));\n                    },\n                  ),\n                ),\n                SwipeableStack<EvaluateTinderState>(\n                  controller: controller,\n                  dataSet: state.evaluateTinderState,\n                  builder: (context, EvaluateTinderState data, constraints) {\n                    return Center(\n                      child: Card(\n                        elevation: 2,\n                        child: Container(\n                          alignment: Alignment.center,\n                          child: Text(\n                            data.message,\n                            style: Theme.of(context)\n                                .textTheme\n                                .headline5!\n                                .copyWith(fontWeight: FontWeight.bold),\n                          ),\n                        ),\n                      ),\n                    );\n                  },\n                  overlayBuilder:\n                      (context, constrains, data, direction, swipeProgress) {\n                    final opacity = math.min<double>(swipeProgress, 1);\n                    final isRight = direction == SwipeDirection.right;\n                    final isLeft = direction == SwipeDirection.left;\n\n                    return Padding(\n                      padding: EdgeInsets.zero,\n                      child: Stack(\n                        children: [\n                          Opacity(\n                            opacity: isRight ? opacity : 0,\n                            child: const Align(\n                              child: CircleIcon(\n                                icon: Icons.thumb_up,\n                                iconSize: 50,\n                              ),\n                            ),\n                          ),\n                          Opacity(\n                            opacity: isLeft ? opacity : 0,\n                            child: const Align(\n                              child: CircleIcon(\n                                icon: Icons.thumb_down,\n                                iconSize: 50,\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    );\n                  },\n                  onWillMoveNext: (data, direction) {\n                    final allowedDirection = [\n                      SwipeDirection.right,\n                      SwipeDirection.left,\n                    ];\n                    return allowedDirection.contains(direction);\n                  },\n                  onSwipeCompleted: (data, direction) {\n                    final tinderNotifier =\n                        ref.read(widget.tinderProvider.notifier);\n\n                    switch (direction) {\n                      case SwipeDirection.left:\n                        logger.e('left!');\n                        tinderNotifier\n                            .saveEvaluate(data.copyWith(evaluation: -1));\n                        break;\n                      case SwipeDirection.right:\n                        logger.e('right!');\n                        tinderNotifier\n                            .saveEvaluate(data.copyWith(evaluation: 1));\n                        break;\n                      case SwipeDirection.up:\n                      case SwipeDirection.down:\n                        break;\n                    }\n                  },\n                ),\n              ],\n            ),\n          ),\n          Padding(\n            padding: const EdgeInsets.symmetric(vertical: widgetBetweenSpace),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                IconOnlyButton(\n                  onPressed: controller.rewind,\n                  icon: Icons.undo,\n                ),\n                const SizedBox(width: widgetBetweenSpace),\n                IconOnlyButton(\n                  onPressed: () =>\n                      controller.next(swipeDirection: SwipeDirection.left),\n                  icon: Icons.thumb_down,\n                ),\n                const SizedBox(width: widgetBetweenSpace),\n                IconOnlyButton(\n                  onPressed: () =>\n                      controller.next(swipeDirection: SwipeDirection.right),\n                  icon: Icons.thumb_up,\n                ),\n              ],\n            ),\n          )\n        ],\n      ),\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1353,
                      "line": 35,
                      "column": 3
                    },
                    "end": {
                      "offset": 2481,
                      "line": 65,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    late final controller = SwipeableStackController<EvaluateTinderState>();\n\n    return BaseScaffold(\n        title: '意見を評価する',\n        transparentAppbar: true,\n        enableBack: false,\n        leadingWidget: Container(),\n        actionWidget: [\n          PopupMenuButton<VoidCallback>(\n              icon: const Icon(Icons.settings),\n              onSelected: (event) => event.call(),\n              itemBuilder: (context) {\n                return [\n                  PopupMenuItem(\n                    value: () {\n                      Navigator.of(context).popUntil(ModalRoute.withName('/'));\n                    },\n                    child: const Text('評価を中断する'),\n                  )\n                ];\n              }),\n        ],\n        child: ref.watch(widget.tinderProvider).when(\n            data: (data) => _buildView(controller, data, context),\n            error: (error, _) => NetworkErrorView(\n                  reload: () =>\n                      ref.read(widget.tinderProvider.notifier).initState(),\n                ),\n            loading: () => const LoadingView()));\n  }"
                  }
                },
                {
                  "message": "method _buildView increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 2485,
                      "line": 67,
                      "column": 3
                    },
                    "end": {
                      "offset": 8367,
                      "line": 211,
                      "column": 4
                    },
                    "text": "Padding _buildView(SwipeableStackController<EvaluateTinderState> controller,\n      TinderPageState state, BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Column(\n        children: [\n          Expanded(\n            child: Stack(\n              children: [\n                Center(\n                  child: PrimaryButton(\n                    buttonText: '評価を終了する',\n                    onPressed: () {\n                      showCupertinoDialog<void>(\n                          context: context,\n                          builder: (dialogContext) => CupertinoAlertDialog(\n                                title: const Text('確認'),\n                                content: const Text('評価を終了して、ホーム画面へ戻りますか？'),\n                                actions: [\n                                  CupertinoDialogAction(\n                                    onPressed: () =>\n                                        Navigator.of(dialogContext).pop(),\n                                    child: const Text('キャンセル'),\n                                  ),\n                                  CupertinoDialogAction(\n                                    onPressed: () => Navigator.of(context)\n                                        .popUntil(ModalRoute.withName('/')),\n                                    child: const Text('OK'),\n                                  ),\n                                ],\n                              ));\n                    },\n                  ),\n                ),\n                SwipeableStack<EvaluateTinderState>(\n                  controller: controller,\n                  dataSet: state.evaluateTinderState,\n                  builder: (context, EvaluateTinderState data, constraints) {\n                    return Center(\n                      child: Card(\n                        elevation: 2,\n                        child: Container(\n                          alignment: Alignment.center,\n                          child: Text(\n                            data.message,\n                            style: Theme.of(context)\n                                .textTheme\n                                .headline5!\n                                .copyWith(fontWeight: FontWeight.bold),\n                          ),\n                        ),\n                      ),\n                    );\n                  },\n                  overlayBuilder:\n                      (context, constrains, data, direction, swipeProgress) {\n                    final opacity = math.min<double>(swipeProgress, 1);\n                    final isRight = direction == SwipeDirection.right;\n                    final isLeft = direction == SwipeDirection.left;\n\n                    return Padding(\n                      padding: EdgeInsets.zero,\n                      child: Stack(\n                        children: [\n                          Opacity(\n                            opacity: isRight ? opacity : 0,\n                            child: const Align(\n                              child: CircleIcon(\n                                icon: Icons.thumb_up,\n                                iconSize: 50,\n                              ),\n                            ),\n                          ),\n                          Opacity(\n                            opacity: isLeft ? opacity : 0,\n                            child: const Align(\n                              child: CircleIcon(\n                                icon: Icons.thumb_down,\n                                iconSize: 50,\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    );\n                  },\n                  onWillMoveNext: (data, direction) {\n                    final allowedDirection = [\n                      SwipeDirection.right,\n                      SwipeDirection.left,\n                    ];\n                    return allowedDirection.contains(direction);\n                  },\n                  onSwipeCompleted: (data, direction) {\n                    final tinderNotifier =\n                        ref.read(widget.tinderProvider.notifier);\n\n                    switch (direction) {\n                      case SwipeDirection.left:\n                        logger.e('left!');\n                        tinderNotifier\n                            .saveEvaluate(data.copyWith(evaluation: -1));\n                        break;\n                      case SwipeDirection.right:\n                        logger.e('right!');\n                        tinderNotifier\n                            .saveEvaluate(data.copyWith(evaluation: 1));\n                        break;\n                      case SwipeDirection.up:\n                      case SwipeDirection.down:\n                        break;\n                    }\n                  },\n                ),\n              ],\n            ),\n          ),\n          Padding(\n            padding: const EdgeInsets.symmetric(vertical: widgetBetweenSpace),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                IconOnlyButton(\n                  onPressed: controller.rewind,\n                  icon: Icons.undo,\n                ),\n                const SizedBox(width: widgetBetweenSpace),\n                IconOnlyButton(\n                  onPressed: () =>\n                      controller.next(swipeDirection: SwipeDirection.left),\n                  icon: Icons.thumb_down,\n                ),\n                const SizedBox(width: widgetBetweenSpace),\n                IconOnlyButton(\n                  onPressed: () =>\n                      controller.next(swipeDirection: SwipeDirection.right),\n                  icon: Icons.thumb_up,\n                ),\n              ],\n            ),\n          )\n        ],\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 1,
              "level": "none",
              "comment": "This class has a weight of 1.0.",
              "context": [
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1353,
                      "line": 35,
                      "column": 3
                    },
                    "end": {
                      "offset": 2481,
                      "line": 65,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    late final controller = SwipeableStackController<EvaluateTinderState>();\n\n    return BaseScaffold(\n        title: '意見を評価する',\n        transparentAppbar: true,\n        enableBack: false,\n        leadingWidget: Container(),\n        actionWidget: [\n          PopupMenuButton<VoidCallback>(\n              icon: const Icon(Icons.settings),\n              onSelected: (event) => event.call(),\n              itemBuilder: (context) {\n                return [\n                  PopupMenuItem(\n                    value: () {\n                      Navigator.of(context).popUntil(ModalRoute.withName('/'));\n                    },\n                    child: const Text('評価を中断する'),\n                  )\n                ];\n              }),\n        ],\n        child: ref.watch(widget.tinderProvider).when(\n            data: (data) => _buildView(controller, data, context),\n            error: (error, _) => NetworkErrorView(\n                  reload: () =>\n                      ref.read(widget.tinderProvider.notifier).initState(),\n                ),\n            loading: () => const LoadingView()));\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "EvaluateTinderPage.EvaluateTinderPage": {
          "codeSpan": {
            "start": {
              "offset": 844,
              "line": 19,
              "column": 3
            },
            "end": {
              "offset": 990,
              "line": 21,
              "column": 25
            },
            "text": "EvaluateTinderPage({required this.chatRoomState, Key? key})\n      : tinderProvider = tinderFamilyProvider(chatRoomState),\n        super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "EvaluateTinderPage.createState": {
          "codeSpan": {
            "start": {
              "offset": 1191,
              "line": 30,
              "column": 3
            },
            "end": {
              "offset": 1260,
              "line": 30,
              "column": 72
            },
            "text": "_EvaluateTinderPageState createState() => _EvaluateTinderPageState();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This method has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This method has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This method has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1189,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1189,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This method has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "_EvaluateTinderPageState.build": {
          "codeSpan": {
            "start": {
              "offset": 1353,
              "line": 35,
              "column": 3
            },
            "end": {
              "offset": 2481,
              "line": 65,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\n    late final controller = SwipeableStackController<EvaluateTinderState>();\n\n    return BaseScaffold(\n        title: '意見を評価する',\n        transparentAppbar: true,\n        enableBack: false,\n        leadingWidget: Container(),\n        actionWidget: [\n          PopupMenuButton<VoidCallback>(\n              icon: const Icon(Icons.settings),\n              onSelected: (event) => event.call(),\n              itemBuilder: (context) {\n                return [\n                  PopupMenuItem(\n                    value: () {\n                      Navigator.of(context).popUntil(ModalRoute.withName('/'));\n                    },\n                    child: const Text('評価を中断する'),\n                  )\n                ];\n              }),\n        ],\n        child: ref.watch(widget.tinderProvider).when(\n            data: (data) => _buildView(controller, data, context),\n            error: (error, _) => NetworkErrorView(\n                  reload: () =>\n                      ref.read(widget.tinderProvider.notifier).initState(),\n                ),\n            loading: () => const LoadingView()));\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 564.3856189774724,
              "level": "none",
              "comment": "This method has a halstead volume of 564.3856189774724.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 32,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 32 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 3,
              "level": "none",
              "comment": "This method has a nesting level of 3.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1388,
                      "line": 35,
                      "column": 38
                    },
                    "end": {
                      "offset": 2481,
                      "line": 65,
                      "column": 4
                    },
                    "text": "{\n    late final controller = SwipeableStackController<EvaluateTinderState>();\n\n    return BaseScaffold(\n        title: '意見を評価する',\n        transparentAppbar: true,\n        enableBack: false,\n        leadingWidget: Container(),\n        actionWidget: [\n          PopupMenuButton<VoidCallback>(\n              icon: const Icon(Icons.settings),\n              onSelected: (event) => event.call(),\n              itemBuilder: (context) {\n                return [\n                  PopupMenuItem(\n                    value: () {\n                      Navigator.of(context).popUntil(ModalRoute.withName('/'));\n                    },\n                    child: const Text('評価を中断する'),\n                  )\n                ];\n              }),\n        ],\n        child: ref.watch(widget.tinderProvider).when(\n            data: (data) => _buildView(controller, data, context),\n            error: (error, _) => NetworkErrorView(\n                  reload: () =>\n                      ref.read(widget.tinderProvider.notifier).initState(),\n                ),\n            loading: () => const LoadingView()));\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1816,
                      "line": 47,
                      "column": 38
                    },
                    "end": {
                      "offset": 2115,
                      "line": 56,
                      "column": 16
                    },
                    "text": "{\n                return [\n                  PopupMenuItem(\n                    value: () {\n                      Navigator.of(context).popUntil(ModalRoute.withName('/'));\n                    },\n                    child: const Text('評価を中断する'),\n                  )\n                ];\n              }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1906,
                      "line": 50,
                      "column": 31
                    },
                    "end": {
                      "offset": 2009,
                      "line": 52,
                      "column": 22
                    },
                    "text": "{\n                      Navigator.of(context).popUntil(ModalRoute.withName('/'));\n                    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 28,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 28 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1390,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1390,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1468,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1468,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1493,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1493,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1519,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1519,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1552,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1552,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1579,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1579,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1615,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1615,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1639,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1639,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1680,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1680,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1728,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1728,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1779,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1779,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1818,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1818,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1843,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1843,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1876,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1876,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1908,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1908,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1988,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 1988,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2011,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 2011,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2061,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 2061,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2081,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 2081,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2100,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 2100,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2118,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 2118,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2129,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 2129,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2183,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2183,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2250,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 2250,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2301,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2301,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2333,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2333,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2409,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2409,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2428,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 2428,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 50,
              "level": "none",
              "comment": "This method has 50 maintainability index.",
              "context": []
            }
          ]
        },
        "_EvaluateTinderPageState._buildView": {
          "codeSpan": {
            "start": {
              "offset": 2485,
              "line": 67,
              "column": 3
            },
            "end": {
              "offset": 8367,
              "line": 211,
              "column": 4
            },
            "text": "Padding _buildView(SwipeableStackController<EvaluateTinderState> controller,\n      TinderPageState state, BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Column(\n        children: [\n          Expanded(\n            child: Stack(\n              children: [\n                Center(\n                  child: PrimaryButton(\n                    buttonText: '評価を終了する',\n                    onPressed: () {\n                      showCupertinoDialog<void>(\n                          context: context,\n                          builder: (dialogContext) => CupertinoAlertDialog(\n                                title: const Text('確認'),\n                                content: const Text('評価を終了して、ホーム画面へ戻りますか？'),\n                                actions: [\n                                  CupertinoDialogAction(\n                                    onPressed: () =>\n                                        Navigator.of(dialogContext).pop(),\n                                    child: const Text('キャンセル'),\n                                  ),\n                                  CupertinoDialogAction(\n                                    onPressed: () => Navigator.of(context)\n                                        .popUntil(ModalRoute.withName('/')),\n                                    child: const Text('OK'),\n                                  ),\n                                ],\n                              ));\n                    },\n                  ),\n                ),\n                SwipeableStack<EvaluateTinderState>(\n                  controller: controller,\n                  dataSet: state.evaluateTinderState,\n                  builder: (context, EvaluateTinderState data, constraints) {\n                    return Center(\n                      child: Card(\n                        elevation: 2,\n                        child: Container(\n                          alignment: Alignment.center,\n                          child: Text(\n                            data.message,\n                            style: Theme.of(context)\n                                .textTheme\n                                .headline5!\n                                .copyWith(fontWeight: FontWeight.bold),\n                          ),\n                        ),\n                      ),\n                    );\n                  },\n                  overlayBuilder:\n                      (context, constrains, data, direction, swipeProgress) {\n                    final opacity = math.min<double>(swipeProgress, 1);\n                    final isRight = direction == SwipeDirection.right;\n                    final isLeft = direction == SwipeDirection.left;\n\n                    return Padding(\n                      padding: EdgeInsets.zero,\n                      child: Stack(\n                        children: [\n                          Opacity(\n                            opacity: isRight ? opacity : 0,\n                            child: const Align(\n                              child: CircleIcon(\n                                icon: Icons.thumb_up,\n                                iconSize: 50,\n                              ),\n                            ),\n                          ),\n                          Opacity(\n                            opacity: isLeft ? opacity : 0,\n                            child: const Align(\n                              child: CircleIcon(\n                                icon: Icons.thumb_down,\n                                iconSize: 50,\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    );\n                  },\n                  onWillMoveNext: (data, direction) {\n                    final allowedDirection = [\n                      SwipeDirection.right,\n                      SwipeDirection.left,\n                    ];\n                    return allowedDirection.contains(direction);\n                  },\n                  onSwipeCompleted: (data, direction) {\n                    final tinderNotifier =\n                        ref.read(widget.tinderProvider.notifier);\n\n                    switch (direction) {\n                      case SwipeDirection.left:\n                        logger.e('left!');\n                        tinderNotifier\n                            .saveEvaluate(data.copyWith(evaluation: -1));\n                        break;\n                      case SwipeDirection.right:\n                        logger.e('right!');\n                        tinderNotifier\n                            .saveEvaluate(data.copyWith(evaluation: 1));\n                        break;\n                      case SwipeDirection.up:\n                      case SwipeDirection.down:\n                        break;\n                    }\n                  },\n                ),\n              ],\n            ),\n          ),\n          Padding(\n            padding: const EdgeInsets.symmetric(vertical: widgetBetweenSpace),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                IconOnlyButton(\n                  onPressed: controller.rewind,\n                  icon: Icons.undo,\n                ),\n                const SizedBox(width: widgetBetweenSpace),\n                IconOnlyButton(\n                  onPressed: () =>\n                      controller.next(swipeDirection: SwipeDirection.left),\n                  icon: Icons.thumb_down,\n                ),\n                const SizedBox(width: widgetBetweenSpace),\n                IconOnlyButton(\n                  onPressed: () =>\n                      controller.next(swipeDirection: SwipeDirection.right),\n                  icon: Icons.thumb_up,\n                ),\n              ],\n            ),\n          )\n        ],\n      ),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 7,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 7.",
              "context": [
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 5424,
                      "line": 132,
                      "column": 38
                    },
                    "end": {
                      "offset": 5445,
                      "line": 132,
                      "column": 59
                    },
                    "text": "isRight ? opacity : 0"
                  }
                },
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 5809,
                      "line": 141,
                      "column": 38
                    },
                    "end": {
                      "offset": 5829,
                      "line": 141,
                      "column": 58
                    },
                    "text": "isLeft ? opacity : 0"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 6745,
                      "line": 165,
                      "column": 23
                    },
                    "end": {
                      "offset": 6957,
                      "line": 169,
                      "column": 31
                    },
                    "text": "case SwipeDirection.left:\n                        logger.e('left!');\n                        tinderNotifier\n                            .saveEvaluate(data.copyWith(evaluation: -1));\n                        break;"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 6980,
                      "line": 170,
                      "column": 23
                    },
                    "end": {
                      "offset": 7193,
                      "line": 174,
                      "column": 31
                    },
                    "text": "case SwipeDirection.right:\n                        logger.e('right!');\n                        tinderNotifier\n                            .saveEvaluate(data.copyWith(evaluation: 1));\n                        break;"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 7216,
                      "line": 175,
                      "column": 23
                    },
                    "end": {
                      "offset": 7239,
                      "line": 175,
                      "column": 46
                    },
                    "text": "case SwipeDirection.up:"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 7262,
                      "line": 176,
                      "column": 23
                    },
                    "end": {
                      "offset": 7318,
                      "line": 177,
                      "column": 31
                    },
                    "text": "case SwipeDirection.down:\n                        break;"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 2902.4219573885543,
              "level": "none",
              "comment": "This method has a halstead volume of 2902.4219573885543.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 145,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 145 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2613,
                      "line": 68,
                      "column": 52
                    },
                    "end": {
                      "offset": 8367,
                      "line": 211,
                      "column": 4
                    },
                    "text": "{\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 16),\n      child: Column(\n        children: [\n          Expanded(\n            child: Stack(\n              children: [\n                Center(\n                  child: PrimaryButton(\n                    buttonText: '評価を終了する',\n                    onPressed: () {\n                      showCupertinoDialog<void>(\n                          context: context,\n                          builder: (dialogContext) => CupertinoAlertDialog(\n                                title: const Text('確認'),\n                                content: const Text('評価を終了して、ホーム画面へ戻りますか？'),\n                                actions: [\n                                  CupertinoDialogAction(\n                                    onPressed: () =>\n                                        Navigator.of(dialogContext).pop(),\n                                    child: const Text('キャンセル'),\n                                  ),\n                                  CupertinoDialogAction(\n                                    onPressed: () => Navigator.of(context)\n                                        .popUntil(ModalRoute.withName('/')),\n                                    child: const Text('OK'),\n                                  ),\n                                ],\n                              ));\n                    },\n                  ),\n                ),\n                SwipeableStack<EvaluateTinderState>(\n                  controller: controller,\n                  dataSet: state.evaluateTinderState,\n                  builder: (context, EvaluateTinderState data, constraints) {\n                    return Center(\n                      child: Card(\n                        elevation: 2,\n                        child: Container(\n                          alignment: Alignment.center,\n                          child: Text(\n                            data.message,\n                            style: Theme.of(context)\n                                .textTheme\n                                .headline5!\n                                .copyWith(fontWeight: FontWeight.bold),\n                          ),\n                        ),\n                      ),\n                    );\n                  },\n                  overlayBuilder:\n                      (context, constrains, data, direction, swipeProgress) {\n                    final opacity = math.min<double>(swipeProgress, 1);\n                    final isRight = direction == SwipeDirection.right;\n                    final isLeft = direction == SwipeDirection.left;\n\n                    return Padding(\n                      padding: EdgeInsets.zero,\n                      child: Stack(\n                        children: [\n                          Opacity(\n                            opacity: isRight ? opacity : 0,\n                            child: const Align(\n                              child: CircleIcon(\n                                icon: Icons.thumb_up,\n                                iconSize: 50,\n                              ),\n                            ),\n                          ),\n                          Opacity(\n                            opacity: isLeft ? opacity : 0,\n                            child: const Align(\n                              child: CircleIcon(\n                                icon: Icons.thumb_down,\n                                iconSize: 50,\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    );\n                  },\n                  onWillMoveNext: (data, direction) {\n                    final allowedDirection = [\n                      SwipeDirection.right,\n                      SwipeDirection.left,\n                    ];\n                    return allowedDirection.contains(direction);\n                  },\n                  onSwipeCompleted: (data, direction) {\n                    final tinderNotifier =\n                        ref.read(widget.tinderProvider.notifier);\n\n                    switch (direction) {\n                      case SwipeDirection.left:\n                        logger.e('left!');\n                        tinderNotifier\n                            .saveEvaluate(data.copyWith(evaluation: -1));\n                        break;\n                      case SwipeDirection.right:\n                        logger.e('right!');\n                        tinderNotifier\n                            .saveEvaluate(data.copyWith(evaluation: 1));\n                        break;\n                      case SwipeDirection.up:\n                      case SwipeDirection.down:\n                        break;\n                    }\n                  },\n                ),\n              ],\n            ),\n          ),\n          Padding(\n            padding: const EdgeInsets.symmetric(vertical: widgetBetweenSpace),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                IconOnlyButton(\n                  onPressed: controller.rewind,\n                  icon: Icons.undo,\n                ),\n                const SizedBox(width: widgetBetweenSpace),\n                IconOnlyButton(\n                  onPressed: () =>\n                      controller.next(swipeDirection: SwipeDirection.left),\n                  icon: Icons.thumb_down,\n                ),\n                const SizedBox(width: widgetBetweenSpace),\n                IconOnlyButton(\n                  onPressed: () =>\n                      controller.next(swipeDirection: SwipeDirection.right),\n                  icon: Icons.thumb_up,\n                ),\n              ],\n            ),\n          )\n        ],\n      ),\n    );\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2948,
                      "line": 79,
                      "column": 35
                    },
                    "end": {
                      "offset": 3979,
                      "line": 98,
                      "column": 22
                    },
                    "text": "{\n                      showCupertinoDialog<void>(\n                          context: context,\n                          builder: (dialogContext) => CupertinoAlertDialog(\n                                title: const Text('確認'),\n                                content: const Text('評価を終了して、ホーム画面へ戻りますか？'),\n                                actions: [\n                                  CupertinoDialogAction(\n                                    onPressed: () =>\n                                        Navigator.of(dialogContext).pop(),\n                                    child: const Text('キャンセル'),\n                                  ),\n                                  CupertinoDialogAction(\n                                    onPressed: () => Navigator.of(context)\n                                        .popUntil(ModalRoute.withName('/')),\n                                    child: const Text('OK'),\n                                  ),\n                                ],\n                              ));\n                    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 3,
              "level": "none",
              "comment": "This method has 3 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 140,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 140 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2615,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 2615,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2635,
                      "line": 70,
                      "column": 0
                    },
                    "end": {
                      "offset": 2635,
                      "line": 70,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2694,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 2694,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2715,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 2715,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2735,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 2735,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2755,
                      "line": 74,
                      "column": 0
                    },
                    "end": {
                      "offset": 2755,
                      "line": 74,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2781,
                      "line": 75,
                      "column": 0
                    },
                    "end": {
                      "offset": 2781,
                      "line": 75,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2807,
                      "line": 76,
                      "column": 0
                    },
                    "end": {
                      "offset": 2807,
                      "line": 76,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2831,
                      "line": 77,
                      "column": 0
                    },
                    "end": {
                      "offset": 2831,
                      "line": 77,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2871,
                      "line": 78,
                      "column": 0
                    },
                    "end": {
                      "offset": 2871,
                      "line": 78,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2914,
                      "line": 79,
                      "column": 0
                    },
                    "end": {
                      "offset": 2914,
                      "line": 79,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2950,
                      "line": 80,
                      "column": 0
                    },
                    "end": {
                      "offset": 2950,
                      "line": 80,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2999,
                      "line": 81,
                      "column": 0
                    },
                    "end": {
                      "offset": 2999,
                      "line": 81,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3043,
                      "line": 82,
                      "column": 0
                    },
                    "end": {
                      "offset": 3043,
                      "line": 82,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3119,
                      "line": 83,
                      "column": 0
                    },
                    "end": {
                      "offset": 3119,
                      "line": 83,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3176,
                      "line": 84,
                      "column": 0
                    },
                    "end": {
                      "offset": 3176,
                      "line": 84,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3253,
                      "line": 85,
                      "column": 0
                    },
                    "end": {
                      "offset": 3253,
                      "line": 85,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3296,
                      "line": 86,
                      "column": 0
                    },
                    "end": {
                      "offset": 3296,
                      "line": 86,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3353,
                      "line": 87,
                      "column": 0
                    },
                    "end": {
                      "offset": 3353,
                      "line": 87,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3406,
                      "line": 88,
                      "column": 0
                    },
                    "end": {
                      "offset": 3406,
                      "line": 88,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3481,
                      "line": 89,
                      "column": 0
                    },
                    "end": {
                      "offset": 3481,
                      "line": 89,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3545,
                      "line": 90,
                      "column": 0
                    },
                    "end": {
                      "offset": 3545,
                      "line": 90,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3582,
                      "line": 91,
                      "column": 0
                    },
                    "end": {
                      "offset": 3582,
                      "line": 91,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3639,
                      "line": 92,
                      "column": 0
                    },
                    "end": {
                      "offset": 3639,
                      "line": 92,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3714,
                      "line": 93,
                      "column": 0
                    },
                    "end": {
                      "offset": 3714,
                      "line": 93,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3791,
                      "line": 94,
                      "column": 0
                    },
                    "end": {
                      "offset": 3791,
                      "line": 94,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3852,
                      "line": 95,
                      "column": 0
                    },
                    "end": {
                      "offset": 3852,
                      "line": 95,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3889,
                      "line": 96,
                      "column": 0
                    },
                    "end": {
                      "offset": 3889,
                      "line": 96,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3924,
                      "line": 97,
                      "column": 0
                    },
                    "end": {
                      "offset": 3924,
                      "line": 97,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3958,
                      "line": 98,
                      "column": 0
                    },
                    "end": {
                      "offset": 3958,
                      "line": 98,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3981,
                      "line": 99,
                      "column": 0
                    },
                    "end": {
                      "offset": 3981,
                      "line": 99,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4002,
                      "line": 100,
                      "column": 0
                    },
                    "end": {
                      "offset": 4002,
                      "line": 100,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4021,
                      "line": 101,
                      "column": 0
                    },
                    "end": {
                      "offset": 4021,
                      "line": 101,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4074,
                      "line": 102,
                      "column": 0
                    },
                    "end": {
                      "offset": 4074,
                      "line": 102,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4116,
                      "line": 103,
                      "column": 0
                    },
                    "end": {
                      "offset": 4116,
                      "line": 103,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4170,
                      "line": 104,
                      "column": 0
                    },
                    "end": {
                      "offset": 4170,
                      "line": 104,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4248,
                      "line": 105,
                      "column": 0
                    },
                    "end": {
                      "offset": 4248,
                      "line": 105,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4283,
                      "line": 106,
                      "column": 0
                    },
                    "end": {
                      "offset": 4283,
                      "line": 106,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4318,
                      "line": 107,
                      "column": 0
                    },
                    "end": {
                      "offset": 4318,
                      "line": 107,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4356,
                      "line": 108,
                      "column": 0
                    },
                    "end": {
                      "offset": 4356,
                      "line": 108,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4398,
                      "line": 109,
                      "column": 0
                    },
                    "end": {
                      "offset": 4398,
                      "line": 109,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4453,
                      "line": 110,
                      "column": 0
                    },
                    "end": {
                      "offset": 4453,
                      "line": 110,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4492,
                      "line": 111,
                      "column": 0
                    },
                    "end": {
                      "offset": 4492,
                      "line": 111,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4534,
                      "line": 112,
                      "column": 0
                    },
                    "end": {
                      "offset": 4534,
                      "line": 112,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4587,
                      "line": 113,
                      "column": 0
                    },
                    "end": {
                      "offset": 4587,
                      "line": 113,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4630,
                      "line": 114,
                      "column": 0
                    },
                    "end": {
                      "offset": 4630,
                      "line": 114,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4674,
                      "line": 115,
                      "column": 0
                    },
                    "end": {
                      "offset": 4674,
                      "line": 115,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4746,
                      "line": 116,
                      "column": 0
                    },
                    "end": {
                      "offset": 4746,
                      "line": 116,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4775,
                      "line": 117,
                      "column": 0
                    },
                    "end": {
                      "offset": 4775,
                      "line": 117,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4802,
                      "line": 118,
                      "column": 0
                    },
                    "end": {
                      "offset": 4802,
                      "line": 118,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4827,
                      "line": 119,
                      "column": 0
                    },
                    "end": {
                      "offset": 4827,
                      "line": 119,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4850,
                      "line": 120,
                      "column": 0
                    },
                    "end": {
                      "offset": 4850,
                      "line": 120,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4871,
                      "line": 121,
                      "column": 0
                    },
                    "end": {
                      "offset": 4871,
                      "line": 121,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4905,
                      "line": 122,
                      "column": 0
                    },
                    "end": {
                      "offset": 4905,
                      "line": 122,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4983,
                      "line": 123,
                      "column": 0
                    },
                    "end": {
                      "offset": 4983,
                      "line": 123,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5055,
                      "line": 124,
                      "column": 0
                    },
                    "end": {
                      "offset": 5055,
                      "line": 124,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5126,
                      "line": 125,
                      "column": 0
                    },
                    "end": {
                      "offset": 5126,
                      "line": 125,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5196,
                      "line": 127,
                      "column": 0
                    },
                    "end": {
                      "offset": 5196,
                      "line": 127,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5232,
                      "line": 128,
                      "column": 0
                    },
                    "end": {
                      "offset": 5232,
                      "line": 128,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5280,
                      "line": 129,
                      "column": 0
                    },
                    "end": {
                      "offset": 5280,
                      "line": 129,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5316,
                      "line": 130,
                      "column": 0
                    },
                    "end": {
                      "offset": 5316,
                      "line": 130,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5352,
                      "line": 131,
                      "column": 0
                    },
                    "end": {
                      "offset": 5352,
                      "line": 131,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5387,
                      "line": 132,
                      "column": 0
                    },
                    "end": {
                      "offset": 5387,
                      "line": 132,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5447,
                      "line": 133,
                      "column": 0
                    },
                    "end": {
                      "offset": 5447,
                      "line": 133,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5495,
                      "line": 134,
                      "column": 0
                    },
                    "end": {
                      "offset": 5495,
                      "line": 134,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5544,
                      "line": 135,
                      "column": 0
                    },
                    "end": {
                      "offset": 5544,
                      "line": 135,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5598,
                      "line": 136,
                      "column": 0
                    },
                    "end": {
                      "offset": 5598,
                      "line": 136,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5644,
                      "line": 137,
                      "column": 0
                    },
                    "end": {
                      "offset": 5644,
                      "line": 137,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5677,
                      "line": 138,
                      "column": 0
                    },
                    "end": {
                      "offset": 5677,
                      "line": 138,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5708,
                      "line": 139,
                      "column": 0
                    },
                    "end": {
                      "offset": 5708,
                      "line": 139,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5737,
                      "line": 140,
                      "column": 0
                    },
                    "end": {
                      "offset": 5737,
                      "line": 140,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5772,
                      "line": 141,
                      "column": 0
                    },
                    "end": {
                      "offset": 5772,
                      "line": 141,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5831,
                      "line": 142,
                      "column": 0
                    },
                    "end": {
                      "offset": 5831,
                      "line": 142,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5879,
                      "line": 143,
                      "column": 0
                    },
                    "end": {
                      "offset": 5879,
                      "line": 143,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5928,
                      "line": 144,
                      "column": 0
                    },
                    "end": {
                      "offset": 5928,
                      "line": 144,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5984,
                      "line": 145,
                      "column": 0
                    },
                    "end": {
                      "offset": 5984,
                      "line": 145,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6030,
                      "line": 146,
                      "column": 0
                    },
                    "end": {
                      "offset": 6030,
                      "line": 146,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6063,
                      "line": 147,
                      "column": 0
                    },
                    "end": {
                      "offset": 6063,
                      "line": 147,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6094,
                      "line": 148,
                      "column": 0
                    },
                    "end": {
                      "offset": 6094,
                      "line": 148,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6123,
                      "line": 149,
                      "column": 0
                    },
                    "end": {
                      "offset": 6123,
                      "line": 149,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6150,
                      "line": 150,
                      "column": 0
                    },
                    "end": {
                      "offset": 6150,
                      "line": 150,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6175,
                      "line": 151,
                      "column": 0
                    },
                    "end": {
                      "offset": 6175,
                      "line": 151,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6198,
                      "line": 152,
                      "column": 0
                    },
                    "end": {
                      "offset": 6198,
                      "line": 152,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6219,
                      "line": 153,
                      "column": 0
                    },
                    "end": {
                      "offset": 6219,
                      "line": 153,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6273,
                      "line": 154,
                      "column": 0
                    },
                    "end": {
                      "offset": 6273,
                      "line": 154,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6320,
                      "line": 155,
                      "column": 0
                    },
                    "end": {
                      "offset": 6320,
                      "line": 155,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6364,
                      "line": 156,
                      "column": 0
                    },
                    "end": {
                      "offset": 6364,
                      "line": 156,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6407,
                      "line": 157,
                      "column": 0
                    },
                    "end": {
                      "offset": 6407,
                      "line": 157,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6430,
                      "line": 158,
                      "column": 0
                    },
                    "end": {
                      "offset": 6430,
                      "line": 158,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6495,
                      "line": 159,
                      "column": 0
                    },
                    "end": {
                      "offset": 6495,
                      "line": 159,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6516,
                      "line": 160,
                      "column": 0
                    },
                    "end": {
                      "offset": 6516,
                      "line": 160,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6572,
                      "line": 161,
                      "column": 0
                    },
                    "end": {
                      "offset": 6572,
                      "line": 161,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6615,
                      "line": 162,
                      "column": 0
                    },
                    "end": {
                      "offset": 6615,
                      "line": 162,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6682,
                      "line": 164,
                      "column": 0
                    },
                    "end": {
                      "offset": 6682,
                      "line": 164,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6723,
                      "line": 165,
                      "column": 0
                    },
                    "end": {
                      "offset": 6723,
                      "line": 165,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6771,
                      "line": 166,
                      "column": 0
                    },
                    "end": {
                      "offset": 6771,
                      "line": 166,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6814,
                      "line": 167,
                      "column": 0
                    },
                    "end": {
                      "offset": 6814,
                      "line": 167,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6853,
                      "line": 168,
                      "column": 0
                    },
                    "end": {
                      "offset": 6853,
                      "line": 168,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6927,
                      "line": 169,
                      "column": 0
                    },
                    "end": {
                      "offset": 6927,
                      "line": 169,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 6958,
                      "line": 170,
                      "column": 0
                    },
                    "end": {
                      "offset": 6958,
                      "line": 170,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7007,
                      "line": 171,
                      "column": 0
                    },
                    "end": {
                      "offset": 7007,
                      "line": 171,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7051,
                      "line": 172,
                      "column": 0
                    },
                    "end": {
                      "offset": 7051,
                      "line": 172,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7090,
                      "line": 173,
                      "column": 0
                    },
                    "end": {
                      "offset": 7090,
                      "line": 173,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7163,
                      "line": 174,
                      "column": 0
                    },
                    "end": {
                      "offset": 7163,
                      "line": 174,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7194,
                      "line": 175,
                      "column": 0
                    },
                    "end": {
                      "offset": 7194,
                      "line": 175,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7240,
                      "line": 176,
                      "column": 0
                    },
                    "end": {
                      "offset": 7240,
                      "line": 176,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7288,
                      "line": 177,
                      "column": 0
                    },
                    "end": {
                      "offset": 7288,
                      "line": 177,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7319,
                      "line": 178,
                      "column": 0
                    },
                    "end": {
                      "offset": 7319,
                      "line": 178,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7341,
                      "line": 179,
                      "column": 0
                    },
                    "end": {
                      "offset": 7341,
                      "line": 179,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7362,
                      "line": 180,
                      "column": 0
                    },
                    "end": {
                      "offset": 7362,
                      "line": 180,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7381,
                      "line": 181,
                      "column": 0
                    },
                    "end": {
                      "offset": 7381,
                      "line": 181,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7398,
                      "line": 182,
                      "column": 0
                    },
                    "end": {
                      "offset": 7398,
                      "line": 182,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7413,
                      "line": 183,
                      "column": 0
                    },
                    "end": {
                      "offset": 7413,
                      "line": 183,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7426,
                      "line": 184,
                      "column": 0
                    },
                    "end": {
                      "offset": 7426,
                      "line": 184,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7445,
                      "line": 185,
                      "column": 0
                    },
                    "end": {
                      "offset": 7445,
                      "line": 185,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7524,
                      "line": 186,
                      "column": 0
                    },
                    "end": {
                      "offset": 7524,
                      "line": 186,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7548,
                      "line": 187,
                      "column": 0
                    },
                    "end": {
                      "offset": 7548,
                      "line": 187,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7607,
                      "line": 188,
                      "column": 0
                    },
                    "end": {
                      "offset": 7607,
                      "line": 188,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7633,
                      "line": 189,
                      "column": 0
                    },
                    "end": {
                      "offset": 7633,
                      "line": 189,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7665,
                      "line": 190,
                      "column": 0
                    },
                    "end": {
                      "offset": 7665,
                      "line": 190,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7713,
                      "line": 191,
                      "column": 0
                    },
                    "end": {
                      "offset": 7713,
                      "line": 191,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7749,
                      "line": 192,
                      "column": 0
                    },
                    "end": {
                      "offset": 7749,
                      "line": 192,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7768,
                      "line": 193,
                      "column": 0
                    },
                    "end": {
                      "offset": 7768,
                      "line": 193,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7827,
                      "line": 194,
                      "column": 0
                    },
                    "end": {
                      "offset": 7827,
                      "line": 194,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7859,
                      "line": 195,
                      "column": 0
                    },
                    "end": {
                      "offset": 7859,
                      "line": 195,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7894,
                      "line": 196,
                      "column": 0
                    },
                    "end": {
                      "offset": 7894,
                      "line": 196,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 7970,
                      "line": 197,
                      "column": 0
                    },
                    "end": {
                      "offset": 7970,
                      "line": 197,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8012,
                      "line": 198,
                      "column": 0
                    },
                    "end": {
                      "offset": 8012,
                      "line": 198,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8031,
                      "line": 199,
                      "column": 0
                    },
                    "end": {
                      "offset": 8031,
                      "line": 199,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8090,
                      "line": 200,
                      "column": 0
                    },
                    "end": {
                      "offset": 8090,
                      "line": 200,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8122,
                      "line": 201,
                      "column": 0
                    },
                    "end": {
                      "offset": 8122,
                      "line": 201,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8157,
                      "line": 202,
                      "column": 0
                    },
                    "end": {
                      "offset": 8157,
                      "line": 202,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8234,
                      "line": 203,
                      "column": 0
                    },
                    "end": {
                      "offset": 8234,
                      "line": 203,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8274,
                      "line": 204,
                      "column": 0
                    },
                    "end": {
                      "offset": 8274,
                      "line": 204,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8293,
                      "line": 205,
                      "column": 0
                    },
                    "end": {
                      "offset": 8293,
                      "line": 205,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8310,
                      "line": 206,
                      "column": 0
                    },
                    "end": {
                      "offset": 8310,
                      "line": 206,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8325,
                      "line": 207,
                      "column": 0
                    },
                    "end": {
                      "offset": 8325,
                      "line": 207,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8337,
                      "line": 208,
                      "column": 0
                    },
                    "end": {
                      "offset": 8337,
                      "line": 208,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8348,
                      "line": 209,
                      "column": 0
                    },
                    "end": {
                      "offset": 8348,
                      "line": 209,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 8357,
                      "line": 210,
                      "column": 0
                    },
                    "end": {
                      "offset": 8357,
                      "line": 210,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 28,
              "level": "none",
              "comment": "This method has 28 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/login_page.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "LoginPage": {
          "codeSpan": {
            "start": {
              "offset": 450,
              "line": 11,
              "column": 1
            },
            "end": {
              "offset": 5259,
              "line": 126,
              "column": 2
            },
            "text": "class LoginPage extends HookConsumerWidget {\n  LoginPage({Key? key}) : super(key: key);\n\n  static const rootName = '/login';\n\n  final _formKey = GlobalKey<FormState>();\n  final _emailTextKey = GlobalKey<FormFieldState<String>>();\n  final _passwordTextKey = GlobalKey<FormFieldState<String>>();\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    return BaseScaffold(\n        title: '',\n        transparentAppbar: true,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n          child: Column(\n            children: [\n              Form(\n                  key: _formKey,\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.only(bottom: 8),\n                        child: Text(\n                          'Login',\n                          style: Theme.of(context).textTheme.headline4,\n                        ),\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Email')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _emailTextKey,\n                              decoration: const InputDecoration(\n                                hintText: 'example@email.com',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              validator: emailValidation,\n                              keyboardType: TextInputType.emailAddress,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Password')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _passwordTextKey,\n                              // ignore: missing_return\n                              validator: passwordValidation,\n                              obscureText: true,\n                              decoration: const InputDecoration(\n                                hintText: 'password',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              keyboardType: TextInputType.visiblePassword,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  )),\n              const Divider(thickness: 1.5),\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: CautionButton(\n                  buttonText: 'Login',\n                  onPressed: () async {\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      final result =\n                          await ref.read(loginProvider.notifier).emailLogin(\n                                LoginDto(\n                                    email: _emailTextKey.currentState!.value!,\n                                    password:\n                                        _passwordTextKey.currentState!.value!),\n                              );\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.getString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == LoginStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ),\n            ],\n          ),\n        ));\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor LoginPage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 497,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 537,
                      "line": 12,
                      "column": 43
                    },
                    "text": "LoginPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 759,
                      "line": 21,
                      "column": 3
                    },
                    "end": {
                      "offset": 5257,
                      "line": 125,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    return BaseScaffold(\n        title: '',\n        transparentAppbar: true,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n          child: Column(\n            children: [\n              Form(\n                  key: _formKey,\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.only(bottom: 8),\n                        child: Text(\n                          'Login',\n                          style: Theme.of(context).textTheme.headline4,\n                        ),\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Email')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _emailTextKey,\n                              decoration: const InputDecoration(\n                                hintText: 'example@email.com',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              validator: emailValidation,\n                              keyboardType: TextInputType.emailAddress,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Password')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _passwordTextKey,\n                              // ignore: missing_return\n                              validator: passwordValidation,\n                              obscureText: true,\n                              decoration: const InputDecoration(\n                                hintText: 'password',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              keyboardType: TextInputType.visiblePassword,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  )),\n              const Divider(thickness: 1.5),\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: CautionButton(\n                  buttonText: 'Login',\n                  onPressed: () async {\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      final result =\n                          await ref.read(loginProvider.notifier).emailLogin(\n                                LoginDto(\n                                    email: _emailTextKey.currentState!.value!,\n                                    password:\n                                        _passwordTextKey.currentState!.value!),\n                              );\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.getString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == LoginStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ),\n            ],\n          ),\n        ));\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor LoginPage decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 497,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 537,
                      "line": 12,
                      "column": 43
                    },
                    "text": "LoginPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 759,
                      "line": 21,
                      "column": 3
                    },
                    "end": {
                      "offset": 5257,
                      "line": 125,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    return BaseScaffold(\n        title: '',\n        transparentAppbar: true,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n          child: Column(\n            children: [\n              Form(\n                  key: _formKey,\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.only(bottom: 8),\n                        child: Text(\n                          'Login',\n                          style: Theme.of(context).textTheme.headline4,\n                        ),\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Email')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _emailTextKey,\n                              decoration: const InputDecoration(\n                                hintText: 'example@email.com',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              validator: emailValidation,\n                              keyboardType: TextInputType.emailAddress,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Password')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _passwordTextKey,\n                              // ignore: missing_return\n                              validator: passwordValidation,\n                              obscureText: true,\n                              decoration: const InputDecoration(\n                                hintText: 'password',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              keyboardType: TextInputType.visiblePassword,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  )),\n              const Divider(thickness: 1.5),\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: CautionButton(\n                  buttonText: 'Login',\n                  onPressed: () async {\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      final result =\n                          await ref.read(loginProvider.notifier).emailLogin(\n                                LoginDto(\n                                    email: _emailTextKey.currentState!.value!,\n                                    password:\n                                        _passwordTextKey.currentState!.value!),\n                              );\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.getString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == LoginStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ),\n            ],\n          ),\n        ));\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "LoginPage.LoginPage": {
          "codeSpan": {
            "start": {
              "offset": 497,
              "line": 12,
              "column": 3
            },
            "end": {
              "offset": 537,
              "line": 12,
              "column": 43
            },
            "text": "LoginPage({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "LoginPage.build": {
          "codeSpan": {
            "start": {
              "offset": 759,
              "line": 21,
              "column": 3
            },
            "end": {
              "offset": 5257,
              "line": 125,
              "column": 4
            },
            "text": "Widget build(BuildContext context, WidgetRef ref) {\n    return BaseScaffold(\n        title: '',\n        transparentAppbar: true,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n          child: Column(\n            children: [\n              Form(\n                  key: _formKey,\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.only(bottom: 8),\n                        child: Text(\n                          'Login',\n                          style: Theme.of(context).textTheme.headline4,\n                        ),\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Email')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _emailTextKey,\n                              decoration: const InputDecoration(\n                                hintText: 'example@email.com',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              validator: emailValidation,\n                              keyboardType: TextInputType.emailAddress,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Password')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _passwordTextKey,\n                              // ignore: missing_return\n                              validator: passwordValidation,\n                              obscureText: true,\n                              decoration: const InputDecoration(\n                                hintText: 'password',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              keyboardType: TextInputType.visiblePassword,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  )),\n              const Divider(thickness: 1.5),\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: CautionButton(\n                  buttonText: 'Login',\n                  onPressed: () async {\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      final result =\n                          await ref.read(loginProvider.notifier).emailLogin(\n                                LoginDto(\n                                    email: _emailTextKey.currentState!.value!,\n                                    password:\n                                        _passwordTextKey.currentState!.value!),\n                              );\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.getString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == LoginStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ),\n            ],\n          ),\n        ));\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 3,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 3.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3756,
                      "line": 89,
                      "column": 21
                    },
                    "end": {
                      "offset": 5156,
                      "line": 118,
                      "column": 22
                    },
                    "text": "if (_formKey.currentState!.validate()) {\n                      final result =\n                          await ref.read(loginProvider.notifier).emailLogin(\n                                LoginDto(\n                                    email: _emailTextKey.currentState!.value!,\n                                    password:\n                                        _passwordTextKey.currentState!.value!),\n                              );\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.getString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == LoginStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }"
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 4583,
                      "line": 105,
                      "column": 33
                    },
                    "end": {
                      "offset": 4838,
                      "line": 109,
                      "column": 34
                    },
                    "text": "if (result == LoginStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 1662.279421928972,
              "level": "none",
              "comment": "This method has a halstead volume of 1662.279421928972.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 106,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 106 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 5,
              "level": "none",
              "comment": "This method has a nesting level of 5.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 809,
                      "line": 21,
                      "column": 53
                    },
                    "end": {
                      "offset": 5257,
                      "line": 125,
                      "column": 4
                    },
                    "text": "{\n    return BaseScaffold(\n        title: '',\n        transparentAppbar: true,\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),\n          child: Column(\n            children: [\n              Form(\n                  key: _formKey,\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.only(bottom: 8),\n                        child: Text(\n                          'Login',\n                          style: Theme.of(context).textTheme.headline4,\n                        ),\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Email')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _emailTextKey,\n                              decoration: const InputDecoration(\n                                hintText: 'example@email.com',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              validator: emailValidation,\n                              keyboardType: TextInputType.emailAddress,\n                            ),\n                          ),\n                        ],\n                      ),\n                      const Divider(thickness: 1.5),\n                      Row(\n                        children: [\n                          const SizedBox(width: 70, child: Text('Password')),\n                          const SizedBox(width: 8),\n                          Expanded(\n                            child: TextFormField(\n                              key: _passwordTextKey,\n                              // ignore: missing_return\n                              validator: passwordValidation,\n                              obscureText: true,\n                              decoration: const InputDecoration(\n                                hintText: 'password',\n                                enabledBorder: InputBorder.none,\n                                focusedBorder: InputBorder.none,\n                              ),\n                              keyboardType: TextInputType.visiblePassword,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ],\n                  )),\n              const Divider(thickness: 1.5),\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: CautionButton(\n                  buttonText: 'Login',\n                  onPressed: () async {\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      final result =\n                          await ref.read(loginProvider.notifier).emailLogin(\n                                LoginDto(\n                                    email: _emailTextKey.currentState!.value!,\n                                    password:\n                                        _passwordTextKey.currentState!.value!),\n                              );\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.getString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == LoginStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ),\n            ],\n          ),\n        ));\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 3680,
                      "line": 87,
                      "column": 39
                    },
                    "end": {
                      "offset": 5176,
                      "line": 119,
                      "column": 20
                    },
                    "text": "{\n                    FocusScope.of(context).unfocus();\n                    if (_formKey.currentState!.validate()) {\n                      final result =\n                          await ref.read(loginProvider.notifier).emailLogin(\n                                LoginDto(\n                                    email: _emailTextKey.currentState!.value!,\n                                    password:\n                                        _passwordTextKey.currentState!.value!),\n                              );\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.getString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == LoginStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }\n                  }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 3795,
                      "line": 89,
                      "column": 60
                    },
                    "end": {
                      "offset": 5156,
                      "line": 118,
                      "column": 22
                    },
                    "text": "{\n                      final result =\n                          await ref.read(loginProvider.notifier).emailLogin(\n                                LoginDto(\n                                    email: _emailTextKey.currentState!.value!,\n                                    password:\n                                        _passwordTextKey.currentState!.value!),\n                              );\n\n                      await showCupertinoDialog<void>(\n                        context: context,\n                        builder: (context) => CupertinoAlertDialog(\n                          content: Text(result.getString!),\n                          actions: [\n                            CupertinoDialogAction(\n                              onPressed: () {\n                                if (result == LoginStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              },\n                              child: const Text('OK'),\n                            ),\n                          ],\n                        ),\n                      );\n                    }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 4549,
                      "line": 104,
                      "column": 45
                    },
                    "end": {
                      "offset": 4966,
                      "line": 112,
                      "column": 32
                    },
                    "text": "{\n                                if (result == LoginStatus.success) {\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }\n                                Navigator.pop(context);\n                                return;\n                              }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 4618,
                      "line": 105,
                      "column": 68
                    },
                    "end": {
                      "offset": 4838,
                      "line": 109,
                      "column": 34
                    },
                    "text": "{\n                                  Navigator.of(context).pushNamedAndRemoveUntil(\n                                      '/', (route) => false);\n                                  return;\n                                }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 101,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 101 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 811,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 811,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 836,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 836,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 855,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 855,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 888,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 888,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 926,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 926,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1003,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 1003,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1028,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 1028,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1052,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1052,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1072,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1072,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1105,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1105,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1138,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1138,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1170,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1170,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1201,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1201,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1268,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1268,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1305,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1305,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1340,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1340,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1412,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1412,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1439,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1439,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1464,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1464,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1517,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1517,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1544,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1544,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1580,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1580,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1655,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1655,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1707,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1707,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1743,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1743,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1793,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1793,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1843,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1843,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1908,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1908,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1971,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1971,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2036,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 2036,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2101,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 2101,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2134,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 2134,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2192,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 2192,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2264,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 2264,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2295,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 2295,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2324,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 2324,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2351,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 2351,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2376,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2376,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2429,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 2429,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2456,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2456,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2492,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2492,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2570,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2570,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2622,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 2622,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2658,
                      "line": 65,
                      "column": 0
                    },
                    "end": {
                      "offset": 2658,
                      "line": 65,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2708,
                      "line": 66,
                      "column": 0
                    },
                    "end": {
                      "offset": 2708,
                      "line": 66,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2817,
                      "line": 68,
                      "column": 0
                    },
                    "end": {
                      "offset": 2817,
                      "line": 68,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2878,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 2878,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2927,
                      "line": 70,
                      "column": 0
                    },
                    "end": {
                      "offset": 2927,
                      "line": 70,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2992,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 2992,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3046,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 3046,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3111,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 3111,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3176,
                      "line": 74,
                      "column": 0
                    },
                    "end": {
                      "offset": 3176,
                      "line": 74,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3209,
                      "line": 75,
                      "column": 0
                    },
                    "end": {
                      "offset": 3209,
                      "line": 75,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3284,
                      "line": 76,
                      "column": 0
                    },
                    "end": {
                      "offset": 3284,
                      "line": 76,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3315,
                      "line": 77,
                      "column": 0
                    },
                    "end": {
                      "offset": 3315,
                      "line": 77,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3344,
                      "line": 78,
                      "column": 0
                    },
                    "end": {
                      "offset": 3344,
                      "line": 78,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3371,
                      "line": 79,
                      "column": 0
                    },
                    "end": {
                      "offset": 3371,
                      "line": 79,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3396,
                      "line": 80,
                      "column": 0
                    },
                    "end": {
                      "offset": 3396,
                      "line": 80,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3419,
                      "line": 81,
                      "column": 0
                    },
                    "end": {
                      "offset": 3419,
                      "line": 81,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3441,
                      "line": 82,
                      "column": 0
                    },
                    "end": {
                      "offset": 3441,
                      "line": 82,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3486,
                      "line": 83,
                      "column": 0
                    },
                    "end": {
                      "offset": 3486,
                      "line": 83,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3509,
                      "line": 84,
                      "column": 0
                    },
                    "end": {
                      "offset": 3509,
                      "line": 84,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3565,
                      "line": 85,
                      "column": 0
                    },
                    "end": {
                      "offset": 3565,
                      "line": 85,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3603,
                      "line": 86,
                      "column": 0
                    },
                    "end": {
                      "offset": 3603,
                      "line": 86,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3642,
                      "line": 87,
                      "column": 0
                    },
                    "end": {
                      "offset": 3642,
                      "line": 87,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3682,
                      "line": 88,
                      "column": 0
                    },
                    "end": {
                      "offset": 3682,
                      "line": 88,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3736,
                      "line": 89,
                      "column": 0
                    },
                    "end": {
                      "offset": 3736,
                      "line": 89,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3797,
                      "line": 90,
                      "column": 0
                    },
                    "end": {
                      "offset": 3797,
                      "line": 90,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3834,
                      "line": 91,
                      "column": 0
                    },
                    "end": {
                      "offset": 3834,
                      "line": 91,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3911,
                      "line": 92,
                      "column": 0
                    },
                    "end": {
                      "offset": 3911,
                      "line": 92,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3953,
                      "line": 93,
                      "column": 0
                    },
                    "end": {
                      "offset": 3953,
                      "line": 93,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4032,
                      "line": 94,
                      "column": 0
                    },
                    "end": {
                      "offset": 4032,
                      "line": 94,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4078,
                      "line": 95,
                      "column": 0
                    },
                    "end": {
                      "offset": 4078,
                      "line": 95,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4158,
                      "line": 96,
                      "column": 0
                    },
                    "end": {
                      "offset": 4158,
                      "line": 96,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4192,
                      "line": 98,
                      "column": 0
                    },
                    "end": {
                      "offset": 4192,
                      "line": 98,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4247,
                      "line": 99,
                      "column": 0
                    },
                    "end": {
                      "offset": 4247,
                      "line": 99,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4289,
                      "line": 100,
                      "column": 0
                    },
                    "end": {
                      "offset": 4289,
                      "line": 100,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4357,
                      "line": 101,
                      "column": 0
                    },
                    "end": {
                      "offset": 4357,
                      "line": 101,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4417,
                      "line": 102,
                      "column": 0
                    },
                    "end": {
                      "offset": 4417,
                      "line": 102,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4454,
                      "line": 103,
                      "column": 0
                    },
                    "end": {
                      "offset": 4454,
                      "line": 103,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4505,
                      "line": 104,
                      "column": 0
                    },
                    "end": {
                      "offset": 4505,
                      "line": 104,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4551,
                      "line": 105,
                      "column": 0
                    },
                    "end": {
                      "offset": 4551,
                      "line": 105,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4620,
                      "line": 106,
                      "column": 0
                    },
                    "end": {
                      "offset": 4620,
                      "line": 106,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4701,
                      "line": 107,
                      "column": 0
                    },
                    "end": {
                      "offset": 4701,
                      "line": 107,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4763,
                      "line": 108,
                      "column": 0
                    },
                    "end": {
                      "offset": 4763,
                      "line": 108,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4805,
                      "line": 109,
                      "column": 0
                    },
                    "end": {
                      "offset": 4805,
                      "line": 109,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4839,
                      "line": 110,
                      "column": 0
                    },
                    "end": {
                      "offset": 4839,
                      "line": 110,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4895,
                      "line": 111,
                      "column": 0
                    },
                    "end": {
                      "offset": 4895,
                      "line": 111,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4935,
                      "line": 112,
                      "column": 0
                    },
                    "end": {
                      "offset": 4935,
                      "line": 112,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4968,
                      "line": 113,
                      "column": 0
                    },
                    "end": {
                      "offset": 4968,
                      "line": 113,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5023,
                      "line": 114,
                      "column": 0
                    },
                    "end": {
                      "offset": 5023,
                      "line": 114,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5054,
                      "line": 115,
                      "column": 0
                    },
                    "end": {
                      "offset": 5054,
                      "line": 115,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5083,
                      "line": 116,
                      "column": 0
                    },
                    "end": {
                      "offset": 5083,
                      "line": 116,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5110,
                      "line": 117,
                      "column": 0
                    },
                    "end": {
                      "offset": 5110,
                      "line": 117,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5135,
                      "line": 118,
                      "column": 0
                    },
                    "end": {
                      "offset": 5135,
                      "line": 118,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5157,
                      "line": 119,
                      "column": 0
                    },
                    "end": {
                      "offset": 5157,
                      "line": 119,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5178,
                      "line": 120,
                      "column": 0
                    },
                    "end": {
                      "offset": 5178,
                      "line": 120,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5197,
                      "line": 121,
                      "column": 0
                    },
                    "end": {
                      "offset": 5197,
                      "line": 121,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5214,
                      "line": 122,
                      "column": 0
                    },
                    "end": {
                      "offset": 5214,
                      "line": 122,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5229,
                      "line": 123,
                      "column": 0
                    },
                    "end": {
                      "offset": 5229,
                      "line": 123,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5242,
                      "line": 124,
                      "column": 0
                    },
                    "end": {
                      "offset": 5242,
                      "line": 124,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 34,
              "level": "none",
              "comment": "This method has 34 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/loading_view.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "LoadingView": {
          "codeSpan": {
            "start": {
              "offset": 41,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 267,
              "line": 12,
              "column": 2
            },
            "text": "class LoadingView extends StatelessWidget {\n  const LoadingView({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return const Center(\n      child: CircularProgressIndicator(),\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor LoadingView increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 87,
                      "line": 4,
                      "column": 3
                    },
                    "end": {
                      "offset": 135,
                      "line": 4,
                      "column": 51
                    },
                    "text": "const LoadingView({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 151,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 265,
                      "line": 11,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return const Center(\n      child: CircularProgressIndicator(),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor LoadingView decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 87,
                      "line": 4,
                      "column": 3
                    },
                    "end": {
                      "offset": 135,
                      "line": 4,
                      "column": 51
                    },
                    "text": "const LoadingView({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 151,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 265,
                      "line": 11,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return const Center(\n      child: CircularProgressIndicator(),\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "LoadingView.LoadingView": {
          "codeSpan": {
            "start": {
              "offset": 87,
              "line": 4,
              "column": 3
            },
            "end": {
              "offset": 135,
              "line": 4,
              "column": 51
            },
            "text": "const LoadingView({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "LoadingView.build": {
          "codeSpan": {
            "start": {
              "offset": 151,
              "line": 7,
              "column": 3
            },
            "end": {
              "offset": 265,
              "line": 11,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\n    return const Center(\n      child: CircularProgressIndicator(),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 4.754887502163469,
              "level": "none",
              "comment": "This method has a halstead volume of 4.754887502163469.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 6 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 186,
                      "line": 7,
                      "column": 38
                    },
                    "end": {
                      "offset": 265,
                      "line": 11,
                      "column": 4
                    },
                    "text": "{\n    return const Center(\n      child: CircularProgressIndicator(),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 3 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 188,
                      "line": 8,
                      "column": 0
                    },
                    "end": {
                      "offset": 188,
                      "line": 8,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 213,
                      "line": 9,
                      "column": 0
                    },
                    "end": {
                      "offset": 213,
                      "line": 9,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 255,
                      "line": 10,
                      "column": 0
                    },
                    "end": {
                      "offset": 255,
                      "line": 10,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 85,
              "level": "none",
              "comment": "This method has 85 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/home_page.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "HomePage": {
          "codeSpan": {
            "start": {
              "offset": 458,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 926,
              "line": 24,
              "column": 2
            },
            "text": "class HomePage extends HookConsumerWidget {\r\n  const HomePage({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    return BaseScaffold(\r\n      hasDrawer: true,\r\n      title: 'エレブラ',\r\n      child: ref.watch(updateRequesterProvider).when(\r\n          data: (data) => _HomeView(updateRequestType: data),\r\n          loading: () => const LoadingView(),\r\n          error: (error, _) => ErrorWidget(error)),\r\n    );\r\n  }\r\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor HomePage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 505,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 550,
                      "line": 11,
                      "column": 48
                    },
                    "text": "const HomePage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 569,
                      "line": 14,
                      "column": 3
                    },
                    "end": {
                      "offset": 923,
                      "line": 23,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\r\n    return BaseScaffold(\r\n      hasDrawer: true,\r\n      title: 'エレブラ',\r\n      child: ref.watch(updateRequesterProvider).when(\r\n          data: (data) => _HomeView(updateRequestType: data),\r\n          loading: () => const LoadingView(),\r\n          error: (error, _) => ErrorWidget(error)),\r\n    );\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor HomePage decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 505,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 550,
                      "line": 11,
                      "column": 48
                    },
                    "text": "const HomePage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 569,
                      "line": 14,
                      "column": 3
                    },
                    "end": {
                      "offset": 923,
                      "line": 23,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\r\n    return BaseScaffold(\r\n      hasDrawer: true,\r\n      title: 'エレブラ',\r\n      child: ref.watch(updateRequesterProvider).when(\r\n          data: (data) => _HomeView(updateRequestType: data),\r\n          loading: () => const LoadingView(),\r\n          error: (error, _) => ErrorWidget(error)),\r\n    );\r\n  }"
                  }
                }
              ]
            }
          ]
        },
        "_HomeView": {
          "codeSpan": {
            "start": {
              "offset": 930,
              "line": 26,
              "column": 1
            },
            "end": {
              "offset": 4339,
              "line": 136,
              "column": 2
            },
            "text": "class _HomeView extends StatelessWidget {\r\n  const _HomeView({Key? key, required this.updateRequestType})\r\n      : super(key: key);\r\n\r\n  final UpdateRequestType updateRequestType;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    WidgetsBinding.instance!.addPostFrameCallback((_) {\r\n      if (updateRequestType != UpdateRequestType.not) {\r\n        // 新しいアプリバージョンがある場合はダイアログを表示する\r\n        showDialog<void>(\r\n          context: context,\r\n          barrierDismissible: false,\r\n          builder: (context) {\r\n            return WillPopScope(\r\n              // AndroidのBackボタンで閉じられないようにする\r\n              onWillPop: () async => false,\r\n              child: AlertDialog(\r\n                title: const Text('最新の更新があります。\\nアップデートをお願いします。'),\r\n                actions: [\r\n                  if (updateRequestType == UpdateRequestType.cancelable)\r\n                    TextButton(\r\n                      onPressed: () => Navigator.of(context).pop(),\r\n                      child: const Text('キャンセル'),\r\n                    ),\r\n                  TextButton(\r\n                    onPressed: () {\r\n                      AppReview.storeListing;\r\n                    },\r\n                    child: const Text('アップデート'),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      }\r\n    });\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(horizontal: 16),\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          SizedBox(\r\n            height: 200,\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                        icon: Icons.history_edu,\r\n                        iconTitle: '履歴',\r\n                        onTap: () {\r\n                          navigatorKey.currentState!.pushNamed('/history');\r\n                        })),\r\n                const SizedBox(width: 8),\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                        icon: Icons.login,\r\n                        iconTitle: 'サインアップ',\r\n                        onTap: () {\r\n                          navigatorKey.currentState!.pushNamed('/sign_up');\r\n                        })),\r\n              ],\r\n            ),\r\n          ),\r\n          const SizedBox(height: 8),\r\n          SizedBox(\r\n            height: 200,\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                  icon: Icons.create,\r\n                  iconTitle: '部屋を作成',\r\n                  onTap: () => navigatorKey.currentState!.pushNamed('/create'),\r\n                )),\r\n                const SizedBox(width: 8),\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                  icon: Icons.meeting_room,\r\n                  iconTitle: '部屋に入室',\r\n                  onTap: () => navigatorKey.currentState!.pushNamed('/join'),\r\n                )),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  InkWell _tapIcon(\r\n      {required VoidCallback onTap,\r\n      required String iconTitle,\r\n      required IconData icon}) {\r\n    return InkWell(\r\n      onTap: onTap,\r\n      child: Column(\r\n        children: [\r\n          Icon(\r\n            icon,\r\n            size: 100,\r\n          ),\r\n          Text(iconTitle),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor _HomeView increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 975,
                      "line": 27,
                      "column": 3
                    },
                    "end": {
                      "offset": 1061,
                      "line": 28,
                      "column": 25
                    },
                    "text": "const _HomeView({Key? key, required this.updateRequestType})\r\n      : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1128,
                      "line": 33,
                      "column": 3
                    },
                    "end": {
                      "offset": 3986,
                      "line": 117,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\r\n    WidgetsBinding.instance!.addPostFrameCallback((_) {\r\n      if (updateRequestType != UpdateRequestType.not) {\r\n        // 新しいアプリバージョンがある場合はダイアログを表示する\r\n        showDialog<void>(\r\n          context: context,\r\n          barrierDismissible: false,\r\n          builder: (context) {\r\n            return WillPopScope(\r\n              // AndroidのBackボタンで閉じられないようにする\r\n              onWillPop: () async => false,\r\n              child: AlertDialog(\r\n                title: const Text('最新の更新があります。\\nアップデートをお願いします。'),\r\n                actions: [\r\n                  if (updateRequestType == UpdateRequestType.cancelable)\r\n                    TextButton(\r\n                      onPressed: () => Navigator.of(context).pop(),\r\n                      child: const Text('キャンセル'),\r\n                    ),\r\n                  TextButton(\r\n                    onPressed: () {\r\n                      AppReview.storeListing;\r\n                    },\r\n                    child: const Text('アップデート'),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      }\r\n    });\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(horizontal: 16),\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          SizedBox(\r\n            height: 200,\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                        icon: Icons.history_edu,\r\n                        iconTitle: '履歴',\r\n                        onTap: () {\r\n                          navigatorKey.currentState!.pushNamed('/history');\r\n                        })),\r\n                const SizedBox(width: 8),\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                        icon: Icons.login,\r\n                        iconTitle: 'サインアップ',\r\n                        onTap: () {\r\n                          navigatorKey.currentState!.pushNamed('/sign_up');\r\n                        })),\r\n              ],\r\n            ),\r\n          ),\r\n          const SizedBox(height: 8),\r\n          SizedBox(\r\n            height: 200,\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                  icon: Icons.create,\r\n                  iconTitle: '部屋を作成',\r\n                  onTap: () => navigatorKey.currentState!.pushNamed('/create'),\r\n                )),\r\n                const SizedBox(width: 8),\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                  icon: Icons.meeting_room,\r\n                  iconTitle: '部屋に入室',\r\n                  onTap: () => navigatorKey.currentState!.pushNamed('/join'),\r\n                )),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }"
                  }
                },
                {
                  "message": "method _tapIcon increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 3992,
                      "line": 119,
                      "column": 3
                    },
                    "end": {
                      "offset": 4336,
                      "line": 135,
                      "column": 4
                    },
                    "text": "InkWell _tapIcon(\r\n      {required VoidCallback onTap,\r\n      required String iconTitle,\r\n      required IconData icon}) {\r\n    return InkWell(\r\n      onTap: onTap,\r\n      child: Column(\r\n        children: [\r\n          Icon(\r\n            icon,\r\n            size: 100,\r\n          ),\r\n          Text(iconTitle),\r\n        ],\r\n      ),\r\n    );\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 1,
              "level": "none",
              "comment": "This class has a weight of 1.0.",
              "context": [
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1128,
                      "line": 33,
                      "column": 3
                    },
                    "end": {
                      "offset": 3986,
                      "line": 117,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\r\n    WidgetsBinding.instance!.addPostFrameCallback((_) {\r\n      if (updateRequestType != UpdateRequestType.not) {\r\n        // 新しいアプリバージョンがある場合はダイアログを表示する\r\n        showDialog<void>(\r\n          context: context,\r\n          barrierDismissible: false,\r\n          builder: (context) {\r\n            return WillPopScope(\r\n              // AndroidのBackボタンで閉じられないようにする\r\n              onWillPop: () async => false,\r\n              child: AlertDialog(\r\n                title: const Text('最新の更新があります。\\nアップデートをお願いします。'),\r\n                actions: [\r\n                  if (updateRequestType == UpdateRequestType.cancelable)\r\n                    TextButton(\r\n                      onPressed: () => Navigator.of(context).pop(),\r\n                      child: const Text('キャンセル'),\r\n                    ),\r\n                  TextButton(\r\n                    onPressed: () {\r\n                      AppReview.storeListing;\r\n                    },\r\n                    child: const Text('アップデート'),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      }\r\n    });\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(horizontal: 16),\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          SizedBox(\r\n            height: 200,\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                        icon: Icons.history_edu,\r\n                        iconTitle: '履歴',\r\n                        onTap: () {\r\n                          navigatorKey.currentState!.pushNamed('/history');\r\n                        })),\r\n                const SizedBox(width: 8),\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                        icon: Icons.login,\r\n                        iconTitle: 'サインアップ',\r\n                        onTap: () {\r\n                          navigatorKey.currentState!.pushNamed('/sign_up');\r\n                        })),\r\n              ],\r\n            ),\r\n          ),\r\n          const SizedBox(height: 8),\r\n          SizedBox(\r\n            height: 200,\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                  icon: Icons.create,\r\n                  iconTitle: '部屋を作成',\r\n                  onTap: () => navigatorKey.currentState!.pushNamed('/create'),\r\n                )),\r\n                const SizedBox(width: 8),\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                  icon: Icons.meeting_room,\r\n                  iconTitle: '部屋に入室',\r\n                  onTap: () => navigatorKey.currentState!.pushNamed('/join'),\r\n                )),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "HomePage.HomePage": {
          "codeSpan": {
            "start": {
              "offset": 505,
              "line": 11,
              "column": 3
            },
            "end": {
              "offset": 550,
              "line": 11,
              "column": 48
            },
            "text": "const HomePage({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "HomePage.build": {
          "codeSpan": {
            "start": {
              "offset": 569,
              "line": 14,
              "column": 3
            },
            "end": {
              "offset": 923,
              "line": 23,
              "column": 4
            },
            "text": "Widget build(BuildContext context, WidgetRef ref) {\r\n    return BaseScaffold(\r\n      hasDrawer: true,\r\n      title: 'エレブラ',\r\n      child: ref.watch(updateRequesterProvider).when(\r\n          data: (data) => _HomeView(updateRequestType: data),\r\n          loading: () => const LoadingView(),\r\n          error: (error, _) => ErrorWidget(error)),\r\n    );\r\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 104,
              "level": "none",
              "comment": "This method has a halstead volume of 104.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 11,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 11 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 619,
                      "line": 14,
                      "column": 53
                    },
                    "end": {
                      "offset": 923,
                      "line": 23,
                      "column": 4
                    },
                    "text": "{\r\n    return BaseScaffold(\r\n      hasDrawer: true,\r\n      title: 'エレブラ',\r\n      child: ref.watch(updateRequesterProvider).when(\r\n          data: (data) => _HomeView(updateRequestType: data),\r\n          loading: () => const LoadingView(),\r\n          error: (error, _) => ErrorWidget(error)),\r\n    );\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 8,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 8 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 622,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 622,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 648,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 648,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 672,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 672,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 694,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 694,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 749,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 749,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 812,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 812,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 859,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 859,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 912,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 912,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 67,
              "level": "none",
              "comment": "This method has 67 maintainability index.",
              "context": []
            }
          ]
        },
        "_HomeView._HomeView": {
          "codeSpan": {
            "start": {
              "offset": 975,
              "line": 27,
              "column": 3
            },
            "end": {
              "offset": 1061,
              "line": 28,
              "column": 25
            },
            "text": "const _HomeView({Key? key, required this.updateRequestType})\r\n      : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "_HomeView.build": {
          "codeSpan": {
            "start": {
              "offset": 1128,
              "line": 33,
              "column": 3
            },
            "end": {
              "offset": 3986,
              "line": 117,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\r\n    WidgetsBinding.instance!.addPostFrameCallback((_) {\r\n      if (updateRequestType != UpdateRequestType.not) {\r\n        // 新しいアプリバージョンがある場合はダイアログを表示する\r\n        showDialog<void>(\r\n          context: context,\r\n          barrierDismissible: false,\r\n          builder: (context) {\r\n            return WillPopScope(\r\n              // AndroidのBackボタンで閉じられないようにする\r\n              onWillPop: () async => false,\r\n              child: AlertDialog(\r\n                title: const Text('最新の更新があります。\\nアップデートをお願いします。'),\r\n                actions: [\r\n                  if (updateRequestType == UpdateRequestType.cancelable)\r\n                    TextButton(\r\n                      onPressed: () => Navigator.of(context).pop(),\r\n                      child: const Text('キャンセル'),\r\n                    ),\r\n                  TextButton(\r\n                    onPressed: () {\r\n                      AppReview.storeListing;\r\n                    },\r\n                    child: const Text('アップデート'),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      }\r\n    });\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(horizontal: 16),\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          SizedBox(\r\n            height: 200,\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                        icon: Icons.history_edu,\r\n                        iconTitle: '履歴',\r\n                        onTap: () {\r\n                          navigatorKey.currentState!.pushNamed('/history');\r\n                        })),\r\n                const SizedBox(width: 8),\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                        icon: Icons.login,\r\n                        iconTitle: 'サインアップ',\r\n                        onTap: () {\r\n                          navigatorKey.currentState!.pushNamed('/sign_up');\r\n                        })),\r\n              ],\r\n            ),\r\n          ),\r\n          const SizedBox(height: 8),\r\n          SizedBox(\r\n            height: 200,\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                  icon: Icons.create,\r\n                  iconTitle: '部屋を作成',\r\n                  onTap: () => navigatorKey.currentState!.pushNamed('/create'),\r\n                )),\r\n                const SizedBox(width: 8),\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                  icon: Icons.meeting_room,\r\n                  iconTitle: '部屋に入室',\r\n                  onTap: () => navigatorKey.currentState!.pushNamed('/join'),\r\n                )),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1229,
                      "line": 35,
                      "column": 7
                    },
                    "end": {
                      "offset": 2250,
                      "line": 63,
                      "column": 8
                    },
                    "text": "if (updateRequestType != UpdateRequestType.not) {\r\n        // 新しいアプリバージョンがある場合はダイアログを表示する\r\n        showDialog<void>(\r\n          context: context,\r\n          barrierDismissible: false,\r\n          builder: (context) {\r\n            return WillPopScope(\r\n              // AndroidのBackボタンで閉じられないようにする\r\n              onWillPop: () async => false,\r\n              child: AlertDialog(\r\n                title: const Text('最新の更新があります。\\nアップデートをお願いします。'),\r\n                actions: [\r\n                  if (updateRequestType == UpdateRequestType.cancelable)\r\n                    TextButton(\r\n                      onPressed: () => Navigator.of(context).pop(),\r\n                      child: const Text('キャンセル'),\r\n                    ),\r\n                  TextButton(\r\n                    onPressed: () {\r\n                      AppReview.storeListing;\r\n                    },\r\n                    child: const Text('アップデート'),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 1200.0591820698157,
              "level": "none",
              "comment": "This method has a halstead volume of 1200.0591820698157.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 86,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 86 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 5,
              "level": "none",
              "comment": "This method has a nesting level of 5.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1163,
                      "line": 33,
                      "column": 38
                    },
                    "end": {
                      "offset": 3986,
                      "line": 117,
                      "column": 4
                    },
                    "text": "{\r\n    WidgetsBinding.instance!.addPostFrameCallback((_) {\r\n      if (updateRequestType != UpdateRequestType.not) {\r\n        // 新しいアプリバージョンがある場合はダイアログを表示する\r\n        showDialog<void>(\r\n          context: context,\r\n          barrierDismissible: false,\r\n          builder: (context) {\r\n            return WillPopScope(\r\n              // AndroidのBackボタンで閉じられないようにする\r\n              onWillPop: () async => false,\r\n              child: AlertDialog(\r\n                title: const Text('最新の更新があります。\\nアップデートをお願いします。'),\r\n                actions: [\r\n                  if (updateRequestType == UpdateRequestType.cancelable)\r\n                    TextButton(\r\n                      onPressed: () => Navigator.of(context).pop(),\r\n                      child: const Text('キャンセル'),\r\n                    ),\r\n                  TextButton(\r\n                    onPressed: () {\r\n                      AppReview.storeListing;\r\n                    },\r\n                    child: const Text('アップデート'),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      }\r\n    });\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(horizontal: 16),\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          SizedBox(\r\n            height: 200,\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                        icon: Icons.history_edu,\r\n                        iconTitle: '履歴',\r\n                        onTap: () {\r\n                          navigatorKey.currentState!.pushNamed('/history');\r\n                        })),\r\n                const SizedBox(width: 8),\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                        icon: Icons.login,\r\n                        iconTitle: 'サインアップ',\r\n                        onTap: () {\r\n                          navigatorKey.currentState!.pushNamed('/sign_up');\r\n                        })),\r\n              ],\r\n            ),\r\n          ),\r\n          const SizedBox(height: 8),\r\n          SizedBox(\r\n            height: 200,\r\n            child: Row(\r\n              children: [\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                  icon: Icons.create,\r\n                  iconTitle: '部屋を作成',\r\n                  onTap: () => navigatorKey.currentState!.pushNamed('/create'),\r\n                )),\r\n                const SizedBox(width: 8),\r\n                Expanded(\r\n                    child: _tapIcon(\r\n                  icon: Icons.meeting_room,\r\n                  iconTitle: '部屋に入室',\r\n                  onTap: () => navigatorKey.currentState!.pushNamed('/join'),\r\n                )),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1220,
                      "line": 34,
                      "column": 55
                    },
                    "end": {
                      "offset": 2257,
                      "line": 64,
                      "column": 6
                    },
                    "text": "{\r\n      if (updateRequestType != UpdateRequestType.not) {\r\n        // 新しいアプリバージョンがある場合はダイアログを表示する\r\n        showDialog<void>(\r\n          context: context,\r\n          barrierDismissible: false,\r\n          builder: (context) {\r\n            return WillPopScope(\r\n              // AndroidのBackボタンで閉じられないようにする\r\n              onWillPop: () async => false,\r\n              child: AlertDialog(\r\n                title: const Text('最新の更新があります。\\nアップデートをお願いします。'),\r\n                actions: [\r\n                  if (updateRequestType == UpdateRequestType.cancelable)\r\n                    TextButton(\r\n                      onPressed: () => Navigator.of(context).pop(),\r\n                      child: const Text('キャンセル'),\r\n                    ),\r\n                  TextButton(\r\n                    onPressed: () {\r\n                      AppReview.storeListing;\r\n                    },\r\n                    child: const Text('アップデート'),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      }\r\n    }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1277,
                      "line": 35,
                      "column": 55
                    },
                    "end": {
                      "offset": 2250,
                      "line": 63,
                      "column": 8
                    },
                    "text": "{\r\n        // 新しいアプリバージョンがある場合はダイアログを表示する\r\n        showDialog<void>(\r\n          context: context,\r\n          barrierDismissible: false,\r\n          builder: (context) {\r\n            return WillPopScope(\r\n              // AndroidのBackボタンで閉じられないようにする\r\n              onWillPop: () async => false,\r\n              child: AlertDialog(\r\n                title: const Text('最新の更新があります。\\nアップデートをお願いします。'),\r\n                actions: [\r\n                  if (updateRequestType == UpdateRequestType.cancelable)\r\n                    TextButton(\r\n                      onPressed: () => Navigator.of(context).pop(),\r\n                      child: const Text('キャンセル'),\r\n                    ),\r\n                  TextButton(\r\n                    onPressed: () {\r\n                      AppReview.storeListing;\r\n                    },\r\n                    child: const Text('アップデート'),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1443,
                      "line": 40,
                      "column": 30
                    },
                    "end": {
                      "offset": 2228,
                      "line": 61,
                      "column": 12
                    },
                    "text": "{\r\n            return WillPopScope(\r\n              // AndroidのBackボタンで閉じられないようにする\r\n              onWillPop: () async => false,\r\n              child: AlertDialog(\r\n                title: const Text('最新の更新があります。\\nアップデートをお願いします。'),\r\n                actions: [\r\n                  if (updateRequestType == UpdateRequestType.cancelable)\r\n                    TextButton(\r\n                      onPressed: () => Navigator.of(context).pop(),\r\n                      child: const Text('キャンセル'),\r\n                    ),\r\n                  TextButton(\r\n                    onPressed: () {\r\n                      AppReview.storeListing;\r\n                    },\r\n                    child: const Text('アップデート'),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2017,
                      "line": 53,
                      "column": 35
                    },
                    "end": {
                      "offset": 2088,
                      "line": 55,
                      "column": 22
                    },
                    "text": "{\r\n                      AppReview.storeListing;\r\n                    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 80,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 80 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1166,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1166,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1223,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1223,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1320,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1320,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1347,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1347,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1376,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1376,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1414,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1414,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1446,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1446,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1526,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1526,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1571,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1571,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1606,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1606,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1673,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1673,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1701,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1701,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1775,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1775,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1808,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1808,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1877,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1877,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1928,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1928,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1952,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 1952,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1983,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 1983,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2020,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 2020,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2067,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 2067,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2091,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 2091,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2141,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 2141,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2163,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 2163,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2183,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2183,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2201,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 2201,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2217,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2217,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2231,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2231,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2243,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2243,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2252,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 2252,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2263,
                      "line": 66,
                      "column": 0
                    },
                    "end": {
                      "offset": 2263,
                      "line": 66,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2284,
                      "line": 67,
                      "column": 0
                    },
                    "end": {
                      "offset": 2284,
                      "line": 67,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2344,
                      "line": 68,
                      "column": 0
                    },
                    "end": {
                      "offset": 2344,
                      "line": 68,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2366,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 2366,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2420,
                      "line": 70,
                      "column": 0
                    },
                    "end": {
                      "offset": 2420,
                      "line": 70,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2441,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 2441,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2462,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 2462,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2488,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 2488,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2513,
                      "line": 74,
                      "column": 0
                    },
                    "end": {
                      "offset": 2513,
                      "line": 74,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2540,
                      "line": 75,
                      "column": 0
                    },
                    "end": {
                      "offset": 2540,
                      "line": 75,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2567,
                      "line": 76,
                      "column": 0
                    },
                    "end": {
                      "offset": 2567,
                      "line": 76,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2605,
                      "line": 77,
                      "column": 0
                    },
                    "end": {
                      "offset": 2605,
                      "line": 77,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2655,
                      "line": 78,
                      "column": 0
                    },
                    "end": {
                      "offset": 2655,
                      "line": 78,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2697,
                      "line": 79,
                      "column": 0
                    },
                    "end": {
                      "offset": 2697,
                      "line": 79,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2734,
                      "line": 80,
                      "column": 0
                    },
                    "end": {
                      "offset": 2734,
                      "line": 80,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2811,
                      "line": 81,
                      "column": 0
                    },
                    "end": {
                      "offset": 2811,
                      "line": 81,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2841,
                      "line": 82,
                      "column": 0
                    },
                    "end": {
                      "offset": 2841,
                      "line": 82,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2884,
                      "line": 83,
                      "column": 0
                    },
                    "end": {
                      "offset": 2884,
                      "line": 83,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2911,
                      "line": 84,
                      "column": 0
                    },
                    "end": {
                      "offset": 2911,
                      "line": 84,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2949,
                      "line": 85,
                      "column": 0
                    },
                    "end": {
                      "offset": 2949,
                      "line": 85,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2993,
                      "line": 86,
                      "column": 0
                    },
                    "end": {
                      "offset": 2993,
                      "line": 86,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3039,
                      "line": 87,
                      "column": 0
                    },
                    "end": {
                      "offset": 3039,
                      "line": 87,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3076,
                      "line": 88,
                      "column": 0
                    },
                    "end": {
                      "offset": 3076,
                      "line": 88,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3153,
                      "line": 89,
                      "column": 0
                    },
                    "end": {
                      "offset": 3153,
                      "line": 89,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3183,
                      "line": 90,
                      "column": 0
                    },
                    "end": {
                      "offset": 3183,
                      "line": 90,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3201,
                      "line": 91,
                      "column": 0
                    },
                    "end": {
                      "offset": 3201,
                      "line": 91,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3217,
                      "line": 92,
                      "column": 0
                    },
                    "end": {
                      "offset": 3217,
                      "line": 92,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3231,
                      "line": 93,
                      "column": 0
                    },
                    "end": {
                      "offset": 3231,
                      "line": 93,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3269,
                      "line": 94,
                      "column": 0
                    },
                    "end": {
                      "offset": 3269,
                      "line": 94,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3290,
                      "line": 95,
                      "column": 0
                    },
                    "end": {
                      "offset": 3290,
                      "line": 95,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3316,
                      "line": 96,
                      "column": 0
                    },
                    "end": {
                      "offset": 3316,
                      "line": 96,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3341,
                      "line": 97,
                      "column": 0
                    },
                    "end": {
                      "offset": 3341,
                      "line": 97,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3368,
                      "line": 98,
                      "column": 0
                    },
                    "end": {
                      "offset": 3368,
                      "line": 98,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3395,
                      "line": 99,
                      "column": 0
                    },
                    "end": {
                      "offset": 3395,
                      "line": 99,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3433,
                      "line": 100,
                      "column": 0
                    },
                    "end": {
                      "offset": 3433,
                      "line": 100,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3472,
                      "line": 101,
                      "column": 0
                    },
                    "end": {
                      "offset": 3472,
                      "line": 101,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3511,
                      "line": 102,
                      "column": 0
                    },
                    "end": {
                      "offset": 3511,
                      "line": 102,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3592,
                      "line": 103,
                      "column": 0
                    },
                    "end": {
                      "offset": 3592,
                      "line": 103,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3613,
                      "line": 104,
                      "column": 0
                    },
                    "end": {
                      "offset": 3613,
                      "line": 104,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3656,
                      "line": 105,
                      "column": 0
                    },
                    "end": {
                      "offset": 3656,
                      "line": 105,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3683,
                      "line": 106,
                      "column": 0
                    },
                    "end": {
                      "offset": 3683,
                      "line": 106,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3721,
                      "line": 107,
                      "column": 0
                    },
                    "end": {
                      "offset": 3721,
                      "line": 107,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3766,
                      "line": 108,
                      "column": 0
                    },
                    "end": {
                      "offset": 3766,
                      "line": 108,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3805,
                      "line": 109,
                      "column": 0
                    },
                    "end": {
                      "offset": 3805,
                      "line": 109,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3884,
                      "line": 110,
                      "column": 0
                    },
                    "end": {
                      "offset": 3884,
                      "line": 110,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3905,
                      "line": 111,
                      "column": 0
                    },
                    "end": {
                      "offset": 3905,
                      "line": 111,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3923,
                      "line": 112,
                      "column": 0
                    },
                    "end": {
                      "offset": 3923,
                      "line": 112,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3939,
                      "line": 113,
                      "column": 0
                    },
                    "end": {
                      "offset": 3939,
                      "line": 113,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3953,
                      "line": 114,
                      "column": 0
                    },
                    "end": {
                      "offset": 3953,
                      "line": 114,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3965,
                      "line": 115,
                      "column": 0
                    },
                    "end": {
                      "offset": 3965,
                      "line": 115,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3975,
                      "line": 116,
                      "column": 0
                    },
                    "end": {
                      "offset": 3975,
                      "line": 116,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 37,
              "level": "none",
              "comment": "This method has 37 maintainability index.",
              "context": []
            }
          ]
        },
        "_HomeView._tapIcon": {
          "codeSpan": {
            "start": {
              "offset": 3992,
              "line": 119,
              "column": 3
            },
            "end": {
              "offset": 4336,
              "line": 135,
              "column": 4
            },
            "text": "InkWell _tapIcon(\r\n      {required VoidCallback onTap,\r\n      required String iconTitle,\r\n      required IconData icon}) {\r\n    return InkWell(\r\n      onTap: onTap,\r\n      child: Column(\r\n        children: [\r\n          Icon(\r\n            icon,\r\n            size: 100,\r\n          ),\r\n          Text(iconTitle),\r\n        ],\r\n      ),\r\n    );\r\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 36.541209043760986,
              "level": "none",
              "comment": "This method has a halstead volume of 36.541209043760986.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 17,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 17 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 4113,
                      "line": 122,
                      "column": 32
                    },
                    "end": {
                      "offset": 4336,
                      "line": 135,
                      "column": 4
                    },
                    "text": "{\r\n    return InkWell(\r\n      onTap: onTap,\r\n      child: Column(\r\n        children: [\r\n          Icon(\r\n            icon,\r\n            size: 100,\r\n          ),\r\n          Text(iconTitle),\r\n        ],\r\n      ),\r\n    );\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 3,
              "level": "none",
              "comment": "This method has 3 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 12 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4116,
                      "line": 123,
                      "column": 0
                    },
                    "end": {
                      "offset": 4116,
                      "line": 123,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4137,
                      "line": 124,
                      "column": 0
                    },
                    "end": {
                      "offset": 4137,
                      "line": 124,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4158,
                      "line": 125,
                      "column": 0
                    },
                    "end": {
                      "offset": 4158,
                      "line": 125,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4180,
                      "line": 126,
                      "column": 0
                    },
                    "end": {
                      "offset": 4180,
                      "line": 126,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4201,
                      "line": 127,
                      "column": 0
                    },
                    "end": {
                      "offset": 4201,
                      "line": 127,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4218,
                      "line": 128,
                      "column": 0
                    },
                    "end": {
                      "offset": 4218,
                      "line": 128,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4237,
                      "line": 129,
                      "column": 0
                    },
                    "end": {
                      "offset": 4237,
                      "line": 129,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4261,
                      "line": 130,
                      "column": 0
                    },
                    "end": {
                      "offset": 4261,
                      "line": 130,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4275,
                      "line": 131,
                      "column": 0
                    },
                    "end": {
                      "offset": 4275,
                      "line": 131,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4303,
                      "line": 132,
                      "column": 0
                    },
                    "end": {
                      "offset": 4303,
                      "line": 132,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4315,
                      "line": 133,
                      "column": 0
                    },
                    "end": {
                      "offset": 4315,
                      "line": 133,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4325,
                      "line": 134,
                      "column": 0
                    },
                    "end": {
                      "offset": 4325,
                      "line": 134,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 66,
              "level": "none",
              "comment": "This method has 66 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/qr_scan_page.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "QRScanPage": {
          "codeSpan": {
            "start": {
              "offset": 175,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 378,
              "line": 14,
              "column": 2
            },
            "text": "class QRScanPage extends StatefulWidget {\n  const QRScanPage({Key? key}) : super(key: key);\n\n  static const route = '/qr_scan_page';\n\n  @override\n  _QRScanPageState createState() => _QRScanPageState();\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor QRScanPage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 219,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 266,
                      "line": 8,
                      "column": 50
                    },
                    "text": "const QRScanPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method createState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 323,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 376,
                      "line": 13,
                      "column": 56
                    },
                    "text": "_QRScanPageState createState() => _QRScanPageState();"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor QRScanPage decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 219,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 266,
                      "line": 8,
                      "column": 50
                    },
                    "text": "const QRScanPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method createState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 323,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 376,
                      "line": 13,
                      "column": 56
                    },
                    "text": "_QRScanPageState createState() => _QRScanPageState();"
                  }
                }
              ]
            }
          ]
        },
        "_QRScanPageState": {
          "codeSpan": {
            "start": {
              "offset": 380,
              "line": 16,
              "column": 1
            },
            "end": {
              "offset": 1612,
              "line": 68,
              "column": 2
            },
            "text": "class _QRScanPageState extends State<QRScanPage> {\n  final qrKey = GlobalKey();\n  bool scanned = false;\n  QRViewController? _qrController;\n\n  @override\n  void reassemble() {\n    super.reassemble();\n    if (Platform.isAndroid) {\n      _qrController?.pauseCamera();\n    } else if (Platform.isIOS) {\n      _qrController?.resumeCamera();\n    }\n  }\n\n  @override\n  void dispose() {\n    _qrController?.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return BaseScaffold(\n      title: 'QRスキャン',\n      child: QRView(\n        key: qrKey,\n        onQRViewCreated: _onQRViewCreated,\n        overlay: QrScannerOverlayShape(\n          borderColor: Colors.green,\n          borderRadius: 16,\n          borderLength: 24,\n          borderWidth: 8,\n          // cutOutSize: scanArea,\n        ),\n      ),\n    );\n  }\n\n  void _onQRViewCreated(QRViewController qrController) {\n    setState(() {\n      _qrController = qrController;\n    });\n    // QRを読み込みをlistenする\n    qrController.scannedDataStream.listen((scanData) {\n      if (scanData.code != null && scanData.code!.isNotEmpty && !scanned) {\n        scanned = true;\n        setState(() {});\n        Navigator.pop(context, scanData.code);\n      }\n    });\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 4,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 4 methods.",
              "context": [
                {
                  "message": "method reassemble increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 534,
                      "line": 22,
                      "column": 3
                    },
                    "end": {
                      "offset": 723,
                      "line": 29,
                      "column": 4
                    },
                    "text": "void reassemble() {\n    super.reassemble();\n    if (Platform.isAndroid) {\n      _qrController?.pauseCamera();\n    } else if (Platform.isIOS) {\n      _qrController?.resumeCamera();\n    }\n  }"
                  }
                },
                {
                  "message": "method dispose increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 739,
                      "line": 32,
                      "column": 3
                    },
                    "end": {
                      "offset": 810,
                      "line": 35,
                      "column": 4
                    },
                    "text": "void dispose() {\n    _qrController?.dispose();\n    super.dispose();\n  }"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 826,
                      "line": 38,
                      "column": 3
                    },
                    "end": {
                      "offset": 1219,
                      "line": 53,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return BaseScaffold(\n      title: 'QRスキャン',\n      child: QRView(\n        key: qrKey,\n        onQRViewCreated: _onQRViewCreated,\n        overlay: QrScannerOverlayShape(\n          borderColor: Colors.green,\n          borderRadius: 16,\n          borderLength: 24,\n          borderWidth: 8,\n          // cutOutSize: scanArea,\n        ),\n      ),\n    );\n  }"
                  }
                },
                {
                  "message": "method _onQRViewCreated increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1223,
                      "line": 55,
                      "column": 3
                    },
                    "end": {
                      "offset": 1610,
                      "line": 67,
                      "column": 4
                    },
                    "text": "void _onQRViewCreated(QRViewController qrController) {\n    setState(() {\n      _qrController = qrController;\n    });\n    // QRを読み込みをlistenする\n    qrController.scannedDataStream.listen((scanData) {\n      if (scanData.code != null && scanData.code!.isNotEmpty && !scanned) {\n        scanned = true;\n        setState(() {});\n        Navigator.pop(context, scanData.code);\n      }\n    });\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 1,
              "level": "none",
              "comment": "This class has a weight of 1.0.",
              "context": [
                {
                  "message": "functional method reassemble increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 534,
                      "line": 22,
                      "column": 3
                    },
                    "end": {
                      "offset": 723,
                      "line": 29,
                      "column": 4
                    },
                    "text": "void reassemble() {\n    super.reassemble();\n    if (Platform.isAndroid) {\n      _qrController?.pauseCamera();\n    } else if (Platform.isIOS) {\n      _qrController?.resumeCamera();\n    }\n  }"
                  }
                },
                {
                  "message": "functional method dispose increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 739,
                      "line": 32,
                      "column": 3
                    },
                    "end": {
                      "offset": 810,
                      "line": 35,
                      "column": 4
                    },
                    "text": "void dispose() {\n    _qrController?.dispose();\n    super.dispose();\n  }"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 826,
                      "line": 38,
                      "column": 3
                    },
                    "end": {
                      "offset": 1219,
                      "line": 53,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return BaseScaffold(\n      title: 'QRスキャン',\n      child: QRView(\n        key: qrKey,\n        onQRViewCreated: _onQRViewCreated,\n        overlay: QrScannerOverlayShape(\n          borderColor: Colors.green,\n          borderRadius: 16,\n          borderLength: 24,\n          borderWidth: 8,\n          // cutOutSize: scanArea,\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "QRScanPage.QRScanPage": {
          "codeSpan": {
            "start": {
              "offset": 219,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 266,
              "line": 8,
              "column": 50
            },
            "text": "const QRScanPage({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "QRScanPage.createState": {
          "codeSpan": {
            "start": {
              "offset": 323,
              "line": 13,
              "column": 3
            },
            "end": {
              "offset": 376,
              "line": 13,
              "column": 56
            },
            "text": "_QRScanPageState createState() => _QRScanPageState();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This method has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This method has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This method has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 321,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 321,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This method has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "_QRScanPageState.reassemble": {
          "codeSpan": {
            "start": {
              "offset": 534,
              "line": 22,
              "column": 3
            },
            "end": {
              "offset": 723,
              "line": 29,
              "column": 4
            },
            "text": "void reassemble() {\n    super.reassemble();\n    if (Platform.isAndroid) {\n      _qrController?.pauseCamera();\n    } else if (Platform.isIOS) {\n      _qrController?.resumeCamera();\n    }\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 5,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 5.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 582,
                      "line": 24,
                      "column": 5
                    },
                    "end": {
                      "offset": 719,
                      "line": 28,
                      "column": 6
                    },
                    "text": "if (Platform.isAndroid) {\n      _qrController?.pauseCamera();\n    } else if (Platform.isIOS) {\n      _qrController?.resumeCamera();\n    }"
                  }
                },
                {
                  "message": "Operator ?. increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 627,
                      "line": 25,
                      "column": 20
                    },
                    "end": {
                      "offset": 629,
                      "line": 25,
                      "column": 22
                    },
                    "text": "?."
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 655,
                      "line": 26,
                      "column": 12
                    },
                    "end": {
                      "offset": 719,
                      "line": 28,
                      "column": 6
                    },
                    "text": "if (Platform.isIOS) {\n      _qrController?.resumeCamera();\n    }"
                  }
                },
                {
                  "message": "Operator ?. increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 696,
                      "line": 27,
                      "column": 20
                    },
                    "end": {
                      "offset": 698,
                      "line": 27,
                      "column": 22
                    },
                    "text": "?."
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 33,
              "level": "none",
              "comment": "This method has a halstead volume of 33.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 9 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 552,
                      "line": 22,
                      "column": 21
                    },
                    "end": {
                      "offset": 723,
                      "line": 29,
                      "column": 4
                    },
                    "text": "{\n    super.reassemble();\n    if (Platform.isAndroid) {\n      _qrController?.pauseCamera();\n    } else if (Platform.isIOS) {\n      _qrController?.resumeCamera();\n    }\n  }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 606,
                      "line": 24,
                      "column": 29
                    },
                    "end": {
                      "offset": 649,
                      "line": 26,
                      "column": 6
                    },
                    "text": "{\n      _qrController?.pauseCamera();\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 6 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 554,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 554,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 578,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 578,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 608,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 608,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 644,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 644,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 677,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 677,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 714,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 714,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 72,
              "level": "none",
              "comment": "This method has 72 maintainability index.",
              "context": []
            }
          ]
        },
        "_QRScanPageState.dispose": {
          "codeSpan": {
            "start": {
              "offset": 739,
              "line": 32,
              "column": 3
            },
            "end": {
              "offset": 810,
              "line": 35,
              "column": 4
            },
            "text": "void dispose() {\n    _qrController?.dispose();\n    super.dispose();\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "Operator ?. increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 773,
                      "line": 33,
                      "column": 18
                    },
                    "end": {
                      "offset": 775,
                      "line": 33,
                      "column": 20
                    },
                    "text": "?."
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 6.339850002884625,
              "level": "none",
              "comment": "This method has a halstead volume of 6.339850002884625.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 754,
                      "line": 32,
                      "column": 18
                    },
                    "end": {
                      "offset": 810,
                      "line": 35,
                      "column": 4
                    },
                    "text": "{\n    _qrController?.dispose();\n    super.dispose();\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 756,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 756,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 786,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 786,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 88,
              "level": "none",
              "comment": "This method has 88 maintainability index.",
              "context": []
            }
          ]
        },
        "_QRScanPageState.build": {
          "codeSpan": {
            "start": {
              "offset": 826,
              "line": 38,
              "column": 3
            },
            "end": {
              "offset": 1219,
              "line": 53,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\n    return BaseScaffold(\n      title: 'QRスキャン',\n      child: QRView(\n        key: qrKey,\n        onQRViewCreated: _onQRViewCreated,\n        overlay: QrScannerOverlayShape(\n          borderColor: Colors.green,\n          borderRadius: 16,\n          borderLength: 24,\n          borderWidth: 8,\n          // cutOutSize: scanArea,\n        ),\n      ),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 64,
              "level": "none",
              "comment": "This method has a halstead volume of 64.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 17,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 17 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 861,
                      "line": 38,
                      "column": 38
                    },
                    "end": {
                      "offset": 1219,
                      "line": 53,
                      "column": 4
                    },
                    "text": "{\n    return BaseScaffold(\n      title: 'QRスキャン',\n      child: QRView(\n        key: qrKey,\n        onQRViewCreated: _onQRViewCreated,\n        overlay: QrScannerOverlayShape(\n          borderColor: Colors.green,\n          borderRadius: 16,\n          borderLength: 24,\n          borderWidth: 8,\n          // cutOutSize: scanArea,\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 13,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 13 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 863,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 863,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 888,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 888,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 911,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 911,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 932,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 932,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 952,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 952,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 995,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 995,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1035,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1035,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1072,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1072,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1100,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1100,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1128,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1128,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1189,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1189,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1200,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1200,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1209,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 1209,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 63,
              "level": "none",
              "comment": "This method has 63 maintainability index.",
              "context": []
            }
          ]
        },
        "_QRScanPageState._onQRViewCreated": {
          "codeSpan": {
            "start": {
              "offset": 1223,
              "line": 55,
              "column": 3
            },
            "end": {
              "offset": 1610,
              "line": 67,
              "column": 4
            },
            "text": "void _onQRViewCreated(QRViewController qrController) {\n    setState(() {\n      _qrController = qrController;\n    });\n    // QRを読み込みをlistenする\n    qrController.scannedDataStream.listen((scanData) {\n      if (scanData.code != null && scanData.code!.isNotEmpty && !scanned) {\n        scanned = true;\n        setState(() {});\n        Navigator.pop(context, scanData.code);\n      }\n    });\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 4,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 4.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1425,
                      "line": 61,
                      "column": 7
                    },
                    "end": {
                      "offset": 1598,
                      "line": 65,
                      "column": 8
                    },
                    "text": "if (scanData.code != null && scanData.code!.isNotEmpty && !scanned) {\n        scanned = true;\n        setState(() {});\n        Navigator.pop(context, scanData.code);\n      }"
                  }
                },
                {
                  "message": "Operator && increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1451,
                      "line": 61,
                      "column": 33
                    },
                    "end": {
                      "offset": 1453,
                      "line": 61,
                      "column": 35
                    },
                    "text": "&&"
                  }
                },
                {
                  "message": "Operator && increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1480,
                      "line": 61,
                      "column": 62
                    },
                    "end": {
                      "offset": 1482,
                      "line": 61,
                      "column": 64
                    },
                    "text": "&&"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 196,
              "level": "none",
              "comment": "This method has a halstead volume of 196.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 13,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 13 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 4,
              "level": "none",
              "comment": "This method has a nesting level of 4.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1276,
                      "line": 55,
                      "column": 56
                    },
                    "end": {
                      "offset": 1610,
                      "line": 67,
                      "column": 4
                    },
                    "text": "{\n    setState(() {\n      _qrController = qrController;\n    });\n    // QRを読み込みをlistenする\n    qrController.scannedDataStream.listen((scanData) {\n      if (scanData.code != null && scanData.code!.isNotEmpty && !scanned) {\n        scanned = true;\n        setState(() {});\n        Navigator.pop(context, scanData.code);\n      }\n    });\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1417,
                      "line": 60,
                      "column": 54
                    },
                    "end": {
                      "offset": 1604,
                      "line": 66,
                      "column": 6
                    },
                    "text": "{\n      if (scanData.code != null && scanData.code!.isNotEmpty && !scanned) {\n        scanned = true;\n        setState(() {});\n        Navigator.pop(context, scanData.code);\n      }\n    }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1493,
                      "line": 61,
                      "column": 75
                    },
                    "end": {
                      "offset": 1598,
                      "line": 65,
                      "column": 8
                    },
                    "text": "{\n        scanned = true;\n        setState(() {});\n        Navigator.pop(context, scanData.code);\n      }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1539,
                      "line": 63,
                      "column": 21
                    },
                    "end": {
                      "offset": 1541,
                      "line": 63,
                      "column": 23
                    },
                    "text": "{}"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 10,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 10 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1278,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 1278,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1296,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 1296,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1332,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 1332,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1364,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 1364,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1419,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 1419,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1495,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 1495,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1519,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 1519,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1544,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 1544,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1591,
                      "line": 65,
                      "column": 0
                    },
                    "end": {
                      "offset": 1591,
                      "line": 65,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1599,
                      "line": 66,
                      "column": 0
                    },
                    "end": {
                      "offset": 1599,
                      "line": 66,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 62,
              "level": "none",
              "comment": "This method has 62 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/join_chat_room_page.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "JoinChatRoomPage": {
          "codeSpan": {
            "start": {
              "offset": 830,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 5628,
              "line": 147,
              "column": 2
            },
            "text": "class JoinChatRoomPage extends HookConsumerWidget {\n  JoinChatRoomPage({Key? key}) : super(key: key);\n\n  final _formKey = GlobalKey<FormState>();\n  final _roomIDKey = GlobalKey<FormFieldState<String>>();\n  final _userNameTextKey = GlobalKey<FormFieldState<String>>();\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final visible = ref.watch(errorMessageProvider.state);\n\n    ref.watch(nickNameProvider).when(\n          data: (data) => _userNameTextKey.currentState!.didChange(data),\n          loading: () => '',\n          error: (_, __) => '',\n        );\n\n    return BaseScaffold(\n      title: 'ルームに参加',\n      transparentAppbar: true,\n      floatingActionButton: FloatingActionButton(\n        onPressed: () async {\n          if (await Permission.camera.request().isGranted) {\n            final code = await Navigator.pushNamed(context, QRScanPage.route)\n                .then<String?>((value) => value.toString());\n            if (code!.isNotEmpty) {\n              _roomIDKey.currentState!.didChange(code);\n            }\n          } else {\n            final result = await showOkCancelAlertDialog(\n              context: context,\n              title: 'カメラ設定',\n              okLabel: '設定',\n              message: 'QRコードを読み込むにはアプリ設定のカメラの権限をONにしてください。',\n            );\n\n            if (result == OkCancelResult.ok) {\n              await openAppSettings();\n              return;\n            }\n          }\n        },\n        child: const Icon(Icons.qr_code),\n      ),\n      child: Padding(\n        padding: const EdgeInsets.all(horizontalPadding),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('Room ID')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        TextFormField(\n                          key: _roomIDKey,\n                          decoration:\n                              const InputDecoration(hintText: 'Room ID'),\n                          validator: agendaNameValidation,\n                        ),\n                        Visibility(\n                            visible: visible.state,\n                            child: Column(\n                              children: [\n                                const SizedBox(height: 8),\n                                Text(\n                                  '存在しないIDです',\n                                  style: InputDecorationTheme(\n                                    errorStyle: TextStyle(\n                                        color: Theme.of(context).errorColor,\n                                        fontSize: Theme.of(context)\n                                            .textTheme\n                                            .caption!\n                                            .fontSize),\n                                  ).errorStyle,\n                                ),\n                              ],\n                            )),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('名前')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      initialValue: '',\n                      key: _userNameTextKey,\n                      validator: nameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              const LargeSpaceBox(),\n              PrimaryButton(\n                buttonText: '会議に参加する',\n                onPressed: () async {\n                  visible.state = false;\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).joinRoom(\n                        roomID: _roomIDKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!\n                          .pushNamedAndRemoveUntil(\n                              ChatRoom.routeName, ModalRoute.withName('/'),\n                              arguments: ref.read(createRoomNotifier))\n                          .then((value) async => _roomIDKey.currentState!\n                              .didChange(value as String?));\n                      return;\n                    }\n\n                    visible.state = true;\n                    return;\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor JoinChatRoomPage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 884,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 931,
                      "line": 19,
                      "column": 50
                    },
                    "text": "JoinChatRoomPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1113,
                      "line": 26,
                      "column": 3
                    },
                    "end": {
                      "offset": 5626,
                      "line": 146,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final visible = ref.watch(errorMessageProvider.state);\n\n    ref.watch(nickNameProvider).when(\n          data: (data) => _userNameTextKey.currentState!.didChange(data),\n          loading: () => '',\n          error: (_, __) => '',\n        );\n\n    return BaseScaffold(\n      title: 'ルームに参加',\n      transparentAppbar: true,\n      floatingActionButton: FloatingActionButton(\n        onPressed: () async {\n          if (await Permission.camera.request().isGranted) {\n            final code = await Navigator.pushNamed(context, QRScanPage.route)\n                .then<String?>((value) => value.toString());\n            if (code!.isNotEmpty) {\n              _roomIDKey.currentState!.didChange(code);\n            }\n          } else {\n            final result = await showOkCancelAlertDialog(\n              context: context,\n              title: 'カメラ設定',\n              okLabel: '設定',\n              message: 'QRコードを読み込むにはアプリ設定のカメラの権限をONにしてください。',\n            );\n\n            if (result == OkCancelResult.ok) {\n              await openAppSettings();\n              return;\n            }\n          }\n        },\n        child: const Icon(Icons.qr_code),\n      ),\n      child: Padding(\n        padding: const EdgeInsets.all(horizontalPadding),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('Room ID')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        TextFormField(\n                          key: _roomIDKey,\n                          decoration:\n                              const InputDecoration(hintText: 'Room ID'),\n                          validator: agendaNameValidation,\n                        ),\n                        Visibility(\n                            visible: visible.state,\n                            child: Column(\n                              children: [\n                                const SizedBox(height: 8),\n                                Text(\n                                  '存在しないIDです',\n                                  style: InputDecorationTheme(\n                                    errorStyle: TextStyle(\n                                        color: Theme.of(context).errorColor,\n                                        fontSize: Theme.of(context)\n                                            .textTheme\n                                            .caption!\n                                            .fontSize),\n                                  ).errorStyle,\n                                ),\n                              ],\n                            )),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('名前')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      initialValue: '',\n                      key: _userNameTextKey,\n                      validator: nameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              const LargeSpaceBox(),\n              PrimaryButton(\n                buttonText: '会議に参加する',\n                onPressed: () async {\n                  visible.state = false;\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).joinRoom(\n                        roomID: _roomIDKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!\n                          .pushNamedAndRemoveUntil(\n                              ChatRoom.routeName, ModalRoute.withName('/'),\n                              arguments: ref.read(createRoomNotifier))\n                          .then((value) async => _roomIDKey.currentState!\n                              .didChange(value as String?));\n                      return;\n                    }\n\n                    visible.state = true;\n                    return;\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor JoinChatRoomPage decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 884,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 931,
                      "line": 19,
                      "column": 50
                    },
                    "text": "JoinChatRoomPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1113,
                      "line": 26,
                      "column": 3
                    },
                    "end": {
                      "offset": 5626,
                      "line": 146,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final visible = ref.watch(errorMessageProvider.state);\n\n    ref.watch(nickNameProvider).when(\n          data: (data) => _userNameTextKey.currentState!.didChange(data),\n          loading: () => '',\n          error: (_, __) => '',\n        );\n\n    return BaseScaffold(\n      title: 'ルームに参加',\n      transparentAppbar: true,\n      floatingActionButton: FloatingActionButton(\n        onPressed: () async {\n          if (await Permission.camera.request().isGranted) {\n            final code = await Navigator.pushNamed(context, QRScanPage.route)\n                .then<String?>((value) => value.toString());\n            if (code!.isNotEmpty) {\n              _roomIDKey.currentState!.didChange(code);\n            }\n          } else {\n            final result = await showOkCancelAlertDialog(\n              context: context,\n              title: 'カメラ設定',\n              okLabel: '設定',\n              message: 'QRコードを読み込むにはアプリ設定のカメラの権限をONにしてください。',\n            );\n\n            if (result == OkCancelResult.ok) {\n              await openAppSettings();\n              return;\n            }\n          }\n        },\n        child: const Icon(Icons.qr_code),\n      ),\n      child: Padding(\n        padding: const EdgeInsets.all(horizontalPadding),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('Room ID')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        TextFormField(\n                          key: _roomIDKey,\n                          decoration:\n                              const InputDecoration(hintText: 'Room ID'),\n                          validator: agendaNameValidation,\n                        ),\n                        Visibility(\n                            visible: visible.state,\n                            child: Column(\n                              children: [\n                                const SizedBox(height: 8),\n                                Text(\n                                  '存在しないIDです',\n                                  style: InputDecorationTheme(\n                                    errorStyle: TextStyle(\n                                        color: Theme.of(context).errorColor,\n                                        fontSize: Theme.of(context)\n                                            .textTheme\n                                            .caption!\n                                            .fontSize),\n                                  ).errorStyle,\n                                ),\n                              ],\n                            )),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('名前')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      initialValue: '',\n                      key: _userNameTextKey,\n                      validator: nameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              const LargeSpaceBox(),\n              PrimaryButton(\n                buttonText: '会議に参加する',\n                onPressed: () async {\n                  visible.state = false;\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).joinRoom(\n                        roomID: _roomIDKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!\n                          .pushNamedAndRemoveUntil(\n                              ChatRoom.routeName, ModalRoute.withName('/'),\n                              arguments: ref.read(createRoomNotifier))\n                          .then((value) async => _roomIDKey.currentState!\n                              .didChange(value as String?));\n                      return;\n                    }\n\n                    visible.state = true;\n                    return;\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "JoinChatRoomPage.JoinChatRoomPage": {
          "codeSpan": {
            "start": {
              "offset": 884,
              "line": 19,
              "column": 3
            },
            "end": {
              "offset": 931,
              "line": 19,
              "column": 50
            },
            "text": "JoinChatRoomPage({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "JoinChatRoomPage.build": {
          "codeSpan": {
            "start": {
              "offset": 1113,
              "line": 26,
              "column": 3
            },
            "end": {
              "offset": 5626,
              "line": 146,
              "column": 4
            },
            "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final visible = ref.watch(errorMessageProvider.state);\n\n    ref.watch(nickNameProvider).when(\n          data: (data) => _userNameTextKey.currentState!.didChange(data),\n          loading: () => '',\n          error: (_, __) => '',\n        );\n\n    return BaseScaffold(\n      title: 'ルームに参加',\n      transparentAppbar: true,\n      floatingActionButton: FloatingActionButton(\n        onPressed: () async {\n          if (await Permission.camera.request().isGranted) {\n            final code = await Navigator.pushNamed(context, QRScanPage.route)\n                .then<String?>((value) => value.toString());\n            if (code!.isNotEmpty) {\n              _roomIDKey.currentState!.didChange(code);\n            }\n          } else {\n            final result = await showOkCancelAlertDialog(\n              context: context,\n              title: 'カメラ設定',\n              okLabel: '設定',\n              message: 'QRコードを読み込むにはアプリ設定のカメラの権限をONにしてください。',\n            );\n\n            if (result == OkCancelResult.ok) {\n              await openAppSettings();\n              return;\n            }\n          }\n        },\n        child: const Icon(Icons.qr_code),\n      ),\n      child: Padding(\n        padding: const EdgeInsets.all(horizontalPadding),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('Room ID')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        TextFormField(\n                          key: _roomIDKey,\n                          decoration:\n                              const InputDecoration(hintText: 'Room ID'),\n                          validator: agendaNameValidation,\n                        ),\n                        Visibility(\n                            visible: visible.state,\n                            child: Column(\n                              children: [\n                                const SizedBox(height: 8),\n                                Text(\n                                  '存在しないIDです',\n                                  style: InputDecorationTheme(\n                                    errorStyle: TextStyle(\n                                        color: Theme.of(context).errorColor,\n                                        fontSize: Theme.of(context)\n                                            .textTheme\n                                            .caption!\n                                            .fontSize),\n                                  ).errorStyle,\n                                ),\n                              ],\n                            )),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('名前')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      initialValue: '',\n                      key: _userNameTextKey,\n                      validator: nameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              const LargeSpaceBox(),\n              PrimaryButton(\n                buttonText: '会議に参加する',\n                onPressed: () async {\n                  visible.state = false;\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).joinRoom(\n                        roomID: _roomIDKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!\n                          .pushNamedAndRemoveUntil(\n                              ChatRoom.routeName, ModalRoute.withName('/'),\n                              arguments: ref.read(createRoomNotifier))\n                          .then((value) async => _roomIDKey.currentState!\n                              .didChange(value as String?));\n                      return;\n                    }\n\n                    visible.state = true;\n                    return;\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 6,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 6.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1579,
                      "line": 40,
                      "column": 11
                    },
                    "end": {
                      "offset": 2254,
                      "line": 58,
                      "column": 12
                    },
                    "text": "if (await Permission.camera.request().isGranted) {\n            final code = await Navigator.pushNamed(context, QRScanPage.route)\n                .then<String?>((value) => value.toString());\n            if (code!.isNotEmpty) {\n              _roomIDKey.currentState!.didChange(code);\n            }\n          } else {\n            final result = await showOkCancelAlertDialog(\n              context: context,\n              title: 'カメラ設定',\n              okLabel: '設定',\n              message: 'QRコードを読み込むにはアプリ設定のカメラの権限をONにしてください。',\n            );\n\n            if (result == OkCancelResult.ok) {\n              await openAppSettings();\n              return;\n            }\n          }"
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1781,
                      "line": 43,
                      "column": 13
                    },
                    "end": {
                      "offset": 1874,
                      "line": 45,
                      "column": 14
                    },
                    "text": "if (code!.isNotEmpty) {\n              _roomIDKey.currentState!.didChange(code);\n            }"
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2133,
                      "line": 54,
                      "column": 13
                    },
                    "end": {
                      "offset": 2242,
                      "line": 57,
                      "column": 14
                    },
                    "text": "if (result == OkCancelResult.ok) {\n              await openAppSettings();\n              return;\n            }"
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 4740,
                      "line": 123,
                      "column": 19
                    },
                    "end": {
                      "offset": 5531,
                      "line": 138,
                      "column": 20
                    },
                    "text": "if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).joinRoom(\n                        roomID: _roomIDKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!\n                          .pushNamedAndRemoveUntil(\n                              ChatRoom.routeName, ModalRoute.withName('/'),\n                              arguments: ref.read(createRoomNotifier))\n                          .then((value) async => _roomIDKey.currentState!\n                              .didChange(value as String?));\n                      return;\n                    }\n\n                    visible.state = true;\n                    return;\n                  }"
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 4801,
                      "line": 124,
                      "column": 21
                    },
                    "end": {
                      "offset": 5440,
                      "line": 134,
                      "column": 22
                    },
                    "text": "if (await ref.read(createRoomNotifier.notifier).joinRoom(\n                        roomID: _roomIDKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!\n                          .pushNamedAndRemoveUntil(\n                              ChatRoom.routeName, ModalRoute.withName('/'),\n                              arguments: ref.read(createRoomNotifier))\n                          .then((value) async => _roomIDKey.currentState!\n                              .didChange(value as String?));\n                      return;\n                    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 2209.737983822521,
              "level": "none",
              "comment": "This method has a halstead volume of 2209.737983822521.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 122,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 122 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 4,
              "level": "none",
              "comment": "This method has a nesting level of 4.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1163,
                      "line": 26,
                      "column": 53
                    },
                    "end": {
                      "offset": 5626,
                      "line": 146,
                      "column": 4
                    },
                    "text": "{\n    final visible = ref.watch(errorMessageProvider.state);\n\n    ref.watch(nickNameProvider).when(\n          data: (data) => _userNameTextKey.currentState!.didChange(data),\n          loading: () => '',\n          error: (_, __) => '',\n        );\n\n    return BaseScaffold(\n      title: 'ルームに参加',\n      transparentAppbar: true,\n      floatingActionButton: FloatingActionButton(\n        onPressed: () async {\n          if (await Permission.camera.request().isGranted) {\n            final code = await Navigator.pushNamed(context, QRScanPage.route)\n                .then<String?>((value) => value.toString());\n            if (code!.isNotEmpty) {\n              _roomIDKey.currentState!.didChange(code);\n            }\n          } else {\n            final result = await showOkCancelAlertDialog(\n              context: context,\n              title: 'カメラ設定',\n              okLabel: '設定',\n              message: 'QRコードを読み込むにはアプリ設定のカメラの権限をONにしてください。',\n            );\n\n            if (result == OkCancelResult.ok) {\n              await openAppSettings();\n              return;\n            }\n          }\n        },\n        child: const Icon(Icons.qr_code),\n      ),\n      child: Padding(\n        padding: const EdgeInsets.all(horizontalPadding),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('Room ID')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        TextFormField(\n                          key: _roomIDKey,\n                          decoration:\n                              const InputDecoration(hintText: 'Room ID'),\n                          validator: agendaNameValidation,\n                        ),\n                        Visibility(\n                            visible: visible.state,\n                            child: Column(\n                              children: [\n                                const SizedBox(height: 8),\n                                Text(\n                                  '存在しないIDです',\n                                  style: InputDecorationTheme(\n                                    errorStyle: TextStyle(\n                                        color: Theme.of(context).errorColor,\n                                        fontSize: Theme.of(context)\n                                            .textTheme\n                                            .caption!\n                                            .fontSize),\n                                  ).errorStyle,\n                                ),\n                              ],\n                            )),\n                      ],\n                    ),\n                  ),\n                ],\n              ),\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('名前')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      initialValue: '',\n                      key: _userNameTextKey,\n                      validator: nameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              const LargeSpaceBox(),\n              PrimaryButton(\n                buttonText: '会議に参加する',\n                onPressed: () async {\n                  visible.state = false;\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).joinRoom(\n                        roomID: _roomIDKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!\n                          .pushNamedAndRemoveUntil(\n                              ChatRoom.routeName, ModalRoute.withName('/'),\n                              arguments: ref.read(createRoomNotifier))\n                          .then((value) async => _roomIDKey.currentState!\n                              .didChange(value as String?));\n                      return;\n                    }\n\n                    visible.state = true;\n                    return;\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1567,
                      "line": 39,
                      "column": 29
                    },
                    "end": {
                      "offset": 2264,
                      "line": 59,
                      "column": 10
                    },
                    "text": "{\n          if (await Permission.camera.request().isGranted) {\n            final code = await Navigator.pushNamed(context, QRScanPage.route)\n                .then<String?>((value) => value.toString());\n            if (code!.isNotEmpty) {\n              _roomIDKey.currentState!.didChange(code);\n            }\n          } else {\n            final result = await showOkCancelAlertDialog(\n              context: context,\n              title: 'カメラ設定',\n              okLabel: '設定',\n              message: 'QRコードを読み込むにはアプリ設定のカメラの権限をONにしてください。',\n            );\n\n            if (result == OkCancelResult.ok) {\n              await openAppSettings();\n              return;\n            }\n          }\n        }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1628,
                      "line": 40,
                      "column": 60
                    },
                    "end": {
                      "offset": 1886,
                      "line": 46,
                      "column": 12
                    },
                    "text": "{\n            final code = await Navigator.pushNamed(context, QRScanPage.route)\n                .then<String?>((value) => value.toString());\n            if (code!.isNotEmpty) {\n              _roomIDKey.currentState!.didChange(code);\n            }\n          }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1803,
                      "line": 43,
                      "column": 35
                    },
                    "end": {
                      "offset": 1874,
                      "line": 45,
                      "column": 14
                    },
                    "text": "{\n              _roomIDKey.currentState!.didChange(code);\n            }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 115,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 115 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1165,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 1165,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1225,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1225,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1263,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1263,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1337,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1337,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1366,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1366,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1398,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1398,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1410,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1410,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1435,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1435,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1458,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1458,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1489,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1489,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1539,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1539,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1569,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1569,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1630,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1630,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1708,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1708,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1769,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1769,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1805,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1805,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1861,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1861,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1875,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1875,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1894,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1894,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1952,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1952,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1984,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1984,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2014,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 2014,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2043,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 2043,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2105,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 2105,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2121,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 2121,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2168,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 2168,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2207,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 2207,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2229,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 2229,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2243,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 2243,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2255,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2255,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2266,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 2266,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2308,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2308,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2317,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2317,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2339,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2339,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2397,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 2397,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2418,
                      "line": 65,
                      "column": 0
                    },
                    "end": {
                      "offset": 2418,
                      "line": 65,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2443,
                      "line": 66,
                      "column": 0
                    },
                    "end": {
                      "offset": 2443,
                      "line": 66,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2468,
                      "line": 67,
                      "column": 0
                    },
                    "end": {
                      "offset": 2468,
                      "line": 67,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2492,
                      "line": 68,
                      "column": 0
                    },
                    "end": {
                      "offset": 2492,
                      "line": 68,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2511,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 2511,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2539,
                      "line": 70,
                      "column": 0
                    },
                    "end": {
                      "offset": 2539,
                      "line": 70,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2608,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 2608,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2652,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 2652,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2680,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 2680,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2715,
                      "line": 74,
                      "column": 0
                    },
                    "end": {
                      "offset": 2715,
                      "line": 74,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2783,
                      "line": 75,
                      "column": 0
                    },
                    "end": {
                      "offset": 2783,
                      "line": 75,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2817,
                      "line": 76,
                      "column": 0
                    },
                    "end": {
                      "offset": 2817,
                      "line": 76,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2856,
                      "line": 77,
                      "column": 0
                    },
                    "end": {
                      "offset": 2856,
                      "line": 77,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2899,
                      "line": 78,
                      "column": 0
                    },
                    "end": {
                      "offset": 2899,
                      "line": 78,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2937,
                      "line": 79,
                      "column": 0
                    },
                    "end": {
                      "offset": 2937,
                      "line": 79,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3011,
                      "line": 80,
                      "column": 0
                    },
                    "end": {
                      "offset": 3011,
                      "line": 80,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3070,
                      "line": 81,
                      "column": 0
                    },
                    "end": {
                      "offset": 3070,
                      "line": 81,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3097,
                      "line": 82,
                      "column": 0
                    },
                    "end": {
                      "offset": 3097,
                      "line": 82,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3133,
                      "line": 83,
                      "column": 0
                    },
                    "end": {
                      "offset": 3133,
                      "line": 83,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3185,
                      "line": 84,
                      "column": 0
                    },
                    "end": {
                      "offset": 3185,
                      "line": 84,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3228,
                      "line": 85,
                      "column": 0
                    },
                    "end": {
                      "offset": 3228,
                      "line": 85,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3270,
                      "line": 86,
                      "column": 0
                    },
                    "end": {
                      "offset": 3270,
                      "line": 86,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3329,
                      "line": 87,
                      "column": 0
                    },
                    "end": {
                      "offset": 3329,
                      "line": 87,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3367,
                      "line": 88,
                      "column": 0
                    },
                    "end": {
                      "offset": 3367,
                      "line": 88,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3414,
                      "line": 89,
                      "column": 0
                    },
                    "end": {
                      "offset": 3414,
                      "line": 89,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3477,
                      "line": 90,
                      "column": 0
                    },
                    "end": {
                      "offset": 3477,
                      "line": 90,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3536,
                      "line": 91,
                      "column": 0
                    },
                    "end": {
                      "offset": 3536,
                      "line": 91,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3613,
                      "line": 92,
                      "column": 0
                    },
                    "end": {
                      "offset": 3613,
                      "line": 92,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3681,
                      "line": 93,
                      "column": 0
                    },
                    "end": {
                      "offset": 3681,
                      "line": 93,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3736,
                      "line": 94,
                      "column": 0
                    },
                    "end": {
                      "offset": 3736,
                      "line": 94,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3790,
                      "line": 95,
                      "column": 0
                    },
                    "end": {
                      "offset": 3790,
                      "line": 95,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3846,
                      "line": 96,
                      "column": 0
                    },
                    "end": {
                      "offset": 3846,
                      "line": 96,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3894,
                      "line": 97,
                      "column": 0
                    },
                    "end": {
                      "offset": 3894,
                      "line": 97,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3929,
                      "line": 98,
                      "column": 0
                    },
                    "end": {
                      "offset": 3929,
                      "line": 98,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3962,
                      "line": 99,
                      "column": 0
                    },
                    "end": {
                      "offset": 3962,
                      "line": 99,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3994,
                      "line": 100,
                      "column": 0
                    },
                    "end": {
                      "offset": 3994,
                      "line": 100,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4019,
                      "line": 101,
                      "column": 0
                    },
                    "end": {
                      "offset": 4019,
                      "line": 101,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4042,
                      "line": 102,
                      "column": 0
                    },
                    "end": {
                      "offset": 4042,
                      "line": 102,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4063,
                      "line": 103,
                      "column": 0
                    },
                    "end": {
                      "offset": 4063,
                      "line": 103,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4082,
                      "line": 104,
                      "column": 0
                    },
                    "end": {
                      "offset": 4082,
                      "line": 104,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4099,
                      "line": 105,
                      "column": 0
                    },
                    "end": {
                      "offset": 4099,
                      "line": 105,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4118,
                      "line": 106,
                      "column": 0
                    },
                    "end": {
                      "offset": 4118,
                      "line": 106,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4146,
                      "line": 107,
                      "column": 0
                    },
                    "end": {
                      "offset": 4146,
                      "line": 107,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4210,
                      "line": 108,
                      "column": 0
                    },
                    "end": {
                      "offset": 4210,
                      "line": 108,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4254,
                      "line": 109,
                      "column": 0
                    },
                    "end": {
                      "offset": 4254,
                      "line": 109,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4282,
                      "line": 110,
                      "column": 0
                    },
                    "end": {
                      "offset": 4282,
                      "line": 110,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4324,
                      "line": 111,
                      "column": 0
                    },
                    "end": {
                      "offset": 4324,
                      "line": 111,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4364,
                      "line": 112,
                      "column": 0
                    },
                    "end": {
                      "offset": 4364,
                      "line": 112,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4409,
                      "line": 113,
                      "column": 0
                    },
                    "end": {
                      "offset": 4409,
                      "line": 113,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4458,
                      "line": 114,
                      "column": 0
                    },
                    "end": {
                      "offset": 4458,
                      "line": 114,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4481,
                      "line": 115,
                      "column": 0
                    },
                    "end": {
                      "offset": 4481,
                      "line": 115,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4502,
                      "line": 116,
                      "column": 0
                    },
                    "end": {
                      "offset": 4502,
                      "line": 116,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4521,
                      "line": 117,
                      "column": 0
                    },
                    "end": {
                      "offset": 4521,
                      "line": 117,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4538,
                      "line": 118,
                      "column": 0
                    },
                    "end": {
                      "offset": 4538,
                      "line": 118,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4575,
                      "line": 119,
                      "column": 0
                    },
                    "end": {
                      "offset": 4575,
                      "line": 119,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4604,
                      "line": 120,
                      "column": 0
                    },
                    "end": {
                      "offset": 4604,
                      "line": 120,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4643,
                      "line": 121,
                      "column": 0
                    },
                    "end": {
                      "offset": 4643,
                      "line": 121,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4681,
                      "line": 122,
                      "column": 0
                    },
                    "end": {
                      "offset": 4681,
                      "line": 122,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4722,
                      "line": 123,
                      "column": 0
                    },
                    "end": {
                      "offset": 4722,
                      "line": 123,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4781,
                      "line": 124,
                      "column": 0
                    },
                    "end": {
                      "offset": 4781,
                      "line": 124,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4859,
                      "line": 125,
                      "column": 0
                    },
                    "end": {
                      "offset": 4859,
                      "line": 125,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4924,
                      "line": 126,
                      "column": 0
                    },
                    "end": {
                      "offset": 4924,
                      "line": 126,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5000,
                      "line": 127,
                      "column": 0
                    },
                    "end": {
                      "offset": 5000,
                      "line": 127,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5055,
                      "line": 128,
                      "column": 0
                    },
                    "end": {
                      "offset": 5055,
                      "line": 128,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5107,
                      "line": 129,
                      "column": 0
                    },
                    "end": {
                      "offset": 5107,
                      "line": 129,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5183,
                      "line": 130,
                      "column": 0
                    },
                    "end": {
                      "offset": 5183,
                      "line": 130,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5254,
                      "line": 131,
                      "column": 0
                    },
                    "end": {
                      "offset": 5254,
                      "line": 131,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5328,
                      "line": 132,
                      "column": 0
                    },
                    "end": {
                      "offset": 5328,
                      "line": 132,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5389,
                      "line": 133,
                      "column": 0
                    },
                    "end": {
                      "offset": 5389,
                      "line": 133,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5419,
                      "line": 134,
                      "column": 0
                    },
                    "end": {
                      "offset": 5419,
                      "line": 134,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5442,
                      "line": 136,
                      "column": 0
                    },
                    "end": {
                      "offset": 5442,
                      "line": 136,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5484,
                      "line": 137,
                      "column": 0
                    },
                    "end": {
                      "offset": 5484,
                      "line": 137,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5512,
                      "line": 138,
                      "column": 0
                    },
                    "end": {
                      "offset": 5512,
                      "line": 138,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5532,
                      "line": 139,
                      "column": 0
                    },
                    "end": {
                      "offset": 5532,
                      "line": 139,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5551,
                      "line": 140,
                      "column": 0
                    },
                    "end": {
                      "offset": 5551,
                      "line": 140,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5568,
                      "line": 141,
                      "column": 0
                    },
                    "end": {
                      "offset": 5568,
                      "line": 141,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5583,
                      "line": 142,
                      "column": 0
                    },
                    "end": {
                      "offset": 5583,
                      "line": 142,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5596,
                      "line": 143,
                      "column": 0
                    },
                    "end": {
                      "offset": 5596,
                      "line": 143,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5607,
                      "line": 144,
                      "column": 0
                    },
                    "end": {
                      "offset": 5607,
                      "line": 144,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 5616,
                      "line": 145,
                      "column": 0
                    },
                    "end": {
                      "offset": 5616,
                      "line": 145,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 31,
              "level": "none",
              "comment": "This method has 31 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/network_error_view.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "NetworkErrorView": {
          "codeSpan": {
            "start": {
              "offset": 98,
              "line": 4,
              "column": 1
            },
            "end": {
              "offset": 558,
              "line": 21,
              "column": 2
            },
            "text": "class NetworkErrorView extends StatelessWidget {\n  const NetworkErrorView({Key? key, required this.reload}) : super(key: key);\n\n  final VoidCallback reload;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Column(\n        children: [\n          const Text('通信に失敗しました。通信環境の良い場所でもう一度お試しください。'),\n          const SizedBox(height: 16),\n          PrimaryButton(buttonText: '再試行', onPressed: reload),\n        ],\n      ),\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor NetworkErrorView increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 149,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 224,
                      "line": 5,
                      "column": 78
                    },
                    "text": "const NetworkErrorView({Key? key, required this.reload}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 270,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 556,
                      "line": 20,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return Center(\n      child: Column(\n        children: [\n          const Text('通信に失敗しました。通信環境の良い場所でもう一度お試しください。'),\n          const SizedBox(height: 16),\n          PrimaryButton(buttonText: '再試行', onPressed: reload),\n        ],\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor NetworkErrorView decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 149,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 224,
                      "line": 5,
                      "column": 78
                    },
                    "text": "const NetworkErrorView({Key? key, required this.reload}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 270,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 556,
                      "line": 20,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return Center(\n      child: Column(\n        children: [\n          const Text('通信に失敗しました。通信環境の良い場所でもう一度お試しください。'),\n          const SizedBox(height: 16),\n          PrimaryButton(buttonText: '再試行', onPressed: reload),\n        ],\n      ),\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "NetworkErrorView.NetworkErrorView": {
          "codeSpan": {
            "start": {
              "offset": 149,
              "line": 5,
              "column": 3
            },
            "end": {
              "offset": 224,
              "line": 5,
              "column": 78
            },
            "text": "const NetworkErrorView({Key? key, required this.reload}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "NetworkErrorView.build": {
          "codeSpan": {
            "start": {
              "offset": 270,
              "line": 10,
              "column": 3
            },
            "end": {
              "offset": 556,
              "line": 20,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\n    return Center(\n      child: Column(\n        children: [\n          const Text('通信に失敗しました。通信環境の良い場所でもう一度お試しください。'),\n          const SizedBox(height: 16),\n          PrimaryButton(buttonText: '再試行', onPressed: reload),\n        ],\n      ),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 38.053747805010275,
              "level": "none",
              "comment": "This method has a halstead volume of 38.053747805010275.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 12 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 305,
                      "line": 10,
                      "column": 38
                    },
                    "end": {
                      "offset": 556,
                      "line": 20,
                      "column": 4
                    },
                    "text": "{\n    return Center(\n      child: Column(\n        children: [\n          const Text('通信に失敗しました。通信環境の良い場所でもう一度お試しください。'),\n          const SizedBox(height: 16),\n          PrimaryButton(buttonText: '再試行', onPressed: reload),\n        ],\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 9 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 307,
                      "line": 11,
                      "column": 0
                    },
                    "end": {
                      "offset": 307,
                      "line": 11,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 326,
                      "line": 12,
                      "column": 0
                    },
                    "end": {
                      "offset": 326,
                      "line": 12,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 347,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 347,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 367,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 367,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 425,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 425,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 463,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 463,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 526,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 526,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 537,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 537,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 546,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 546,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 68,
              "level": "none",
              "comment": "This method has 68 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/conference_summary_page.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ConferenceSummaryPage": {
          "codeSpan": {
            "start": {
              "offset": 665,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 3509,
              "line": 93,
              "column": 2
            },
            "text": "class ConferenceSummaryPage extends HookConsumerWidget {\n  const ConferenceSummaryPage({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final state = ref.watch(conferenceStateProvider.notifier).state;\n\n    return BaseScaffold(\n      title: state!.agenda,\n      actionWidget: [\n        PopupMenuButton<VoidCallback>(\n            icon: const Icon(Icons.settings),\n            onSelected: (event) => event.call(),\n            itemBuilder: (context) {\n              return [\n                PopupMenuItem(\n                    value: () async {\n                      final result = await ref\n                          .watch(conferenceSummaryProvider(state).notifier)\n                          .sharePdf();\n\n                      if (result) {\n                        const snackBar = SnackBar(content: Text('PDFを保存しました。'));\n                        ScaffoldMessenger.of(context).showSnackBar(snackBar);\n                      }\n                    },\n                    child: const IconText(\n                        icon: Icons.file_download, text: 'ダウンロード')),\n              ];\n            }),\n      ],\n      child: ref.watch(conferenceSummaryProvider(state)).evaluateSummary.when(\n            data: (state) => _buildView(context, state),\n            loading: () => const LoadingView(),\n            error: (error, _) => NetworkErrorView(\n                reload: () => ref\n                    .watch(conferenceSummaryProvider(state).notifier)\n                    .initState()),\n          ),\n    );\n  }\n\n  Widget _buildView(\n      BuildContext context, List<EvaluationSummaryState> stateList) {\n    return ListView.builder(\n        padding: const EdgeInsets.all(horizontalPadding),\n        itemCount: stateList.length,\n        itemBuilder: (context, index) {\n          return Card(\n            child: Padding(\n              padding: const EdgeInsets.all(widgetBetweenSpace),\n              child: Column(\n                children: [\n                  Text(\n                    stateList[index].message,\n                    style: const TextStyle(fontSize: 24),\n                  ),\n                  const SizedBox(height: widgetBetweenSpace),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      IconText(\n                        text: stateList[index].thumbUp.toString(),\n                        icon: Icons.thumb_up,\n                      ),\n                      const SizedBox(width: widgetBetweenSpace),\n                      IconText(\n                        text: stateList[index].thumbDown.toString(),\n                        icon: Icons.thumb_down,\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            ),\n          );\n        });\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor ConferenceSummaryPage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 724,
                      "line": 16,
                      "column": 3
                    },
                    "end": {
                      "offset": 782,
                      "line": 16,
                      "column": 61
                    },
                    "text": "const ConferenceSummaryPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 798,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 2214,
                      "line": 55,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final state = ref.watch(conferenceStateProvider.notifier).state;\n\n    return BaseScaffold(\n      title: state!.agenda,\n      actionWidget: [\n        PopupMenuButton<VoidCallback>(\n            icon: const Icon(Icons.settings),\n            onSelected: (event) => event.call(),\n            itemBuilder: (context) {\n              return [\n                PopupMenuItem(\n                    value: () async {\n                      final result = await ref\n                          .watch(conferenceSummaryProvider(state).notifier)\n                          .sharePdf();\n\n                      if (result) {\n                        const snackBar = SnackBar(content: Text('PDFを保存しました。'));\n                        ScaffoldMessenger.of(context).showSnackBar(snackBar);\n                      }\n                    },\n                    child: const IconText(\n                        icon: Icons.file_download, text: 'ダウンロード')),\n              ];\n            }),\n      ],\n      child: ref.watch(conferenceSummaryProvider(state)).evaluateSummary.when(\n            data: (state) => _buildView(context, state),\n            loading: () => const LoadingView(),\n            error: (error, _) => NetworkErrorView(\n                reload: () => ref\n                    .watch(conferenceSummaryProvider(state).notifier)\n                    .initState()),\n          ),\n    );\n  }"
                  }
                },
                {
                  "message": "method _buildView increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 2218,
                      "line": 57,
                      "column": 3
                    },
                    "end": {
                      "offset": 3507,
                      "line": 92,
                      "column": 4
                    },
                    "text": "Widget _buildView(\n      BuildContext context, List<EvaluationSummaryState> stateList) {\n    return ListView.builder(\n        padding: const EdgeInsets.all(horizontalPadding),\n        itemCount: stateList.length,\n        itemBuilder: (context, index) {\n          return Card(\n            child: Padding(\n              padding: const EdgeInsets.all(widgetBetweenSpace),\n              child: Column(\n                children: [\n                  Text(\n                    stateList[index].message,\n                    style: const TextStyle(fontSize: 24),\n                  ),\n                  const SizedBox(height: widgetBetweenSpace),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      IconText(\n                        text: stateList[index].thumbUp.toString(),\n                        icon: Icons.thumb_up,\n                      ),\n                      const SizedBox(width: widgetBetweenSpace),\n                      IconText(\n                        text: stateList[index].thumbDown.toString(),\n                        icon: Icons.thumb_down,\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            ),\n          );\n        });\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor ConferenceSummaryPage decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 724,
                      "line": 16,
                      "column": 3
                    },
                    "end": {
                      "offset": 782,
                      "line": 16,
                      "column": 61
                    },
                    "text": "const ConferenceSummaryPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 798,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 2214,
                      "line": 55,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final state = ref.watch(conferenceStateProvider.notifier).state;\n\n    return BaseScaffold(\n      title: state!.agenda,\n      actionWidget: [\n        PopupMenuButton<VoidCallback>(\n            icon: const Icon(Icons.settings),\n            onSelected: (event) => event.call(),\n            itemBuilder: (context) {\n              return [\n                PopupMenuItem(\n                    value: () async {\n                      final result = await ref\n                          .watch(conferenceSummaryProvider(state).notifier)\n                          .sharePdf();\n\n                      if (result) {\n                        const snackBar = SnackBar(content: Text('PDFを保存しました。'));\n                        ScaffoldMessenger.of(context).showSnackBar(snackBar);\n                      }\n                    },\n                    child: const IconText(\n                        icon: Icons.file_download, text: 'ダウンロード')),\n              ];\n            }),\n      ],\n      child: ref.watch(conferenceSummaryProvider(state)).evaluateSummary.when(\n            data: (state) => _buildView(context, state),\n            loading: () => const LoadingView(),\n            error: (error, _) => NetworkErrorView(\n                reload: () => ref\n                    .watch(conferenceSummaryProvider(state).notifier)\n                    .initState()),\n          ),\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ConferenceSummaryPage.ConferenceSummaryPage": {
          "codeSpan": {
            "start": {
              "offset": 724,
              "line": 16,
              "column": 3
            },
            "end": {
              "offset": 782,
              "line": 16,
              "column": 61
            },
            "text": "const ConferenceSummaryPage({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ConferenceSummaryPage.build": {
          "codeSpan": {
            "start": {
              "offset": 798,
              "line": 19,
              "column": 3
            },
            "end": {
              "offset": 2214,
              "line": 55,
              "column": 4
            },
            "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final state = ref.watch(conferenceStateProvider.notifier).state;\n\n    return BaseScaffold(\n      title: state!.agenda,\n      actionWidget: [\n        PopupMenuButton<VoidCallback>(\n            icon: const Icon(Icons.settings),\n            onSelected: (event) => event.call(),\n            itemBuilder: (context) {\n              return [\n                PopupMenuItem(\n                    value: () async {\n                      final result = await ref\n                          .watch(conferenceSummaryProvider(state).notifier)\n                          .sharePdf();\n\n                      if (result) {\n                        const snackBar = SnackBar(content: Text('PDFを保存しました。'));\n                        ScaffoldMessenger.of(context).showSnackBar(snackBar);\n                      }\n                    },\n                    child: const IconText(\n                        icon: Icons.file_download, text: 'ダウンロード')),\n              ];\n            }),\n      ],\n      child: ref.watch(conferenceSummaryProvider(state)).evaluateSummary.when(\n            data: (state) => _buildView(context, state),\n            loading: () => const LoadingView(),\n            error: (error, _) => NetworkErrorView(\n                reload: () => ref\n                    .watch(conferenceSummaryProvider(state).notifier)\n                    .initState()),\n          ),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1443,
                      "line": 36,
                      "column": 23
                    },
                    "end": {
                      "offset": 1639,
                      "line": 39,
                      "column": 24
                    },
                    "text": "if (result) {\n                        const snackBar = SnackBar(content: Text('PDFを保存しました。'));\n                        ScaffoldMessenger.of(context).showSnackBar(snackBar);\n                      }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 859.1880681844799,
              "level": "none",
              "comment": "This method has a halstead volume of 859.1880681844799.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 38,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 38 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 4,
              "level": "none",
              "comment": "This method has a nesting level of 4.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 848,
                      "line": 19,
                      "column": 53
                    },
                    "end": {
                      "offset": 2214,
                      "line": 55,
                      "column": 4
                    },
                    "text": "{\n    final state = ref.watch(conferenceStateProvider.notifier).state;\n\n    return BaseScaffold(\n      title: state!.agenda,\n      actionWidget: [\n        PopupMenuButton<VoidCallback>(\n            icon: const Icon(Icons.settings),\n            onSelected: (event) => event.call(),\n            itemBuilder: (context) {\n              return [\n                PopupMenuItem(\n                    value: () async {\n                      final result = await ref\n                          .watch(conferenceSummaryProvider(state).notifier)\n                          .sharePdf();\n\n                      if (result) {\n                        const snackBar = SnackBar(content: Text('PDFを保存しました。'));\n                        ScaffoldMessenger.of(context).showSnackBar(snackBar);\n                      }\n                    },\n                    child: const IconText(\n                        icon: Icons.file_download, text: 'ダウンロード')),\n              ];\n            }),\n      ],\n      child: ref.watch(conferenceSummaryProvider(state)).evaluateSummary.when(\n            data: (state) => _buildView(context, state),\n            loading: () => const LoadingView(),\n            error: (error, _) => NetworkErrorView(\n                reload: () => ref\n                    .watch(conferenceSummaryProvider(state).notifier)\n                    .initState()),\n          ),\n    );\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1164,
                      "line": 28,
                      "column": 36
                    },
                    "end": {
                      "offset": 1805,
                      "line": 44,
                      "column": 14
                    },
                    "text": "{\n              return [\n                PopupMenuItem(\n                    value: () async {\n                      final result = await ref\n                          .watch(conferenceSummaryProvider(state).notifier)\n                          .sharePdf();\n\n                      if (result) {\n                        const snackBar = SnackBar(content: Text('PDFを保存しました。'));\n                        ScaffoldMessenger.of(context).showSnackBar(snackBar);\n                      }\n                    },\n                    child: const IconText(\n                        icon: Icons.file_download, text: 'ダウンロード')),\n              ];\n            }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1256,
                      "line": 31,
                      "column": 37
                    },
                    "end": {
                      "offset": 1661,
                      "line": 40,
                      "column": 22
                    },
                    "text": "{\n                      final result = await ref\n                          .watch(conferenceSummaryProvider(state).notifier)\n                          .sharePdf();\n\n                      if (result) {\n                        const snackBar = SnackBar(content: Text('PDFを保存しました。'));\n                        ScaffoldMessenger.of(context).showSnackBar(snackBar);\n                      }\n                    }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1455,
                      "line": 36,
                      "column": 35
                    },
                    "end": {
                      "offset": 1639,
                      "line": 39,
                      "column": 24
                    },
                    "text": "{\n                        const snackBar = SnackBar(content: Text('PDFを保存しました。'));\n                        ScaffoldMessenger.of(context).showSnackBar(snackBar);\n                      }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 33,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 33 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 850,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 850,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 920,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 920,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 945,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 945,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 973,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 973,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 995,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 995,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1034,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 1034,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1080,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 1080,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1129,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 1129,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1166,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1166,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1189,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1189,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1220,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1220,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1258,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1258,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1305,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1305,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1381,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1381,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1421,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1421,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1457,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1457,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1538,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1538,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1616,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1616,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1640,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1640,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1663,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1663,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1706,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1706,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1775,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1775,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1792,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1792,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1808,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1808,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1817,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1817,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1896,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1896,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1953,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1953,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2001,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 2001,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2052,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 2052,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2086,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 2086,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2156,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 2156,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2191,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 2191,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2204,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 2204,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 47,
              "level": "none",
              "comment": "This method has 47 maintainability index.",
              "context": []
            }
          ]
        },
        "ConferenceSummaryPage._buildView": {
          "codeSpan": {
            "start": {
              "offset": 2218,
              "line": 57,
              "column": 3
            },
            "end": {
              "offset": 3507,
              "line": 92,
              "column": 4
            },
            "text": "Widget _buildView(\n      BuildContext context, List<EvaluationSummaryState> stateList) {\n    return ListView.builder(\n        padding: const EdgeInsets.all(horizontalPadding),\n        itemCount: stateList.length,\n        itemBuilder: (context, index) {\n          return Card(\n            child: Padding(\n              padding: const EdgeInsets.all(widgetBetweenSpace),\n              child: Column(\n                children: [\n                  Text(\n                    stateList[index].message,\n                    style: const TextStyle(fontSize: 24),\n                  ),\n                  const SizedBox(height: widgetBetweenSpace),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      IconText(\n                        text: stateList[index].thumbUp.toString(),\n                        icon: Icons.thumb_up,\n                      ),\n                      const SizedBox(width: widgetBetweenSpace),\n                      IconText(\n                        text: stateList[index].thumbDown.toString(),\n                        icon: Icons.thumb_down,\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            ),\n          );\n        });\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 549.6818307616738,
              "level": "none",
              "comment": "This method has a halstead volume of 549.6818307616738.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 36,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 36 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2305,
                      "line": 58,
                      "column": 69
                    },
                    "end": {
                      "offset": 3507,
                      "line": 92,
                      "column": 4
                    },
                    "text": "{\n    return ListView.builder(\n        padding: const EdgeInsets.all(horizontalPadding),\n        itemCount: stateList.length,\n        itemBuilder: (context, index) {\n          return Card(\n            child: Padding(\n              padding: const EdgeInsets.all(widgetBetweenSpace),\n              child: Column(\n                children: [\n                  Text(\n                    stateList[index].message,\n                    style: const TextStyle(fontSize: 24),\n                  ),\n                  const SizedBox(height: widgetBetweenSpace),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      IconText(\n                        text: stateList[index].thumbUp.toString(),\n                        icon: Icons.thumb_up,\n                      ),\n                      const SizedBox(width: widgetBetweenSpace),\n                      IconText(\n                        text: stateList[index].thumbDown.toString(),\n                        icon: Icons.thumb_down,\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            ),\n          );\n        });\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2469,
                      "line": 62,
                      "column": 39
                    },
                    "end": {
                      "offset": 3501,
                      "line": 91,
                      "column": 10
                    },
                    "text": "{\n          return Card(\n            child: Padding(\n              padding: const EdgeInsets.all(widgetBetweenSpace),\n              child: Column(\n                children: [\n                  Text(\n                    stateList[index].message,\n                    style: const TextStyle(fontSize: 24),\n                  ),\n                  const SizedBox(height: widgetBetweenSpace),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      IconText(\n                        text: stateList[index].thumbUp.toString(),\n                        icon: Icons.thumb_up,\n                      ),\n                      const SizedBox(width: widgetBetweenSpace),\n                      IconText(\n                        text: stateList[index].thumbDown.toString(),\n                        icon: Icons.thumb_down,\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            ),\n          );\n        }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 33,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 33 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2307,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2307,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2336,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 2336,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2394,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2394,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2431,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2431,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2471,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2471,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2494,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 2494,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2522,
                      "line": 65,
                      "column": 0
                    },
                    "end": {
                      "offset": 2522,
                      "line": 65,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2587,
                      "line": 66,
                      "column": 0
                    },
                    "end": {
                      "offset": 2587,
                      "line": 66,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2616,
                      "line": 67,
                      "column": 0
                    },
                    "end": {
                      "offset": 2616,
                      "line": 67,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2644,
                      "line": 68,
                      "column": 0
                    },
                    "end": {
                      "offset": 2644,
                      "line": 68,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2668,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 2668,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2714,
                      "line": 70,
                      "column": 0
                    },
                    "end": {
                      "offset": 2714,
                      "line": 70,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2772,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 2772,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2793,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 2793,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2855,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 2855,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2878,
                      "line": 74,
                      "column": 0
                    },
                    "end": {
                      "offset": 2878,
                      "line": 74,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2943,
                      "line": 75,
                      "column": 0
                    },
                    "end": {
                      "offset": 2943,
                      "line": 75,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2975,
                      "line": 76,
                      "column": 0
                    },
                    "end": {
                      "offset": 2975,
                      "line": 76,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3007,
                      "line": 77,
                      "column": 0
                    },
                    "end": {
                      "offset": 3007,
                      "line": 77,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3074,
                      "line": 78,
                      "column": 0
                    },
                    "end": {
                      "offset": 3074,
                      "line": 78,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3120,
                      "line": 79,
                      "column": 0
                    },
                    "end": {
                      "offset": 3120,
                      "line": 79,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3145,
                      "line": 80,
                      "column": 0
                    },
                    "end": {
                      "offset": 3145,
                      "line": 80,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3210,
                      "line": 81,
                      "column": 0
                    },
                    "end": {
                      "offset": 3210,
                      "line": 81,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3242,
                      "line": 82,
                      "column": 0
                    },
                    "end": {
                      "offset": 3242,
                      "line": 82,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3311,
                      "line": 83,
                      "column": 0
                    },
                    "end": {
                      "offset": 3311,
                      "line": 83,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3359,
                      "line": 84,
                      "column": 0
                    },
                    "end": {
                      "offset": 3359,
                      "line": 84,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3384,
                      "line": 85,
                      "column": 0
                    },
                    "end": {
                      "offset": 3384,
                      "line": 85,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3407,
                      "line": 86,
                      "column": 0
                    },
                    "end": {
                      "offset": 3407,
                      "line": 86,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3428,
                      "line": 87,
                      "column": 0
                    },
                    "end": {
                      "offset": 3428,
                      "line": 87,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3447,
                      "line": 88,
                      "column": 0
                    },
                    "end": {
                      "offset": 3447,
                      "line": 88,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3464,
                      "line": 89,
                      "column": 0
                    },
                    "end": {
                      "offset": 3464,
                      "line": 89,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3479,
                      "line": 90,
                      "column": 0
                    },
                    "end": {
                      "offset": 3479,
                      "line": 90,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3492,
                      "line": 91,
                      "column": 0
                    },
                    "end": {
                      "offset": 3492,
                      "line": 91,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 48,
              "level": "none",
              "comment": "This method has 48 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/page/create_chat_room_page.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "CreateChatRoomPage": {
          "codeSpan": {
            "start": {
              "offset": 598,
              "line": 13,
              "column": 1
            },
            "end": {
              "offset": 3022,
              "line": 83,
              "column": 2
            },
            "text": "class CreateChatRoomPage extends HookConsumerWidget {\n  CreateChatRoomPage({Key? key}) : super(key: key);\n\n  final _formKey = GlobalKey<FormState>();\n  final _agendaNameTextKey = GlobalKey<FormFieldState<String>>();\n  final _userNameTextKey = GlobalKey<FormFieldState<String>>();\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    ref.watch(nickNameProvider).when(\n          data: (data) => _userNameTextKey.currentState!.didChange(data),\n          loading: () => '',\n          error: (_, __) => '',\n        );\n\n    return BaseScaffold(\n      title: 'ルームを作成',\n      transparentAppbar: true,\n      child: Padding(\n        padding: const EdgeInsets.all(horizontalPadding),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('会議名')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      key: _agendaNameTextKey,\n                      initialValue: 'エレブラ',\n                      validator: agendaNameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('名前')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      key: _userNameTextKey,\n                      validator: nameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              const LargeSpaceBox(),\n              PrimaryButton(\n                buttonText: '部屋を作成する',\n                onPressed: () async {\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).initRoom(\n                        agenda: _agendaNameTextKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!.pushNamedAndRemoveUntil(\n                          ChatRoom.routeName, ModalRoute.withName('/'),\n                          arguments: ref.read(createRoomNotifier));\n                    }\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor CreateChatRoomPage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 654,
                      "line": 14,
                      "column": 3
                    },
                    "end": {
                      "offset": 703,
                      "line": 14,
                      "column": 52
                    },
                    "text": "CreateChatRoomPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 893,
                      "line": 21,
                      "column": 3
                    },
                    "end": {
                      "offset": 3020,
                      "line": 82,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    ref.watch(nickNameProvider).when(\n          data: (data) => _userNameTextKey.currentState!.didChange(data),\n          loading: () => '',\n          error: (_, __) => '',\n        );\n\n    return BaseScaffold(\n      title: 'ルームを作成',\n      transparentAppbar: true,\n      child: Padding(\n        padding: const EdgeInsets.all(horizontalPadding),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('会議名')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      key: _agendaNameTextKey,\n                      initialValue: 'エレブラ',\n                      validator: agendaNameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('名前')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      key: _userNameTextKey,\n                      validator: nameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              const LargeSpaceBox(),\n              PrimaryButton(\n                buttonText: '部屋を作成する',\n                onPressed: () async {\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).initRoom(\n                        agenda: _agendaNameTextKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!.pushNamedAndRemoveUntil(\n                          ChatRoom.routeName, ModalRoute.withName('/'),\n                          arguments: ref.read(createRoomNotifier));\n                    }\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor CreateChatRoomPage decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 654,
                      "line": 14,
                      "column": 3
                    },
                    "end": {
                      "offset": 703,
                      "line": 14,
                      "column": 52
                    },
                    "text": "CreateChatRoomPage({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 893,
                      "line": 21,
                      "column": 3
                    },
                    "end": {
                      "offset": 3020,
                      "line": 82,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    ref.watch(nickNameProvider).when(\n          data: (data) => _userNameTextKey.currentState!.didChange(data),\n          loading: () => '',\n          error: (_, __) => '',\n        );\n\n    return BaseScaffold(\n      title: 'ルームを作成',\n      transparentAppbar: true,\n      child: Padding(\n        padding: const EdgeInsets.all(horizontalPadding),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('会議名')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      key: _agendaNameTextKey,\n                      initialValue: 'エレブラ',\n                      validator: agendaNameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('名前')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      key: _userNameTextKey,\n                      validator: nameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              const LargeSpaceBox(),\n              PrimaryButton(\n                buttonText: '部屋を作成する',\n                onPressed: () async {\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).initRoom(\n                        agenda: _agendaNameTextKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!.pushNamedAndRemoveUntil(\n                          ChatRoom.routeName, ModalRoute.withName('/'),\n                          arguments: ref.read(createRoomNotifier));\n                    }\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "CreateChatRoomPage.CreateChatRoomPage": {
          "codeSpan": {
            "start": {
              "offset": 654,
              "line": 14,
              "column": 3
            },
            "end": {
              "offset": 703,
              "line": 14,
              "column": 52
            },
            "text": "CreateChatRoomPage({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "CreateChatRoomPage.build": {
          "codeSpan": {
            "start": {
              "offset": 893,
              "line": 21,
              "column": 3
            },
            "end": {
              "offset": 3020,
              "line": 82,
              "column": 4
            },
            "text": "Widget build(BuildContext context, WidgetRef ref) {\n    ref.watch(nickNameProvider).when(\n          data: (data) => _userNameTextKey.currentState!.didChange(data),\n          loading: () => '',\n          error: (_, __) => '',\n        );\n\n    return BaseScaffold(\n      title: 'ルームを作成',\n      transparentAppbar: true,\n      child: Padding(\n        padding: const EdgeInsets.all(horizontalPadding),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('会議名')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      key: _agendaNameTextKey,\n                      initialValue: 'エレブラ',\n                      validator: agendaNameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('名前')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      key: _userNameTextKey,\n                      validator: nameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              const LargeSpaceBox(),\n              PrimaryButton(\n                buttonText: '部屋を作成する',\n                onPressed: () async {\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).initRoom(\n                        agenda: _agendaNameTextKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!.pushNamedAndRemoveUntil(\n                          ChatRoom.routeName, ModalRoute.withName('/'),\n                          arguments: ref.read(createRoomNotifier));\n                    }\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 3,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 3.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2396,
                      "line": 66,
                      "column": 19
                    },
                    "end": {
                      "offset": 2925,
                      "line": 74,
                      "column": 20
                    },
                    "text": "if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).initRoom(\n                        agenda: _agendaNameTextKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!.pushNamedAndRemoveUntil(\n                          ChatRoom.routeName, ModalRoute.withName('/'),\n                          arguments: ref.read(createRoomNotifier));\n                    }\n                  }"
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2457,
                      "line": 67,
                      "column": 21
                    },
                    "end": {
                      "offset": 2905,
                      "line": 73,
                      "column": 22
                    },
                    "text": "if (await ref.read(createRoomNotifier.notifier).initRoom(\n                        agenda: _agendaNameTextKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!.pushNamedAndRemoveUntil(\n                          ChatRoom.routeName, ModalRoute.withName('/'),\n                          arguments: ref.read(createRoomNotifier));\n                    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 835.3353130093815,
              "level": "none",
              "comment": "This method has a halstead volume of 835.3353130093815.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 63,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 63 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 4,
              "level": "none",
              "comment": "This method has a nesting level of 4.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 943,
                      "line": 21,
                      "column": 53
                    },
                    "end": {
                      "offset": 3020,
                      "line": 82,
                      "column": 4
                    },
                    "text": "{\n    ref.watch(nickNameProvider).when(\n          data: (data) => _userNameTextKey.currentState!.didChange(data),\n          loading: () => '',\n          error: (_, __) => '',\n        );\n\n    return BaseScaffold(\n      title: 'ルームを作成',\n      transparentAppbar: true,\n      child: Padding(\n        padding: const EdgeInsets.all(horizontalPadding),\n        child: Form(\n          key: _formKey,\n          child: Column(\n            children: [\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('会議名')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      key: _agendaNameTextKey,\n                      initialValue: 'エレブラ',\n                      validator: agendaNameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              Row(\n                children: [\n                  const SizedBox(width: 50, child: Text('名前')),\n                  const SizedBox(width: 8),\n                  Expanded(\n                    child: TextFormField(\n                      key: _userNameTextKey,\n                      validator: nameValidation,\n                    ),\n                  ),\n                ],\n              ),\n              const LargeSpaceBox(),\n              PrimaryButton(\n                buttonText: '部屋を作成する',\n                onPressed: () async {\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).initRoom(\n                        agenda: _agendaNameTextKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!.pushNamedAndRemoveUntil(\n                          ChatRoom.routeName, ModalRoute.withName('/'),\n                          arguments: ref.read(createRoomNotifier));\n                    }\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2376,
                      "line": 65,
                      "column": 37
                    },
                    "end": {
                      "offset": 2943,
                      "line": 75,
                      "column": 18
                    },
                    "text": "{\n                  if (_formKey.currentState!.validate()) {\n                    if (await ref.read(createRoomNotifier.notifier).initRoom(\n                        agenda: _agendaNameTextKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!.pushNamedAndRemoveUntil(\n                          ChatRoom.routeName, ModalRoute.withName('/'),\n                          arguments: ref.read(createRoomNotifier));\n                    }\n                  }\n                }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2435,
                      "line": 66,
                      "column": 58
                    },
                    "end": {
                      "offset": 2925,
                      "line": 74,
                      "column": 20
                    },
                    "text": "{\n                    if (await ref.read(createRoomNotifier.notifier).initRoom(\n                        agenda: _agendaNameTextKey.currentState!.value!,\n                        nickName: _userNameTextKey.currentState!.value!)) {\n                      await navigatorKey.currentState!.pushNamedAndRemoveUntil(\n                          ChatRoom.routeName, ModalRoute.withName('/'),\n                          arguments: ref.read(createRoomNotifier));\n                    }\n                  }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2662,
                      "line": 69,
                      "column": 75
                    },
                    "end": {
                      "offset": 2905,
                      "line": 73,
                      "column": 22
                    },
                    "text": "{\n                      await navigatorKey.currentState!.pushNamedAndRemoveUntil(\n                          ChatRoom.routeName, ModalRoute.withName('/'),\n                          arguments: ref.read(createRoomNotifier));\n                    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 59,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 59 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 945,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 945,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 983,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 983,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1057,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 1057,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1086,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 1086,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1118,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 1118,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1130,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 1130,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1155,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1155,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1178,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1178,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1209,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1209,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1231,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1231,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1289,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1289,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1310,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1310,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1335,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1335,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1360,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1360,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1384,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1384,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1403,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1403,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1431,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1431,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1496,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1496,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1540,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1540,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1568,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1568,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1610,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1610,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1657,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1657,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1701,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1701,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1756,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1756,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1779,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1779,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1800,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1800,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1819,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1819,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1836,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1836,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1855,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1855,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1883,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 1883,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1947,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 1947,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1991,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 1991,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2019,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 2019,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2061,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 2061,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2106,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 2106,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2155,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 2155,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2178,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2178,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2199,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 2199,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2218,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2218,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2235,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2235,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2272,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2272,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2301,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 2301,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2340,
                      "line": 65,
                      "column": 0
                    },
                    "end": {
                      "offset": 2340,
                      "line": 65,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2378,
                      "line": 66,
                      "column": 0
                    },
                    "end": {
                      "offset": 2378,
                      "line": 66,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2437,
                      "line": 67,
                      "column": 0
                    },
                    "end": {
                      "offset": 2437,
                      "line": 67,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2515,
                      "line": 68,
                      "column": 0
                    },
                    "end": {
                      "offset": 2515,
                      "line": 68,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2588,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 2588,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2664,
                      "line": 70,
                      "column": 0
                    },
                    "end": {
                      "offset": 2664,
                      "line": 70,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2744,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 2744,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2816,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 2816,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2884,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 2884,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2906,
                      "line": 74,
                      "column": 0
                    },
                    "end": {
                      "offset": 2906,
                      "line": 74,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2926,
                      "line": 75,
                      "column": 0
                    },
                    "end": {
                      "offset": 2926,
                      "line": 75,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2945,
                      "line": 76,
                      "column": 0
                    },
                    "end": {
                      "offset": 2945,
                      "line": 76,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2962,
                      "line": 77,
                      "column": 0
                    },
                    "end": {
                      "offset": 2962,
                      "line": 77,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2977,
                      "line": 78,
                      "column": 0
                    },
                    "end": {
                      "offset": 2977,
                      "line": 78,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2990,
                      "line": 79,
                      "column": 0
                    },
                    "end": {
                      "offset": 2990,
                      "line": 79,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3001,
                      "line": 80,
                      "column": 0
                    },
                    "end": {
                      "offset": 3001,
                      "line": 80,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3010,
                      "line": 81,
                      "column": 0
                    },
                    "end": {
                      "offset": 3010,
                      "line": 81,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 41,
              "level": "none",
              "comment": "This method has 41 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/atom/primary_button.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "PrimaryButton": {
          "codeSpan": {
            "start": {
              "offset": 83,
              "line": 4,
              "column": 1
            },
            "end": {
              "offset": 557,
              "line": 25,
              "column": 2
            },
            "text": "class PrimaryButton extends StatelessWidget {\n  const PrimaryButton(\n      {Key? key, required this.buttonText, required this.onPressed})\n      : super(key: key);\n\n  final String buttonText;\n\n  final VoidCallback onPressed;\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      child: SizedBox(\n        height: buttonHeight,\n        child: Center(\n          child: Text(buttonText),\n        ),\n      ),\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor PrimaryButton increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 131,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 245,
                      "line": 7,
                      "column": 25
                    },
                    "text": "const PrimaryButton(\n      {Key? key, required this.buttonText, required this.onPressed})\n      : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 322,
                      "line": 14,
                      "column": 3
                    },
                    "end": {
                      "offset": 555,
                      "line": 24,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      child: SizedBox(\n        height: buttonHeight,\n        child: Center(\n          child: Text(buttonText),\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor PrimaryButton decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 131,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 245,
                      "line": 7,
                      "column": 25
                    },
                    "text": "const PrimaryButton(\n      {Key? key, required this.buttonText, required this.onPressed})\n      : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 322,
                      "line": 14,
                      "column": 3
                    },
                    "end": {
                      "offset": 555,
                      "line": 24,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      child: SizedBox(\n        height: buttonHeight,\n        child: Center(\n          child: Text(buttonText),\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "PrimaryButton.PrimaryButton": {
          "codeSpan": {
            "start": {
              "offset": 131,
              "line": 5,
              "column": 3
            },
            "end": {
              "offset": 245,
              "line": 7,
              "column": 25
            },
            "text": "const PrimaryButton(\n      {Key? key, required this.buttonText, required this.onPressed})\n      : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "PrimaryButton.build": {
          "codeSpan": {
            "start": {
              "offset": 322,
              "line": 14,
              "column": 3
            },
            "end": {
              "offset": 555,
              "line": 24,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      child: SizedBox(\n        height: buttonHeight,\n        child: Center(\n          child: Text(buttonText),\n        ),\n      ),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 38.03910001730775,
              "level": "none",
              "comment": "This method has a halstead volume of 38.03910001730775.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 12 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 357,
                      "line": 14,
                      "column": 38
                    },
                    "end": {
                      "offset": 555,
                      "line": 24,
                      "column": 4
                    },
                    "text": "{\n    return ElevatedButton(\n      onPressed: onPressed,\n      child: SizedBox(\n        height: buttonHeight,\n        child: Center(\n          child: Text(buttonText),\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 9 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 359,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 359,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 386,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 386,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 414,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 414,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 437,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 437,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 467,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 467,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 490,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 490,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 525,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 525,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 536,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 536,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 545,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 545,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 68,
              "level": "none",
              "comment": "This method has 68 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/atom/caution_button.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "CautionButton": {
          "codeSpan": {
            "start": {
              "offset": 83,
              "line": 4,
              "column": 1
            },
            "end": {
              "offset": 660,
              "line": 26,
              "column": 2
            },
            "text": "class CautionButton extends StatelessWidget {\n  const CautionButton(\n      {Key? key, required this.buttonText, required this.onPressed})\n      : super(key: key);\n\n  final String buttonText;\n  final VoidCallback onPressed;\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      style: TextButton.styleFrom(\n          backgroundColor: Theme.of(context).colorScheme.secondary),\n      child: SizedBox(\n        height: buttonHeight,\n        child: Center(\n          child: Text(buttonText),\n        ),\n      ),\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor CautionButton increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 131,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 245,
                      "line": 7,
                      "column": 25
                    },
                    "text": "const CautionButton(\n      {Key? key, required this.buttonText, required this.onPressed})\n      : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 321,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 658,
                      "line": 25,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      style: TextButton.styleFrom(\n          backgroundColor: Theme.of(context).colorScheme.secondary),\n      child: SizedBox(\n        height: buttonHeight,\n        child: Center(\n          child: Text(buttonText),\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor CautionButton decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 131,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 245,
                      "line": 7,
                      "column": 25
                    },
                    "text": "const CautionButton(\n      {Key? key, required this.buttonText, required this.onPressed})\n      : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 321,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 658,
                      "line": 25,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      style: TextButton.styleFrom(\n          backgroundColor: Theme.of(context).colorScheme.secondary),\n      child: SizedBox(\n        height: buttonHeight,\n        child: Center(\n          child: Text(buttonText),\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "CautionButton.CautionButton": {
          "codeSpan": {
            "start": {
              "offset": 131,
              "line": 5,
              "column": 3
            },
            "end": {
              "offset": 245,
              "line": 7,
              "column": 25
            },
            "text": "const CautionButton(\n      {Key? key, required this.buttonText, required this.onPressed})\n      : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "CautionButton.build": {
          "codeSpan": {
            "start": {
              "offset": 321,
              "line": 13,
              "column": 3
            },
            "end": {
              "offset": 658,
              "line": 25,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      style: TextButton.styleFrom(\n          backgroundColor: Theme.of(context).colorScheme.secondary),\n      child: SizedBox(\n        height: buttonHeight,\n        child: Center(\n          child: Text(buttonText),\n        ),\n      ),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 87.56842503028855,
              "level": "none",
              "comment": "This method has a halstead volume of 87.56842503028855.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 14,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 14 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 356,
                      "line": 13,
                      "column": 38
                    },
                    "end": {
                      "offset": 658,
                      "line": 25,
                      "column": 4
                    },
                    "text": "{\n    return ElevatedButton(\n      onPressed: onPressed,\n      style: TextButton.styleFrom(\n          backgroundColor: Theme.of(context).colorScheme.secondary),\n      child: SizedBox(\n        height: buttonHeight,\n        child: Center(\n          child: Text(buttonText),\n        ),\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 11,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 11 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 358,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 358,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 385,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 385,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 413,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 413,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 448,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 448,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 517,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 517,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 540,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 540,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 570,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 570,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 593,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 593,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 628,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 628,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 639,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 639,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 648,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 648,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 64,
              "level": "none",
              "comment": "This method has 64 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/atom/large_space_box.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "LargeSpaceBox": {
          "codeSpan": {
            "start": {
              "offset": 83,
              "line": 4,
              "column": 1
            },
            "end": {
              "offset": 340,
              "line": 12,
              "column": 2
            },
            "text": "class LargeSpaceBox extends StatelessWidget {\n  const LargeSpaceBox({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) => const SizedBox(\n        height: widgetBetweenSpace * 2,\n        width: widgetBetweenSpace * 2,\n      );\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor LargeSpaceBox increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 131,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 181,
                      "line": 5,
                      "column": 53
                    },
                    "text": "const LargeSpaceBox({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 197,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 338,
                      "line": 11,
                      "column": 9
                    },
                    "text": "Widget build(BuildContext context) => const SizedBox(\n        height: widgetBetweenSpace * 2,\n        width: widgetBetweenSpace * 2,\n      );"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor LargeSpaceBox decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 131,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 181,
                      "line": 5,
                      "column": 53
                    },
                    "text": "const LargeSpaceBox({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 197,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 338,
                      "line": 11,
                      "column": 9
                    },
                    "text": "Widget build(BuildContext context) => const SizedBox(\n        height: widgetBetweenSpace * 2,\n        width: widgetBetweenSpace * 2,\n      );"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "LargeSpaceBox.LargeSpaceBox": {
          "codeSpan": {
            "start": {
              "offset": 131,
              "line": 5,
              "column": 3
            },
            "end": {
              "offset": 181,
              "line": 5,
              "column": 53
            },
            "text": "const LargeSpaceBox({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "LargeSpaceBox.build": {
          "codeSpan": {
            "start": {
              "offset": 197,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 338,
              "line": 11,
              "column": 9
            },
            "text": "Widget build(BuildContext context) => const SizedBox(\n        height: widgetBetweenSpace * 2,\n        width: widgetBetweenSpace * 2,\n      );"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 16.253496664211536,
              "level": "none",
              "comment": "This method has a halstead volume of 16.253496664211536.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This method has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 195,
                      "line": 8,
                      "column": 0
                    },
                    "end": {
                      "offset": 195,
                      "line": 8,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 251,
                      "line": 9,
                      "column": 0
                    },
                    "end": {
                      "offset": 251,
                      "line": 9,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 291,
                      "line": 10,
                      "column": 0
                    },
                    "end": {
                      "offset": 291,
                      "line": 10,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 330,
                      "line": 11,
                      "column": 0
                    },
                    "end": {
                      "offset": 330,
                      "line": 11,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 79,
              "level": "none",
              "comment": "This method has 79 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/atom/circle_icon.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "CircleIcon": {
          "codeSpan": {
            "start": {
              "offset": 41,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 629,
              "line": 25,
              "column": 2
            },
            "text": "class CircleIcon extends StatelessWidget {\n  const CircleIcon({Key? key, required this.icon, required this.iconSize})\n      : super(key: key);\n\n  final IconData icon;\n  final double iconSize;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.all(20),\n      padding: const EdgeInsets.all(10),\n      decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(100),\n          color: Colors.transparent,\n          border: Border.all(width: 4)),\n      child: Icon(\n        icon,\n        size: iconSize,\n      ),\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor CircleIcon increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 86,
                      "line": 4,
                      "column": 3
                    },
                    "end": {
                      "offset": 183,
                      "line": 5,
                      "column": 25
                    },
                    "text": "const CircleIcon({Key? key, required this.icon, required this.iconSize})\n      : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 248,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 627,
                      "line": 24,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.all(20),\n      padding: const EdgeInsets.all(10),\n      decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(100),\n          color: Colors.transparent,\n          border: Border.all(width: 4)),\n      child: Icon(\n        icon,\n        size: iconSize,\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor CircleIcon decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 86,
                      "line": 4,
                      "column": 3
                    },
                    "end": {
                      "offset": 183,
                      "line": 5,
                      "column": 25
                    },
                    "text": "const CircleIcon({Key? key, required this.icon, required this.iconSize})\n      : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 248,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 627,
                      "line": 24,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.all(20),\n      padding: const EdgeInsets.all(10),\n      decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(100),\n          color: Colors.transparent,\n          border: Border.all(width: 4)),\n      child: Icon(\n        icon,\n        size: iconSize,\n      ),\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "CircleIcon.CircleIcon": {
          "codeSpan": {
            "start": {
              "offset": 86,
              "line": 4,
              "column": 3
            },
            "end": {
              "offset": 183,
              "line": 5,
              "column": 25
            },
            "text": "const CircleIcon({Key? key, required this.icon, required this.iconSize})\n      : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "CircleIcon.build": {
          "codeSpan": {
            "start": {
              "offset": 248,
              "line": 11,
              "column": 3
            },
            "end": {
              "offset": 627,
              "line": 24,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.all(20),\n      padding: const EdgeInsets.all(10),\n      decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(100),\n          color: Colors.transparent,\n          border: Border.all(width: 4)),\n      child: Icon(\n        icon,\n        size: iconSize,\n      ),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 105.41561814669026,
              "level": "none",
              "comment": "This method has a halstead volume of 105.41561814669026.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 15,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 15 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 283,
                      "line": 11,
                      "column": 38
                    },
                    "end": {
                      "offset": 627,
                      "line": 24,
                      "column": 4
                    },
                    "text": "{\n    return Container(\n      margin: const EdgeInsets.all(20),\n      padding: const EdgeInsets.all(10),\n      decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(100),\n          color: Colors.transparent,\n          border: Border.all(width: 4)),\n      child: Icon(\n        icon,\n        size: iconSize,\n      ),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 12 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 285,
                      "line": 12,
                      "column": 0
                    },
                    "end": {
                      "offset": 285,
                      "line": 12,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 307,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 307,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 347,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 347,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 388,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 388,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 421,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 421,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 473,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 473,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 510,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 510,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 551,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 551,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 570,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 570,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 584,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 584,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 608,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 608,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 617,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 617,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 63,
              "level": "none",
              "comment": "This method has 63 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/atom/icon_text.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "IconText": {
          "codeSpan": {
            "start": {
              "offset": 83,
              "line": 4,
              "column": 1
            },
            "end": {
              "offset": 461,
              "line": 21,
              "column": 2
            },
            "text": "class IconText extends StatelessWidget {\n  const IconText({Key? key, required this.icon, required this.text})\n      : super(key: key);\n\n  final IconData icon;\n  final String text;\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      children: [\n        Icon(icon),\n        const SizedBox(width: widgetBetweenSpace),\n        Text(text),\n      ],\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor IconText increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 126,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 217,
                      "line": 6,
                      "column": 25
                    },
                    "text": "const IconText({Key? key, required this.icon, required this.text})\n      : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 278,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 459,
                      "line": 20,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return Row(\n      children: [\n        Icon(icon),\n        const SizedBox(width: widgetBetweenSpace),\n        Text(text),\n      ],\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor IconText decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 126,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 217,
                      "line": 6,
                      "column": 25
                    },
                    "text": "const IconText({Key? key, required this.icon, required this.text})\n      : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 278,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 459,
                      "line": 20,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return Row(\n      children: [\n        Icon(icon),\n        const SizedBox(width: widgetBetweenSpace),\n        Text(text),\n      ],\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "IconText.IconText": {
          "codeSpan": {
            "start": {
              "offset": 126,
              "line": 5,
              "column": 3
            },
            "end": {
              "offset": 217,
              "line": 6,
              "column": 25
            },
            "text": "const IconText({Key? key, required this.icon, required this.text})\n      : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "IconText.build": {
          "codeSpan": {
            "start": {
              "offset": 278,
              "line": 12,
              "column": 3
            },
            "end": {
              "offset": 459,
              "line": 20,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\n    return Row(\n      children: [\n        Icon(icon),\n        const SizedBox(width: widgetBetweenSpace),\n        Text(text),\n      ],\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 28.529325012980813,
              "level": "none",
              "comment": "This method has a halstead volume of 28.529325012980813.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 10,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 10 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 313,
                      "line": 12,
                      "column": 38
                    },
                    "end": {
                      "offset": 459,
                      "line": 20,
                      "column": 4
                    },
                    "text": "{\n    return Row(\n      children: [\n        Icon(icon),\n        const SizedBox(width: widgetBetweenSpace),\n        Text(text),\n      ],\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 7,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 7 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 315,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 315,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 331,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 331,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 349,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 349,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 369,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 369,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 420,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 420,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 440,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 440,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 449,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 449,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 72,
              "level": "none",
              "comment": "This method has 72 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/atom/icon_only_button.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "IconOnlyButton": {
          "codeSpan": {
            "start": {
              "offset": 41,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 641,
              "line": 28,
              "column": 2
            },
            "text": "class IconOnlyButton extends StatelessWidget {\n  const IconOnlyButton({\n    Key? key,\n    required this.onPressed,\n    required this.icon,\n  }) : super(key: key);\n\n  final VoidCallback? onPressed;\n\n  final IconData icon;\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n        onPressed: onPressed,\n        style: ElevatedButton.styleFrom(\n            primary: Colors.white,\n            shape: const CircleBorder(),\n            padding: const EdgeInsets.all(16)),\n        child: Icon(\n          icon,\n          color: Colors.black,\n          size: 30,\n        ));\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor IconOnlyButton increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 90,
                      "line": 4,
                      "column": 3
                    },
                    "end": {
                      "offset": 203,
                      "line": 8,
                      "column": 24
                    },
                    "text": "const IconOnlyButton({\n    Key? key,\n    required this.onPressed,\n    required this.icon,\n  }) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 277,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 639,
                      "line": 27,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return ElevatedButton(\n        onPressed: onPressed,\n        style: ElevatedButton.styleFrom(\n            primary: Colors.white,\n            shape: const CircleBorder(),\n            padding: const EdgeInsets.all(16)),\n        child: Icon(\n          icon,\n          color: Colors.black,\n          size: 30,\n        ));\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor IconOnlyButton decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 90,
                      "line": 4,
                      "column": 3
                    },
                    "end": {
                      "offset": 203,
                      "line": 8,
                      "column": 24
                    },
                    "text": "const IconOnlyButton({\n    Key? key,\n    required this.onPressed,\n    required this.icon,\n  }) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 277,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 639,
                      "line": 27,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\n    return ElevatedButton(\n        onPressed: onPressed,\n        style: ElevatedButton.styleFrom(\n            primary: Colors.white,\n            shape: const CircleBorder(),\n            padding: const EdgeInsets.all(16)),\n        child: Icon(\n          icon,\n          color: Colors.black,\n          size: 30,\n        ));\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "IconOnlyButton.IconOnlyButton": {
          "codeSpan": {
            "start": {
              "offset": 90,
              "line": 4,
              "column": 3
            },
            "end": {
              "offset": 203,
              "line": 8,
              "column": 24
            },
            "text": "const IconOnlyButton({\n    Key? key,\n    required this.onPressed,\n    required this.icon,\n  }) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "IconOnlyButton.build": {
          "codeSpan": {
            "start": {
              "offset": 277,
              "line": 15,
              "column": 3
            },
            "end": {
              "offset": 639,
              "line": 27,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\n    return ElevatedButton(\n        onPressed: onPressed,\n        style: ElevatedButton.styleFrom(\n            primary: Colors.white,\n            shape: const CircleBorder(),\n            padding: const EdgeInsets.all(16)),\n        child: Icon(\n          icon,\n          color: Colors.black,\n          size: 30,\n        ));\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 87.56842503028855,
              "level": "none",
              "comment": "This method has a halstead volume of 87.56842503028855.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 14,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 14 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 312,
                      "line": 15,
                      "column": 38
                    },
                    "end": {
                      "offset": 639,
                      "line": 27,
                      "column": 4
                    },
                    "text": "{\n    return ElevatedButton(\n        onPressed: onPressed,\n        style: ElevatedButton.styleFrom(\n            primary: Colors.white,\n            shape: const CircleBorder(),\n            padding: const EdgeInsets.all(16)),\n        child: Icon(\n          icon,\n          color: Colors.black,\n          size: 30,\n        ));\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 11,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 11 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 314,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 314,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 341,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 341,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 371,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 371,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 412,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 412,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 447,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 447,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 488,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 488,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 536,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 536,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 557,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 557,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 573,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 573,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 604,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 604,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 624,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 624,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 64,
              "level": "none",
              "comment": "This method has 64 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/atom/space_box.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "SpaceBox": {
          "codeSpan": {
            "start": {
              "offset": 83,
              "line": 4,
              "column": 1
            },
            "end": {
              "offset": 322,
              "line": 12,
              "column": 2
            },
            "text": "class SpaceBox extends StatelessWidget {\n  const SpaceBox({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) => const SizedBox(\n        height: widgetBetweenSpace,\n        width: widgetBetweenSpace,\n      );\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor SpaceBox increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 126,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 171,
                      "line": 5,
                      "column": 48
                    },
                    "text": "const SpaceBox({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 187,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 320,
                      "line": 11,
                      "column": 9
                    },
                    "text": "Widget build(BuildContext context) => const SizedBox(\n        height: widgetBetweenSpace,\n        width: widgetBetweenSpace,\n      );"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor SpaceBox decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 126,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 171,
                      "line": 5,
                      "column": 48
                    },
                    "text": "const SpaceBox({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 187,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 320,
                      "line": 11,
                      "column": 9
                    },
                    "text": "Widget build(BuildContext context) => const SizedBox(\n        height: widgetBetweenSpace,\n        width: widgetBetweenSpace,\n      );"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "SpaceBox.SpaceBox": {
          "codeSpan": {
            "start": {
              "offset": 126,
              "line": 5,
              "column": 3
            },
            "end": {
              "offset": 171,
              "line": 5,
              "column": 48
            },
            "text": "const SpaceBox({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "SpaceBox.build": {
          "codeSpan": {
            "start": {
              "offset": 187,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 320,
              "line": 11,
              "column": 9
            },
            "text": "Widget build(BuildContext context) => const SizedBox(\n        height: widgetBetweenSpace,\n        width: widgetBetweenSpace,\n      );"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 10,
              "level": "none",
              "comment": "This method has a halstead volume of 10.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This method has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 185,
                      "line": 8,
                      "column": 0
                    },
                    "end": {
                      "offset": 185,
                      "line": 8,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 241,
                      "line": 9,
                      "column": 0
                    },
                    "end": {
                      "offset": 241,
                      "line": 9,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 277,
                      "line": 10,
                      "column": 0
                    },
                    "end": {
                      "offset": 277,
                      "line": 10,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 312,
                      "line": 11,
                      "column": 0
                    },
                    "end": {
                      "offset": 312,
                      "line": 11,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 80,
              "level": "none",
              "comment": "This method has 80 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/organism/license_page.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {},
      "functions": {
        "showAppLicencePage": {
          "codeSpan": {
            "start": {
              "offset": 100,
              "line": 4,
              "column": 1
            },
            "end": {
              "offset": 331,
              "line": 11,
              "column": 2
            },
            "text": "Future<void> showAppLicencePage(BuildContext context) async {\n  final info = await PackageInfo.fromPlatform();\n  showLicensePage(\n    context: context,\n    applicationName: info.appName,\n    applicationVersion: info.version,\n  );\n}"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 48.43204266092217,
              "level": "none",
              "comment": "This function has a halstead volume of 48.43204266092217.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 8,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 8 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This function has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 160,
                      "line": 4,
                      "column": 61
                    },
                    "end": {
                      "offset": 331,
                      "line": 11,
                      "column": 2
                    },
                    "text": "{\n  final info = await PackageInfo.fromPlatform();\n  showLicensePage(\n    context: context,\n    applicationName: info.appName,\n    applicationVersion: info.version,\n  );\n}"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This function has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 6 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 162,
                      "line": 5,
                      "column": 0
                    },
                    "end": {
                      "offset": 162,
                      "line": 5,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 211,
                      "line": 6,
                      "column": 0
                    },
                    "end": {
                      "offset": 211,
                      "line": 6,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 230,
                      "line": 7,
                      "column": 0
                    },
                    "end": {
                      "offset": 230,
                      "line": 7,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 252,
                      "line": 8,
                      "column": 0
                    },
                    "end": {
                      "offset": 252,
                      "line": 8,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 287,
                      "line": 9,
                      "column": 0
                    },
                    "end": {
                      "offset": 287,
                      "line": 9,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 325,
                      "line": 10,
                      "column": 0
                    },
                    "end": {
                      "offset": 325,
                      "line": 10,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 72,
              "level": "none",
              "comment": "This function has 72 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/organism/hamburger_menu.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "HamburgerMenu": {
          "codeSpan": {
            "start": {
              "offset": 281,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 2403,
              "line": 58,
              "column": 2
            },
            "text": "class HamburgerMenu extends HookConsumerWidget {\n  const HamburgerMenu({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final hamburgerController = ref.watch(hamburgerProvider.notifier);\n    final data = ref.watch(hamburgerProvider);\n    final widget = data.when(\n        data: (state) => SafeArea(\n              child: Drawer(\n                child: ListView(\n                  padding: EdgeInsets.zero,\n                  children: <Widget>[\n                    UserAccountsDrawerHeader(\n                      currentAccountPicture: state.userIcon.isNotEmpty\n                          ? CachedNetworkImage(\n                              height: 50,\n                              imageUrl: state.userIcon,\n                              placeholder: (context, url) =>\n                                  const Icon(Icons.account_circle, size: 50),\n                            )\n                          : const Icon(Icons.account_circle, size: 80),\n                      currentAccountPictureSize: const Size(30, 30),\n                      accountName: Text(state.userName),\n                      accountEmail: Text(state.userEmail),\n                      onDetailsPressed: () {\n                        print('Tap');\n                      },\n                    ),\n                    ListTile(\n                      title: const Text('OSSライセンス'),\n                      trailing: const Icon(Icons.keyboard_arrow_right),\n                      onTap: () {\n                        showAppLicencePage(context);\n                      },\n                    ),\n                    state.isLogin\n                        ? ListTile(\n                            title: const Text('ログアウト'),\n                            trailing: const Icon(Icons.keyboard_arrow_right),\n                            onTap: hamburgerController.logout,\n                          )\n                        : Container(),\n                  ],\n                ),\n              ),\n            ),\n        error: (_, __) => const SizedBox(),\n        loading: () => const SizedBox());\n    return widget;\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor HamburgerMenu increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 332,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 382,
                      "line": 8,
                      "column": 53
                    },
                    "text": "const HamburgerMenu({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 398,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 2401,
                      "line": 57,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final hamburgerController = ref.watch(hamburgerProvider.notifier);\n    final data = ref.watch(hamburgerProvider);\n    final widget = data.when(\n        data: (state) => SafeArea(\n              child: Drawer(\n                child: ListView(\n                  padding: EdgeInsets.zero,\n                  children: <Widget>[\n                    UserAccountsDrawerHeader(\n                      currentAccountPicture: state.userIcon.isNotEmpty\n                          ? CachedNetworkImage(\n                              height: 50,\n                              imageUrl: state.userIcon,\n                              placeholder: (context, url) =>\n                                  const Icon(Icons.account_circle, size: 50),\n                            )\n                          : const Icon(Icons.account_circle, size: 80),\n                      currentAccountPictureSize: const Size(30, 30),\n                      accountName: Text(state.userName),\n                      accountEmail: Text(state.userEmail),\n                      onDetailsPressed: () {\n                        print('Tap');\n                      },\n                    ),\n                    ListTile(\n                      title: const Text('OSSライセンス'),\n                      trailing: const Icon(Icons.keyboard_arrow_right),\n                      onTap: () {\n                        showAppLicencePage(context);\n                      },\n                    ),\n                    state.isLogin\n                        ? ListTile(\n                            title: const Text('ログアウト'),\n                            trailing: const Icon(Icons.keyboard_arrow_right),\n                            onTap: hamburgerController.logout,\n                          )\n                        : Container(),\n                  ],\n                ),\n              ),\n            ),\n        error: (_, __) => const SizedBox(),\n        loading: () => const SizedBox());\n    return widget;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor HamburgerMenu decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 332,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 382,
                      "line": 8,
                      "column": 53
                    },
                    "text": "const HamburgerMenu({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 398,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 2401,
                      "line": 57,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final hamburgerController = ref.watch(hamburgerProvider.notifier);\n    final data = ref.watch(hamburgerProvider);\n    final widget = data.when(\n        data: (state) => SafeArea(\n              child: Drawer(\n                child: ListView(\n                  padding: EdgeInsets.zero,\n                  children: <Widget>[\n                    UserAccountsDrawerHeader(\n                      currentAccountPicture: state.userIcon.isNotEmpty\n                          ? CachedNetworkImage(\n                              height: 50,\n                              imageUrl: state.userIcon,\n                              placeholder: (context, url) =>\n                                  const Icon(Icons.account_circle, size: 50),\n                            )\n                          : const Icon(Icons.account_circle, size: 80),\n                      currentAccountPictureSize: const Size(30, 30),\n                      accountName: Text(state.userName),\n                      accountEmail: Text(state.userEmail),\n                      onDetailsPressed: () {\n                        print('Tap');\n                      },\n                    ),\n                    ListTile(\n                      title: const Text('OSSライセンス'),\n                      trailing: const Icon(Icons.keyboard_arrow_right),\n                      onTap: () {\n                        showAppLicencePage(context);\n                      },\n                    ),\n                    state.isLogin\n                        ? ListTile(\n                            title: const Text('ログアウト'),\n                            trailing: const Icon(Icons.keyboard_arrow_right),\n                            onTap: hamburgerController.logout,\n                          )\n                        : Container(),\n                  ],\n                ),\n              ),\n            ),\n        error: (_, __) => const SizedBox(),\n        loading: () => const SizedBox());\n    return widget;\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "HamburgerMenu.HamburgerMenu": {
          "codeSpan": {
            "start": {
              "offset": 332,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 382,
              "line": 8,
              "column": 53
            },
            "text": "const HamburgerMenu({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "HamburgerMenu.build": {
          "codeSpan": {
            "start": {
              "offset": 398,
              "line": 11,
              "column": 3
            },
            "end": {
              "offset": 2401,
              "line": 57,
              "column": 4
            },
            "text": "Widget build(BuildContext context, WidgetRef ref) {\n    final hamburgerController = ref.watch(hamburgerProvider.notifier);\n    final data = ref.watch(hamburgerProvider);\n    final widget = data.when(\n        data: (state) => SafeArea(\n              child: Drawer(\n                child: ListView(\n                  padding: EdgeInsets.zero,\n                  children: <Widget>[\n                    UserAccountsDrawerHeader(\n                      currentAccountPicture: state.userIcon.isNotEmpty\n                          ? CachedNetworkImage(\n                              height: 50,\n                              imageUrl: state.userIcon,\n                              placeholder: (context, url) =>\n                                  const Icon(Icons.account_circle, size: 50),\n                            )\n                          : const Icon(Icons.account_circle, size: 80),\n                      currentAccountPictureSize: const Size(30, 30),\n                      accountName: Text(state.userName),\n                      accountEmail: Text(state.userEmail),\n                      onDetailsPressed: () {\n                        print('Tap');\n                      },\n                    ),\n                    ListTile(\n                      title: const Text('OSSライセンス'),\n                      trailing: const Icon(Icons.keyboard_arrow_right),\n                      onTap: () {\n                        showAppLicencePage(context);\n                      },\n                    ),\n                    state.isLogin\n                        ? ListTile(\n                            title: const Text('ログアウト'),\n                            trailing: const Icon(Icons.keyboard_arrow_right),\n                            onTap: hamburgerController.logout,\n                          )\n                        : Container(),\n                  ],\n                ),\n              ),\n            ),\n        error: (_, __) => const SizedBox(),\n        loading: () => const SizedBox());\n    return widget;\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 3,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 3.",
              "context": [
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 868,
                      "line": 21,
                      "column": 46
                    },
                    "end": {
                      "offset": 1279,
                      "line": 28,
                      "column": 71
                    },
                    "text": "state.userIcon.isNotEmpty\n                          ? CachedNetworkImage(\n                              height: 50,\n                              imageUrl: state.userIcon,\n                              placeholder: (context, url) =>\n                                  const Icon(Icons.account_circle, size: 50),\n                            )\n                          : const Icon(Icons.account_circle, size: 80)"
                  }
                },
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1907,
                      "line": 43,
                      "column": 21
                    },
                    "end": {
                      "offset": 2219,
                      "line": 49,
                      "column": 38
                    },
                    "text": "state.isLogin\n                        ? ListTile(\n                            title: const Text('ログアウト'),\n                            trailing: const Icon(Icons.keyboard_arrow_right),\n                            onTap: hamburgerController.logout,\n                          )\n                        : Container()"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 1017.6972475395986,
              "level": "none",
              "comment": "This method has a halstead volume of 1017.6972475395986.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 48,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 48 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 448,
                      "line": 11,
                      "column": 53
                    },
                    "end": {
                      "offset": 2401,
                      "line": 57,
                      "column": 4
                    },
                    "text": "{\n    final hamburgerController = ref.watch(hamburgerProvider.notifier);\n    final data = ref.watch(hamburgerProvider);\n    final widget = data.when(\n        data: (state) => SafeArea(\n              child: Drawer(\n                child: ListView(\n                  padding: EdgeInsets.zero,\n                  children: <Widget>[\n                    UserAccountsDrawerHeader(\n                      currentAccountPicture: state.userIcon.isNotEmpty\n                          ? CachedNetworkImage(\n                              height: 50,\n                              imageUrl: state.userIcon,\n                              placeholder: (context, url) =>\n                                  const Icon(Icons.account_circle, size: 50),\n                            )\n                          : const Icon(Icons.account_circle, size: 80),\n                      currentAccountPictureSize: const Size(30, 30),\n                      accountName: Text(state.userName),\n                      accountEmail: Text(state.userEmail),\n                      onDetailsPressed: () {\n                        print('Tap');\n                      },\n                    ),\n                    ListTile(\n                      title: const Text('OSSライセンス'),\n                      trailing: const Icon(Icons.keyboard_arrow_right),\n                      onTap: () {\n                        showAppLicencePage(context);\n                      },\n                    ),\n                    state.isLogin\n                        ? ListTile(\n                            title: const Text('ログアウト'),\n                            trailing: const Icon(Icons.keyboard_arrow_right),\n                            onTap: hamburgerController.logout,\n                          )\n                        : Container(),\n                  ],\n                ),\n              ),\n            ),\n        error: (_, __) => const SizedBox(),\n        loading: () => const SizedBox());\n    return widget;\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1509,
                      "line": 32,
                      "column": 44
                    },
                    "end": {
                      "offset": 1572,
                      "line": 34,
                      "column": 24
                    },
                    "text": "{\n                        print('Tap');\n                      }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 45,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 45 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 450,
                      "line": 12,
                      "column": 0
                    },
                    "end": {
                      "offset": 450,
                      "line": 12,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 521,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 521,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 568,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 568,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 598,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 598,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 633,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 633,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 662,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 662,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 695,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 695,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 739,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 739,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 777,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 777,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 823,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 823,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 894,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 894,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 942,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 942,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 984,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 984,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1040,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 1040,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1101,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 1101,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1179,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 1179,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1209,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 1209,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1281,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1281,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1350,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1350,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1407,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1407,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1466,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1466,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1511,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1511,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1549,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1549,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1574,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1574,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1597,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1597,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1627,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1627,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1680,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1680,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1752,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1752,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1786,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1786,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1839,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1839,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1864,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1864,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1887,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1887,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1921,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1921,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1957,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1957,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2013,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 2013,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2091,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 2091,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2154,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 2154,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2182,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 2182,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2221,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 2221,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2242,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 2242,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2261,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 2261,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2278,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 2278,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2293,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 2293,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2337,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 2337,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2379,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 2379,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 43,
              "level": "none",
              "comment": "This method has 43 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/widget/template/base_scaffold.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "BaseScaffold": {
          "codeSpan": {
            "start": {
              "offset": 105,
              "line": 4,
              "column": 1
            },
            "end": {
              "offset": 1403,
              "line": 51,
              "column": 2
            },
            "text": "class BaseScaffold extends StatelessWidget {\r\n  const BaseScaffold({\r\n    Key? key,\r\n    this.hasDrawer = false,\r\n    this.hasAppBar = true,\r\n    this.transparentAppbar = false,\r\n    this.enableBack = true,\r\n    this.leadingWidget,\r\n    this.actionWidget,\r\n    required this.title,\r\n    required this.child,\r\n    this.floatingActionButton,\r\n  }) : super(key: key);\r\n\r\n  final bool hasDrawer;\r\n  final bool hasAppBar;\r\n  final Widget? leadingWidget;\r\n  final List<Widget>? actionWidget;\r\n  final String title;\r\n  final bool transparentAppbar;\r\n  final bool enableBack;\r\n  final Widget child;\r\n  final Widget? floatingActionButton;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return WillPopScope(\r\n      onWillPop: _willPopCallback,\r\n      child: Scaffold(\r\n        backgroundColor: Theme.of(context).backgroundColor,\r\n        appBar: AppBar(\r\n          title: Text(title),\r\n          centerTitle: true,\r\n          elevation: transparentAppbar ? 0 : 4,\r\n          leading: leadingWidget,\r\n          actions: actionWidget,\r\n        ),\r\n        drawer: hasDrawer ? const HamburgerMenu() : null,\r\n        body: SafeArea(child: child),\r\n        floatingActionButton: floatingActionButton,\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<bool> _willPopCallback() async {\r\n    return enableBack;\r\n  }\r\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor BaseScaffold increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 153,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 469,
                      "line": 16,
                      "column": 24
                    },
                    "text": "const BaseScaffold({\r\n    Key? key,\r\n    this.hasDrawer = false,\r\n    this.hasAppBar = true,\r\n    this.transparentAppbar = false,\r\n    this.enableBack = true,\r\n    this.leadingWidget,\r\n    this.actionWidget,\r\n    required this.title,\r\n    required this.child,\r\n    this.floatingActionButton,\r\n  }) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 753,
                      "line": 29,
                      "column": 3
                    },
                    "end": {
                      "offset": 1326,
                      "line": 46,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\r\n    return WillPopScope(\r\n      onWillPop: _willPopCallback,\r\n      child: Scaffold(\r\n        backgroundColor: Theme.of(context).backgroundColor,\r\n        appBar: AppBar(\r\n          title: Text(title),\r\n          centerTitle: true,\r\n          elevation: transparentAppbar ? 0 : 4,\r\n          leading: leadingWidget,\r\n          actions: actionWidget,\r\n        ),\r\n        drawer: hasDrawer ? const HamburgerMenu() : null,\r\n        body: SafeArea(child: child),\r\n        floatingActionButton: floatingActionButton,\r\n      ),\r\n    );\r\n  }"
                  }
                },
                {
                  "message": "method _willPopCallback increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1332,
                      "line": 48,
                      "column": 3
                    },
                    "end": {
                      "offset": 1400,
                      "line": 50,
                      "column": 4
                    },
                    "text": "Future<bool> _willPopCallback() async {\r\n    return enableBack;\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor BaseScaffold decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 153,
                      "line": 5,
                      "column": 3
                    },
                    "end": {
                      "offset": 469,
                      "line": 16,
                      "column": 24
                    },
                    "text": "const BaseScaffold({\r\n    Key? key,\r\n    this.hasDrawer = false,\r\n    this.hasAppBar = true,\r\n    this.transparentAppbar = false,\r\n    this.enableBack = true,\r\n    this.leadingWidget,\r\n    this.actionWidget,\r\n    required this.title,\r\n    required this.child,\r\n    this.floatingActionButton,\r\n  }) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 753,
                      "line": 29,
                      "column": 3
                    },
                    "end": {
                      "offset": 1326,
                      "line": 46,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\r\n    return WillPopScope(\r\n      onWillPop: _willPopCallback,\r\n      child: Scaffold(\r\n        backgroundColor: Theme.of(context).backgroundColor,\r\n        appBar: AppBar(\r\n          title: Text(title),\r\n          centerTitle: true,\r\n          elevation: transparentAppbar ? 0 : 4,\r\n          leading: leadingWidget,\r\n          actions: actionWidget,\r\n        ),\r\n        drawer: hasDrawer ? const HamburgerMenu() : null,\r\n        body: SafeArea(child: child),\r\n        floatingActionButton: floatingActionButton,\r\n      ),\r\n    );\r\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "BaseScaffold.BaseScaffold": {
          "codeSpan": {
            "start": {
              "offset": 153,
              "line": 5,
              "column": 3
            },
            "end": {
              "offset": 469,
              "line": 16,
              "column": 24
            },
            "text": "const BaseScaffold({\r\n    Key? key,\r\n    this.hasDrawer = false,\r\n    this.hasAppBar = true,\r\n    this.transparentAppbar = false,\r\n    this.enableBack = true,\r\n    this.leadingWidget,\r\n    this.actionWidget,\r\n    required this.title,\r\n    required this.child,\r\n    this.floatingActionButton,\r\n  }) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 12 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "BaseScaffold.build": {
          "codeSpan": {
            "start": {
              "offset": 753,
              "line": 29,
              "column": 3
            },
            "end": {
              "offset": 1326,
              "line": 46,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\r\n    return WillPopScope(\r\n      onWillPop: _willPopCallback,\r\n      child: Scaffold(\r\n        backgroundColor: Theme.of(context).backgroundColor,\r\n        appBar: AppBar(\r\n          title: Text(title),\r\n          centerTitle: true,\r\n          elevation: transparentAppbar ? 0 : 4,\r\n          leading: leadingWidget,\r\n          actions: actionWidget,\r\n        ),\r\n        drawer: hasDrawer ? const HamburgerMenu() : null,\r\n        body: SafeArea(child: child),\r\n        floatingActionButton: floatingActionButton,\r\n      ),\r\n    );\r\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 3,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 3.",
              "context": [
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1045,
                      "line": 37,
                      "column": 22
                    },
                    "end": {
                      "offset": 1070,
                      "line": 37,
                      "column": 47
                    },
                    "text": "transparentAppbar ? 0 : 4"
                  }
                },
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1170,
                      "line": 41,
                      "column": 17
                    },
                    "end": {
                      "offset": 1210,
                      "line": 41,
                      "column": 57
                    },
                    "text": "hasDrawer ? const HamburgerMenu() : null"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 156.91128757139447,
              "level": "none",
              "comment": "This method has a halstead volume of 156.91128757139447.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 19,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 19 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 788,
                      "line": 29,
                      "column": 38
                    },
                    "end": {
                      "offset": 1326,
                      "line": 46,
                      "column": 4
                    },
                    "text": "{\r\n    return WillPopScope(\r\n      onWillPop: _willPopCallback,\r\n      child: Scaffold(\r\n        backgroundColor: Theme.of(context).backgroundColor,\r\n        appBar: AppBar(\r\n          title: Text(title),\r\n          centerTitle: true,\r\n          elevation: transparentAppbar ? 0 : 4,\r\n          leading: leadingWidget,\r\n          actions: actionWidget,\r\n        ),\r\n        drawer: hasDrawer ? const HamburgerMenu() : null,\r\n        body: SafeArea(child: child),\r\n        floatingActionButton: floatingActionButton,\r\n      ),\r\n    );\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 16,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 16 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 791,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 791,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 817,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 817,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 853,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 853,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 877,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 877,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 938,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 938,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 963,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 963,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 994,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 994,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1024,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1024,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1073,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1073,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1108,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1108,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1142,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1142,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1154,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1154,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1213,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1213,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1252,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1252,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1305,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1305,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1315,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1315,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 58,
              "level": "none",
              "comment": "This method has 58 maintainability index.",
              "context": []
            }
          ]
        },
        "BaseScaffold._willPopCallback": {
          "codeSpan": {
            "start": {
              "offset": 1332,
              "line": 48,
              "column": 3
            },
            "end": {
              "offset": 1400,
              "line": 50,
              "column": 4
            },
            "text": "Future<bool> _willPopCallback() async {\r\n    return enableBack;\r\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This method has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1370,
                      "line": 48,
                      "column": 41
                    },
                    "end": {
                      "offset": 1400,
                      "line": 50,
                      "column": 4
                    },
                    "text": "{\r\n    return enableBack;\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This method has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1373,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1373,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This method has 100 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/util/sign_up_status.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "SignUpStatusExtention": {
          "codeSpan": {
            "start": {
              "offset": 345,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 1241,
              "line": 43,
              "column": 2
            },
            "text": "extension SignUpStatusExtention on SignUpStatus {\n  static final map = {\n    SignUpStatus.success: 'アカウントを作成しました。',\n    SignUpStatus.failed: 'アカウントを登録できません。お手数ですが、開発者にお問い合わせください。',\n    SignUpStatus.alreadyUse: 'すでに使用されているメールアドレスです。',\n    SignUpStatus.invalidEmail: '無効なメールアドレスです。',\n    SignUpStatus.operationNotAllowed: 'アカウントを登録できません。お手数ですが、開発者にお問い合わせください。',\n    SignUpStatus.weakPassword: '安全なパスワードではありません。６文字以上の入力をお願いします',\n  };\n\n  String? get statusString => map[this];\n\n  static SignUpStatus getErrorState(FirebaseAuthException error) {\n    switch (error.code) {\n      case emailAlreadyInUse:\n        return SignUpStatus.alreadyUse;\n      case invalidEmail:\n        return SignUpStatus.invalidEmail;\n      case operationNotAllowed:\n        return SignUpStatus.operationNotAllowed;\n      case weakPassword:\n        return SignUpStatus.weakPassword;\n    }\n\n    return SignUpStatus.failed;\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This extension has 2 methods.",
              "context": [
                {
                  "message": "getter statusString increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 779,
                      "line": 27,
                      "column": 3
                    },
                    "end": {
                      "offset": 817,
                      "line": 27,
                      "column": 41
                    },
                    "text": "String? get statusString => map[this];"
                  }
                },
                {
                  "message": "method getErrorState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 821,
                      "line": 29,
                      "column": 3
                    },
                    "end": {
                      "offset": 1239,
                      "line": 42,
                      "column": 4
                    },
                    "text": "static SignUpStatus getErrorState(FirebaseAuthException error) {\n    switch (error.code) {\n      case emailAlreadyInUse:\n        return SignUpStatus.alreadyUse;\n      case invalidEmail:\n        return SignUpStatus.invalidEmail;\n      case operationNotAllowed:\n        return SignUpStatus.operationNotAllowed;\n      case weakPassword:\n        return SignUpStatus.weakPassword;\n    }\n\n    return SignUpStatus.failed;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This extension has a weight of 0.5.",
              "context": [
                {
                  "message": "public getter statusString decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 779,
                      "line": 27,
                      "column": 3
                    },
                    "end": {
                      "offset": 817,
                      "line": 27,
                      "column": 41
                    },
                    "text": "String? get statusString => map[this];"
                  }
                },
                {
                  "message": "functional method getErrorState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 821,
                      "line": 29,
                      "column": 3
                    },
                    "end": {
                      "offset": 1239,
                      "line": 42,
                      "column": 4
                    },
                    "text": "static SignUpStatus getErrorState(FirebaseAuthException error) {\n    switch (error.code) {\n      case emailAlreadyInUse:\n        return SignUpStatus.alreadyUse;\n      case invalidEmail:\n        return SignUpStatus.invalidEmail;\n      case operationNotAllowed:\n        return SignUpStatus.operationNotAllowed;\n      case weakPassword:\n        return SignUpStatus.weakPassword;\n    }\n\n    return SignUpStatus.failed;\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "SignUpStatusExtention.statusString": {
          "codeSpan": {
            "start": {
              "offset": 779,
              "line": 27,
              "column": 3
            },
            "end": {
              "offset": 817,
              "line": 27,
              "column": 41
            },
            "text": "String? get statusString => map[this];"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This getter has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This getter has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This getter has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This getter has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This getter has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This getter has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 777,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 777,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This getter has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "SignUpStatusExtention.getErrorState": {
          "codeSpan": {
            "start": {
              "offset": 821,
              "line": 29,
              "column": 3
            },
            "end": {
              "offset": 1239,
              "line": 42,
              "column": 4
            },
            "text": "static SignUpStatus getErrorState(FirebaseAuthException error) {\n    switch (error.code) {\n      case emailAlreadyInUse:\n        return SignUpStatus.alreadyUse;\n      case invalidEmail:\n        return SignUpStatus.invalidEmail;\n      case operationNotAllowed:\n        return SignUpStatus.operationNotAllowed;\n      case weakPassword:\n        return SignUpStatus.weakPassword;\n    }\n\n    return SignUpStatus.failed;\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 5,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 5.",
              "context": [
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 918,
                      "line": 31,
                      "column": 7
                    },
                    "end": {
                      "offset": 981,
                      "line": 32,
                      "column": 40
                    },
                    "text": "case emailAlreadyInUse:\n        return SignUpStatus.alreadyUse;"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 988,
                      "line": 33,
                      "column": 7
                    },
                    "end": {
                      "offset": 1048,
                      "line": 34,
                      "column": 42
                    },
                    "text": "case invalidEmail:\n        return SignUpStatus.invalidEmail;"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1055,
                      "line": 35,
                      "column": 7
                    },
                    "end": {
                      "offset": 1129,
                      "line": 36,
                      "column": 49
                    },
                    "text": "case operationNotAllowed:\n        return SignUpStatus.operationNotAllowed;"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1136,
                      "line": 37,
                      "column": 7
                    },
                    "end": {
                      "offset": 1196,
                      "line": 38,
                      "column": 42
                    },
                    "text": "case weakPassword:\n        return SignUpStatus.weakPassword;"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 50.718800023077,
              "level": "none",
              "comment": "This method has a halstead volume of 50.718800023077.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 14,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 14 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 884,
                      "line": 29,
                      "column": 66
                    },
                    "end": {
                      "offset": 1239,
                      "line": 42,
                      "column": 4
                    },
                    "text": "{\n    switch (error.code) {\n      case emailAlreadyInUse:\n        return SignUpStatus.alreadyUse;\n      case invalidEmail:\n        return SignUpStatus.invalidEmail;\n      case operationNotAllowed:\n        return SignUpStatus.operationNotAllowed;\n      case weakPassword:\n        return SignUpStatus.weakPassword;\n    }\n\n    return SignUpStatus.failed;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 11,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 11 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 886,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 886,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 912,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 912,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 942,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 942,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 982,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 982,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1007,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1007,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1049,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1049,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1081,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1081,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1130,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1130,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1155,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1155,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1197,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1197,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1204,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1204,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 65,
              "level": "none",
              "comment": "This method has 65 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/util/login_status.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "LoginStatusExtension": {
          "codeSpan": {
            "start": {
              "offset": 316,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 1190,
              "line": 42,
              "column": 2
            },
            "text": "extension LoginStatusExtension on LoginStatus {\n  static final _map = {\n    LoginStatus.success: 'ログインしました。',\n    LoginStatus.failed: 'ログインに失敗しました。もう一度お試しください。',\n    LoginStatus.invalidEmail: '無効なメールアドレスです。ご確認後、もう一度お試しください。',\n    LoginStatus.userDisabled: '無効なアカウントです。お手数ですが、開発者までお問い合わせください。',\n    LoginStatus.userNotFound: 'アカウントが見つかりません。入力情報を確認して、もう一度お試しください。',\n    LoginStatus.wrongPassword: '無効なパスワードです。ご確認後、もう一度お試しください。',\n  };\n\n  String? get getString => _map[this];\n\n  static LoginStatus getErrorStatus(FirebaseAuthException error) {\n    switch (error.code) {\n      case invalidEmail:\n        return LoginStatus.invalidEmail;\n      case userDisabled:\n        return LoginStatus.userDisabled;\n      case userNotFound:\n        return LoginStatus.userNotFound;\n      case wrongPassword:\n        return LoginStatus.wrongPassword;\n    }\n    return LoginStatus.failed;\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This extension has 2 methods.",
              "context": [
                {
                  "message": "getter getString increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 751,
                      "line": 27,
                      "column": 3
                    },
                    "end": {
                      "offset": 787,
                      "line": 27,
                      "column": 39
                    },
                    "text": "String? get getString => _map[this];"
                  }
                },
                {
                  "message": "method getErrorStatus increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 791,
                      "line": 29,
                      "column": 3
                    },
                    "end": {
                      "offset": 1188,
                      "line": 41,
                      "column": 4
                    },
                    "text": "static LoginStatus getErrorStatus(FirebaseAuthException error) {\n    switch (error.code) {\n      case invalidEmail:\n        return LoginStatus.invalidEmail;\n      case userDisabled:\n        return LoginStatus.userDisabled;\n      case userNotFound:\n        return LoginStatus.userNotFound;\n      case wrongPassword:\n        return LoginStatus.wrongPassword;\n    }\n    return LoginStatus.failed;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This extension has a weight of 0.5.",
              "context": [
                {
                  "message": "public getter getString decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 751,
                      "line": 27,
                      "column": 3
                    },
                    "end": {
                      "offset": 787,
                      "line": 27,
                      "column": 39
                    },
                    "text": "String? get getString => _map[this];"
                  }
                },
                {
                  "message": "functional method getErrorStatus increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 791,
                      "line": 29,
                      "column": 3
                    },
                    "end": {
                      "offset": 1188,
                      "line": 41,
                      "column": 4
                    },
                    "text": "static LoginStatus getErrorStatus(FirebaseAuthException error) {\n    switch (error.code) {\n      case invalidEmail:\n        return LoginStatus.invalidEmail;\n      case userDisabled:\n        return LoginStatus.userDisabled;\n      case userNotFound:\n        return LoginStatus.userNotFound;\n      case wrongPassword:\n        return LoginStatus.wrongPassword;\n    }\n    return LoginStatus.failed;\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "LoginStatusExtension.getString": {
          "codeSpan": {
            "start": {
              "offset": 751,
              "line": 27,
              "column": 3
            },
            "end": {
              "offset": 787,
              "line": 27,
              "column": 39
            },
            "text": "String? get getString => _map[this];"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This getter has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This getter has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This getter has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This getter has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This getter has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This getter has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 749,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 749,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This getter has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "LoginStatusExtension.getErrorStatus": {
          "codeSpan": {
            "start": {
              "offset": 791,
              "line": 29,
              "column": 3
            },
            "end": {
              "offset": 1188,
              "line": 41,
              "column": 4
            },
            "text": "static LoginStatus getErrorStatus(FirebaseAuthException error) {\n    switch (error.code) {\n      case invalidEmail:\n        return LoginStatus.invalidEmail;\n      case userDisabled:\n        return LoginStatus.userDisabled;\n      case userNotFound:\n        return LoginStatus.userNotFound;\n      case wrongPassword:\n        return LoginStatus.wrongPassword;\n    }\n    return LoginStatus.failed;\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 5,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 5.",
              "context": [
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 888,
                      "line": 31,
                      "column": 7
                    },
                    "end": {
                      "offset": 947,
                      "line": 32,
                      "column": 41
                    },
                    "text": "case invalidEmail:\n        return LoginStatus.invalidEmail;"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 954,
                      "line": 33,
                      "column": 7
                    },
                    "end": {
                      "offset": 1013,
                      "line": 34,
                      "column": 41
                    },
                    "text": "case userDisabled:\n        return LoginStatus.userDisabled;"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1020,
                      "line": 35,
                      "column": 7
                    },
                    "end": {
                      "offset": 1079,
                      "line": 36,
                      "column": 41
                    },
                    "text": "case userNotFound:\n        return LoginStatus.userNotFound;"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1086,
                      "line": 37,
                      "column": 7
                    },
                    "end": {
                      "offset": 1147,
                      "line": 38,
                      "column": 42
                    },
                    "text": "case wrongPassword:\n        return LoginStatus.wrongPassword;"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 48,
              "level": "none",
              "comment": "This method has a halstead volume of 48.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 13,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 13 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 854,
                      "line": 29,
                      "column": 66
                    },
                    "end": {
                      "offset": 1188,
                      "line": 41,
                      "column": 4
                    },
                    "text": "{\n    switch (error.code) {\n      case invalidEmail:\n        return LoginStatus.invalidEmail;\n      case userDisabled:\n        return LoginStatus.userDisabled;\n      case userNotFound:\n        return LoginStatus.userNotFound;\n      case wrongPassword:\n        return LoginStatus.wrongPassword;\n    }\n    return LoginStatus.failed;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 11,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 11 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 856,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 856,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 882,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 882,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 907,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 907,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 948,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 948,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 973,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 973,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1014,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1014,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1039,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1039,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1080,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1080,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1106,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1106,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1148,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1148,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1154,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1154,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 65,
              "level": "none",
              "comment": "This method has 65 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/util/validation.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {},
      "functions": {
        "emailValidation": {
          "codeSpan": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 235,
              "line": 8,
              "column": 2
            },
            "text": "String? emailValidation(String? text) {\n  const pattern =\n      r\"^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\";\n  if (!RegExp(pattern).hasMatch(text!)) {\n    return '正しいメールアドレスを入力してください。';\n  }\n  return null;\n}"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 140,
                      "line": 4,
                      "column": 3
                    },
                    "end": {
                      "offset": 218,
                      "line": 6,
                      "column": 4
                    },
                    "text": "if (!RegExp(pattern).hasMatch(text!)) {\n    return '正しいメールアドレスを入力してください。';\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 20.67970000576925,
              "level": "none",
              "comment": "This function has a halstead volume of 20.67970000576925.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 8,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 8 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This function has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 38,
                      "line": 1,
                      "column": 39
                    },
                    "end": {
                      "offset": 235,
                      "line": 8,
                      "column": 2
                    },
                    "text": "{\n  const pattern =\n      r\"^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\";\n  if (!RegExp(pattern).hasMatch(text!)) {\n    return '正しいメールアドレスを入力してください。';\n  }\n  return null;\n}"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 178,
                      "line": 4,
                      "column": 41
                    },
                    "end": {
                      "offset": 218,
                      "line": 6,
                      "column": 4
                    },
                    "text": "{\n    return '正しいメールアドレスを入力してください。';\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This function has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 6 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 40,
                      "line": 2,
                      "column": 0
                    },
                    "end": {
                      "offset": 40,
                      "line": 2,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 58,
                      "line": 3,
                      "column": 0
                    },
                    "end": {
                      "offset": 58,
                      "line": 3,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 138,
                      "line": 4,
                      "column": 0
                    },
                    "end": {
                      "offset": 138,
                      "line": 4,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 180,
                      "line": 5,
                      "column": 0
                    },
                    "end": {
                      "offset": 180,
                      "line": 5,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 215,
                      "line": 6,
                      "column": 0
                    },
                    "end": {
                      "offset": 215,
                      "line": 6,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 219,
                      "line": 7,
                      "column": 0
                    },
                    "end": {
                      "offset": 219,
                      "line": 7,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 74,
              "level": "none",
              "comment": "This function has 74 maintainability index.",
              "context": []
            }
          ]
        },
        "passwordValidation": {
          "codeSpan": {
            "start": {
              "offset": 237,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 368,
              "line": 15,
              "column": 2
            },
            "text": "String? passwordValidation(String? password) {\n  if (password!.length < 5) {\n    return '5文字以上のパスワードにしてください。';\n  }\n  return null;\n}"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 286,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 351,
                      "line": 13,
                      "column": 4
                    },
                    "text": "if (password!.length < 5) {\n    return '5文字以上のパスワードにしてください。';\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 8,
              "level": "none",
              "comment": "This function has a halstead volume of 8.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 6 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This function has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 282,
                      "line": 10,
                      "column": 46
                    },
                    "end": {
                      "offset": 368,
                      "line": 15,
                      "column": 2
                    },
                    "text": "{\n  if (password!.length < 5) {\n    return '5文字以上のパスワードにしてください。';\n  }\n  return null;\n}"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 312,
                      "line": 11,
                      "column": 29
                    },
                    "end": {
                      "offset": 351,
                      "line": 13,
                      "column": 4
                    },
                    "text": "{\n    return '5文字以上のパスワードにしてください。';\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This function has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 284,
                      "line": 11,
                      "column": 0
                    },
                    "end": {
                      "offset": 284,
                      "line": 11,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 314,
                      "line": 12,
                      "column": 0
                    },
                    "end": {
                      "offset": 314,
                      "line": 12,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 348,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 348,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 352,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 352,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 81,
              "level": "none",
              "comment": "This function has 81 maintainability index.",
              "context": []
            }
          ]
        },
        "nameValidation": {
          "codeSpan": {
            "start": {
              "offset": 370,
              "line": 17,
              "column": 1
            },
            "end": {
              "offset": 478,
              "line": 22,
              "column": 2
            },
            "text": "String? nameValidation(String? name) {\n  if (name!.isEmpty) {\n    return '名前を入力してください';\n  }\n  return null;\n}"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 411,
                      "line": 18,
                      "column": 3
                    },
                    "end": {
                      "offset": 461,
                      "line": 20,
                      "column": 4
                    },
                    "text": "if (name!.isEmpty) {\n    return '名前を入力してください';\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 4.754887502163469,
              "level": "none",
              "comment": "This function has a halstead volume of 4.754887502163469.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 6 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This function has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 407,
                      "line": 17,
                      "column": 38
                    },
                    "end": {
                      "offset": 478,
                      "line": 22,
                      "column": 2
                    },
                    "text": "{\n  if (name!.isEmpty) {\n    return '名前を入力してください';\n  }\n  return null;\n}"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 430,
                      "line": 18,
                      "column": 22
                    },
                    "end": {
                      "offset": 461,
                      "line": 20,
                      "column": 4
                    },
                    "text": "{\n    return '名前を入力してください';\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This function has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 409,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 409,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 432,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 432,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 458,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 458,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 462,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 462,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 82,
              "level": "none",
              "comment": "This function has 82 maintainability index.",
              "context": []
            }
          ]
        },
        "agendaNameValidation": {
          "codeSpan": {
            "start": {
              "offset": 480,
              "line": 24,
              "column": 1
            },
            "end": {
              "offset": 595,
              "line": 29,
              "column": 2
            },
            "text": "String? agendaNameValidation(String? name) {\n  if (name!.isEmpty) {\n    return '会議名を入力してください';\n  }\n  return null;\n}"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 527,
                      "line": 25,
                      "column": 3
                    },
                    "end": {
                      "offset": 578,
                      "line": 27,
                      "column": 4
                    },
                    "text": "if (name!.isEmpty) {\n    return '会議名を入力してください';\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 4.754887502163469,
              "level": "none",
              "comment": "This function has a halstead volume of 4.754887502163469.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 6 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This function has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 523,
                      "line": 24,
                      "column": 44
                    },
                    "end": {
                      "offset": 595,
                      "line": 29,
                      "column": 2
                    },
                    "text": "{\n  if (name!.isEmpty) {\n    return '会議名を入力してください';\n  }\n  return null;\n}"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 546,
                      "line": 25,
                      "column": 22
                    },
                    "end": {
                      "offset": 578,
                      "line": 27,
                      "column": 4
                    },
                    "text": "{\n    return '会議名を入力してください';\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This function has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 525,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 525,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 548,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 548,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 575,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 575,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 579,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 579,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 82,
              "level": "none",
              "comment": "This function has 82 maintainability index.",
              "context": []
            }
          ]
        },
        "ideaFormValidation": {
          "codeSpan": {
            "start": {
              "offset": 597,
              "line": 31,
              "column": 1
            },
            "end": {
              "offset": 731,
              "line": 36,
              "column": 2
            },
            "text": "String? ideaFormValidation(String? text) {\n  if ((text?.split('\\n').length ?? 0) > 5) {\n    return '5行以内にしてください';\n  }\n  return null;\n}"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 4,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 4.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 642,
                      "line": 32,
                      "column": 3
                    },
                    "end": {
                      "offset": 714,
                      "line": 34,
                      "column": 4
                    },
                    "text": "if ((text?.split('\\n').length ?? 0) > 5) {\n    return '5行以内にしてください';\n  }"
                  }
                },
                {
                  "message": "Operator ?. increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 651,
                      "line": 32,
                      "column": 12
                    },
                    "end": {
                      "offset": 653,
                      "line": 32,
                      "column": 14
                    },
                    "text": "?."
                  }
                },
                {
                  "message": "Operator ?? increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 672,
                      "line": 32,
                      "column": 33
                    },
                    "end": {
                      "offset": 674,
                      "line": 32,
                      "column": 35
                    },
                    "text": "??"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 15.509775004326936,
              "level": "none",
              "comment": "This function has a halstead volume of 15.509775004326936.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 6 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This function has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 638,
                      "line": 31,
                      "column": 42
                    },
                    "end": {
                      "offset": 731,
                      "line": 36,
                      "column": 2
                    },
                    "text": "{\n  if ((text?.split('\\n').length ?? 0) > 5) {\n    return '5行以内にしてください';\n  }\n  return null;\n}"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 683,
                      "line": 32,
                      "column": 44
                    },
                    "end": {
                      "offset": 714,
                      "line": 34,
                      "column": 4
                    },
                    "text": "{\n    return '5行以内にしてください';\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This function has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 640,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 640,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 685,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 685,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 711,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 711,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 715,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 715,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 78,
              "level": "none",
              "comment": "This function has 78 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/util/config.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {},
      "functions": {},
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/notifier/conference_history_notifier.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ConferenceHistoryNotifier": {
          "codeSpan": {
            "start": {
              "offset": 420,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 1215,
              "line": 35,
              "column": 2
            },
            "text": "class ConferenceHistoryNotifier\n    extends StateNotifier<AsyncValue<List<ConferenceHistoryState>>> {\n  ConferenceHistoryNotifier() : super(const AsyncValue.loading()) {\n    _userInfoConfRepository = UserInfoConfRepository();\n    _auth = FirebaseAuth.instance;\n\n    initState();\n  }\n\n  late final UserInfoConfRepository _userInfoConfRepository;\n\n  late final FirebaseAuth _auth;\n\n  Future<void> initState() async {\n    final userConfList = await _userInfoConfRepository.getUserConfInfoList();\n\n    state = AsyncValue.data([\n      for (final confData in userConfList)\n        ConferenceHistoryState(\n            createAt: confData.createAt!,\n            agenda: confData.agenda,\n            roomRef: confData.roomRef!,\n            isHost: confData.hostUid == _auth.currentUser!.uid)\n    ]);\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor ConferenceHistoryNotifier increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 524,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 702,
                      "line": 17,
                      "column": 4
                    },
                    "text": "ConferenceHistoryNotifier() : super(const AsyncValue.loading()) {\n    _userInfoConfRepository = UserInfoConfRepository();\n    _auth = FirebaseAuth.instance;\n\n    initState();\n  }"
                  }
                },
                {
                  "message": "method initState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 802,
                      "line": 23,
                      "column": 3
                    },
                    "end": {
                      "offset": 1213,
                      "line": 34,
                      "column": 4
                    },
                    "text": "Future<void> initState() async {\n    final userConfList = await _userInfoConfRepository.getUserConfInfoList();\n\n    state = AsyncValue.data([\n      for (final confData in userConfList)\n        ConferenceHistoryState(\n            createAt: confData.createAt!,\n            agenda: confData.agenda,\n            roomRef: confData.roomRef!,\n            isHost: confData.hostUid == _auth.currentUser!.uid)\n    ]);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor ConferenceHistoryNotifier decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 524,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 702,
                      "line": 17,
                      "column": 4
                    },
                    "text": "ConferenceHistoryNotifier() : super(const AsyncValue.loading()) {\n    _userInfoConfRepository = UserInfoConfRepository();\n    _auth = FirebaseAuth.instance;\n\n    initState();\n  }"
                  }
                },
                {
                  "message": "functional method initState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 802,
                      "line": 23,
                      "column": 3
                    },
                    "end": {
                      "offset": 1213,
                      "line": 34,
                      "column": 4
                    },
                    "text": "Future<void> initState() async {\n    final userConfList = await _userInfoConfRepository.getUserConfInfoList();\n\n    state = AsyncValue.data([\n      for (final confData in userConfList)\n        ConferenceHistoryState(\n            createAt: confData.createAt!,\n            agenda: confData.agenda,\n            roomRef: confData.roomRef!,\n            isHost: confData.hostUid == _auth.currentUser!.uid)\n    ]);\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ConferenceHistoryNotifier.ConferenceHistoryNotifier": {
          "codeSpan": {
            "start": {
              "offset": 524,
              "line": 12,
              "column": 3
            },
            "end": {
              "offset": 702,
              "line": 17,
              "column": 4
            },
            "text": "ConferenceHistoryNotifier() : super(const AsyncValue.loading()) {\n    _userInfoConfRepository = UserInfoConfRepository();\n    _auth = FirebaseAuth.instance;\n\n    initState();\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 22.458839376460833,
              "level": "none",
              "comment": "This constructor has a halstead volume of 22.458839376460833.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 6 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 588,
                      "line": 12,
                      "column": 67
                    },
                    "end": {
                      "offset": 702,
                      "line": 17,
                      "column": 4
                    },
                    "text": "{\n    _userInfoConfRepository = UserInfoConfRepository();\n    _auth = FirebaseAuth.instance;\n\n    initState();\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 590,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 590,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 646,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 646,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 682,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 682,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 80,
              "level": "none",
              "comment": "This constructor has 80 maintainability index.",
              "context": []
            }
          ]
        },
        "ConferenceHistoryNotifier.initState": {
          "codeSpan": {
            "start": {
              "offset": 802,
              "line": 23,
              "column": 3
            },
            "end": {
              "offset": 1213,
              "line": 34,
              "column": 4
            },
            "text": "Future<void> initState() async {\n    final userConfList = await _userInfoConfRepository.getUserConfInfoList();\n\n    state = AsyncValue.data([\n      for (final confData in userConfList)\n        ConferenceHistoryState(\n            createAt: confData.createAt!,\n            agenda: confData.agenda,\n            roomRef: confData.roomRef!,\n            isHost: confData.hostUid == _auth.currentUser!.uid)\n    ]);\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 133.97977094150824,
              "level": "none",
              "comment": "This method has a halstead volume of 133.97977094150824.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 12 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 833,
                      "line": 23,
                      "column": 34
                    },
                    "end": {
                      "offset": 1213,
                      "line": 34,
                      "column": 4
                    },
                    "text": "{\n    final userConfList = await _userInfoConfRepository.getUserConfInfoList();\n\n    state = AsyncValue.data([\n      for (final confData in userConfList)\n        ConferenceHistoryState(\n            createAt: confData.createAt!,\n            agenda: confData.agenda,\n            roomRef: confData.roomRef!,\n            isHost: confData.hostUid == _auth.currentUser!.uid)\n    ]);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 9 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 835,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 835,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 914,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 914,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 944,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 944,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 987,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 987,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1019,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1019,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1061,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1061,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1098,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1098,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1138,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1138,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1202,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1202,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 65,
              "level": "none",
              "comment": "This method has 65 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/notifier/nick_name_provider.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {},
      "functions": {},
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/notifier/sign_up_notifier.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "SignUpNotifier": {
          "codeSpan": {
            "start": {
              "offset": 336,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 816,
              "line": 26,
              "column": 2
            },
            "text": "class SignUpNotifier extends StateNotifier<SignUpDto> {\n  SignUpNotifier() : super(_initValue);\n\n  static final _initValue = SignUpDto(email: '', password: '');\n  final signUpUseCase = SignUpUseCase();\n\n  void update({required String email, required String password}) {\n    state = state.copyWith(email: email, password: password);\n  }\n\n  Future<SignUpStatus> signUp() async {\n    return signUpUseCase.signUp(\n      email: state.email,\n      password: state.password,\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor SignUpNotifier increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 394,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 431,
                      "line": 11,
                      "column": 40
                    },
                    "text": "SignUpNotifier() : super(_initValue);"
                  }
                },
                {
                  "message": "method update increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 541,
                      "line": 16,
                      "column": 3
                    },
                    "end": {
                      "offset": 671,
                      "line": 18,
                      "column": 4
                    },
                    "text": "void update({required String email, required String password}) {\n    state = state.copyWith(email: email, password: password);\n  }"
                  }
                },
                {
                  "message": "method signUp increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 675,
                      "line": 20,
                      "column": 3
                    },
                    "end": {
                      "offset": 814,
                      "line": 25,
                      "column": 4
                    },
                    "text": "Future<SignUpStatus> signUp() async {\n    return signUpUseCase.signUp(\n      email: state.email,\n      password: state.password,\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor SignUpNotifier decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 394,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 431,
                      "line": 11,
                      "column": 40
                    },
                    "text": "SignUpNotifier() : super(_initValue);"
                  }
                },
                {
                  "message": "functional method update increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 541,
                      "line": 16,
                      "column": 3
                    },
                    "end": {
                      "offset": 671,
                      "line": 18,
                      "column": 4
                    },
                    "text": "void update({required String email, required String password}) {\n    state = state.copyWith(email: email, password: password);\n  }"
                  }
                },
                {
                  "message": "functional method signUp increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 675,
                      "line": 20,
                      "column": 3
                    },
                    "end": {
                      "offset": 814,
                      "line": 25,
                      "column": 4
                    },
                    "text": "Future<SignUpStatus> signUp() async {\n    return signUpUseCase.signUp(\n      email: state.email,\n      password: state.password,\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "SignUpNotifier.SignUpNotifier": {
          "codeSpan": {
            "start": {
              "offset": 394,
              "line": 11,
              "column": 3
            },
            "end": {
              "offset": 431,
              "line": 11,
              "column": 40
            },
            "text": "SignUpNotifier() : super(_initValue);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "SignUpNotifier.update": {
          "codeSpan": {
            "start": {
              "offset": 541,
              "line": 16,
              "column": 3
            },
            "end": {
              "offset": 671,
              "line": 18,
              "column": 4
            },
            "text": "void update({required String email, required String password}) {\n    state = state.copyWith(email: email, password: password);\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 18.575424759098897,
              "level": "none",
              "comment": "This method has a halstead volume of 18.575424759098897.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 604,
                      "line": 16,
                      "column": 66
                    },
                    "end": {
                      "offset": 671,
                      "line": 18,
                      "column": 4
                    },
                    "text": "{\n    state = state.copyWith(email: email, password: password);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This method has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 606,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 606,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 91,
              "level": "none",
              "comment": "This method has 91 maintainability index.",
              "context": []
            }
          ]
        },
        "SignUpNotifier.signUp": {
          "codeSpan": {
            "start": {
              "offset": 675,
              "line": 20,
              "column": 3
            },
            "end": {
              "offset": 814,
              "line": 25,
              "column": 4
            },
            "text": "Future<SignUpStatus> signUp() async {\n    return signUpUseCase.signUp(\n      email: state.email,\n      password: state.password,\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 18.575424759098897,
              "level": "none",
              "comment": "This method has a halstead volume of 18.575424759098897.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 6 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 711,
                      "line": 20,
                      "column": 39
                    },
                    "end": {
                      "offset": 814,
                      "line": 25,
                      "column": 4
                    },
                    "text": "{\n    return signUpUseCase.signUp(\n      email: state.email,\n      password: state.password,\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 713,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 713,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 746,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 746,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 772,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 772,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 804,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 804,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 78,
              "level": "none",
              "comment": "This method has 78 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/notifier/chat_room_notifier.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ChatRoomNotifier": {
          "codeSpan": {
            "start": {
              "offset": 799,
              "line": 18,
              "column": 1
            },
            "end": {
              "offset": 1916,
              "line": 60,
              "column": 2
            },
            "text": "class ChatRoomNotifier extends StateNotifier<ChatRoomState> {\n  ChatRoomNotifier(this._read, {this.chatRoomInfo})\n      : super(const ChatRoomState()) {\n    initState();\n  }\n\n  final repository = ConfMessagesRepository();\n\n  final fireStore = FirebaseFirestore.instance;\n\n  ChatRoomInformation? chatRoomInfo;\n\n  final auth = FirebaseAuth.instance;\n\n  final Reader _read;\n\n  void initState() {\n    final config = _read(createRoomNotifier);\n\n    state = state.copyWith(\n      chatModel: ChatRoomModel(\n          participants: config.participants,\n          agenda: config.agenda,\n          roomUid: config.roomUid,\n          hostUid: config.hostUid,\n          createAt: config.createAt),\n      user: auth.currentUser,\n      nickName: config.nickName,\n      chatDocRef: fireStore\n          .collection('conference')\n          .doc(config.roomUid)\n          .collection('messages'),\n    );\n  }\n\n  Future<bool> sendMessage(String message) async {\n    return repository.addMessage(\n        message: message,\n        rootRef: state.chatDocRef!,\n        userID: auth.currentUser!.uid,\n        nickName: state.nickName);\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor ChatRoomNotifier increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 863,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 972,
                      "line": 22,
                      "column": 4
                    },
                    "text": "ChatRoomNotifier(this._read, {this.chatRoomInfo})\n      : super(const ChatRoomState()) {\n    initState();\n  }"
                  }
                },
                {
                  "message": "method initState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1173,
                      "line": 34,
                      "column": 3
                    },
                    "end": {
                      "offset": 1688,
                      "line": 51,
                      "column": 4
                    },
                    "text": "void initState() {\n    final config = _read(createRoomNotifier);\n\n    state = state.copyWith(\n      chatModel: ChatRoomModel(\n          participants: config.participants,\n          agenda: config.agenda,\n          roomUid: config.roomUid,\n          hostUid: config.hostUid,\n          createAt: config.createAt),\n      user: auth.currentUser,\n      nickName: config.nickName,\n      chatDocRef: fireStore\n          .collection('conference')\n          .doc(config.roomUid)\n          .collection('messages'),\n    );\n  }"
                  }
                },
                {
                  "message": "method sendMessage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1692,
                      "line": 53,
                      "column": 3
                    },
                    "end": {
                      "offset": 1914,
                      "line": 59,
                      "column": 4
                    },
                    "text": "Future<bool> sendMessage(String message) async {\n    return repository.addMessage(\n        message: message,\n        rootRef: state.chatDocRef!,\n        userID: auth.currentUser!.uid,\n        nickName: state.nickName);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor ChatRoomNotifier decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 863,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 972,
                      "line": 22,
                      "column": 4
                    },
                    "text": "ChatRoomNotifier(this._read, {this.chatRoomInfo})\n      : super(const ChatRoomState()) {\n    initState();\n  }"
                  }
                },
                {
                  "message": "functional method initState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1173,
                      "line": 34,
                      "column": 3
                    },
                    "end": {
                      "offset": 1688,
                      "line": 51,
                      "column": 4
                    },
                    "text": "void initState() {\n    final config = _read(createRoomNotifier);\n\n    state = state.copyWith(\n      chatModel: ChatRoomModel(\n          participants: config.participants,\n          agenda: config.agenda,\n          roomUid: config.roomUid,\n          hostUid: config.hostUid,\n          createAt: config.createAt),\n      user: auth.currentUser,\n      nickName: config.nickName,\n      chatDocRef: fireStore\n          .collection('conference')\n          .doc(config.roomUid)\n          .collection('messages'),\n    );\n  }"
                  }
                },
                {
                  "message": "functional method sendMessage increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1692,
                      "line": 53,
                      "column": 3
                    },
                    "end": {
                      "offset": 1914,
                      "line": 59,
                      "column": 4
                    },
                    "text": "Future<bool> sendMessage(String message) async {\n    return repository.addMessage(\n        message: message,\n        rootRef: state.chatDocRef!,\n        userID: auth.currentUser!.uid,\n        nickName: state.nickName);\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ChatRoomNotifier.ChatRoomNotifier": {
          "codeSpan": {
            "start": {
              "offset": 863,
              "line": 19,
              "column": 3
            },
            "end": {
              "offset": 972,
              "line": 22,
              "column": 4
            },
            "text": "ChatRoomNotifier(this._read, {this.chatRoomInfo})\n      : super(const ChatRoomState()) {\n    initState();\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 950,
                      "line": 20,
                      "column": 38
                    },
                    "end": {
                      "offset": 972,
                      "line": 22,
                      "column": 4
                    },
                    "text": "{\n    initState();\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 952,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 952,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatRoomNotifier.initState": {
          "codeSpan": {
            "start": {
              "offset": 1173,
              "line": 34,
              "column": 3
            },
            "end": {
              "offset": 1688,
              "line": 51,
              "column": 4
            },
            "text": "void initState() {\n    final config = _read(createRoomNotifier);\n\n    state = state.copyWith(\n      chatModel: ChatRoomModel(\n          participants: config.participants,\n          agenda: config.agenda,\n          roomUid: config.roomUid,\n          hostUid: config.hostUid,\n          createAt: config.createAt),\n      user: auth.currentUser,\n      nickName: config.nickName,\n      chatDocRef: fireStore\n          .collection('conference')\n          .doc(config.roomUid)\n          .collection('messages'),\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 166.9080620655929,
              "level": "none",
              "comment": "This method has a halstead volume of 166.9080620655929.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 18,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 18 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1190,
                      "line": 34,
                      "column": 20
                    },
                    "end": {
                      "offset": 1688,
                      "line": 51,
                      "column": 4
                    },
                    "text": "{\n    final config = _read(createRoomNotifier);\n\n    state = state.copyWith(\n      chatModel: ChatRoomModel(\n          participants: config.participants,\n          agenda: config.agenda,\n          roomUid: config.roomUid,\n          hostUid: config.hostUid,\n          createAt: config.createAt),\n      user: auth.currentUser,\n      nickName: config.nickName,\n      chatDocRef: fireStore\n          .collection('conference')\n          .doc(config.roomUid)\n          .collection('messages'),\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 15,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 15 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1192,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1192,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1239,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1239,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1267,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1267,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1299,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1299,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1344,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1344,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1377,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1377,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1412,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1412,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1447,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1447,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1485,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1485,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1515,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1515,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1548,
                      "line": 46,
                      "column": 0
                    },
                    "end": {
                      "offset": 1548,
                      "line": 46,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1576,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1576,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1612,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1612,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1643,
                      "line": 49,
                      "column": 0
                    },
                    "end": {
                      "offset": 1643,
                      "line": 49,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1678,
                      "line": 50,
                      "column": 0
                    },
                    "end": {
                      "offset": 1678,
                      "line": 50,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 59,
              "level": "none",
              "comment": "This method has 59 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatRoomNotifier.sendMessage": {
          "codeSpan": {
            "start": {
              "offset": 1692,
              "line": 53,
              "column": 3
            },
            "end": {
              "offset": 1914,
              "line": 59,
              "column": 4
            },
            "text": "Future<bool> sendMessage(String message) async {\n    return repository.addMessage(\n        message: message,\n        rootRef: state.chatDocRef!,\n        userID: auth.currentUser!.uid,\n        nickName: state.nickName);\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 57.359400011538504,
              "level": "none",
              "comment": "This method has a halstead volume of 57.359400011538504.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 7,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 7 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1739,
                      "line": 53,
                      "column": 50
                    },
                    "end": {
                      "offset": 1914,
                      "line": 59,
                      "column": 4
                    },
                    "text": "{\n    return repository.addMessage(\n        message: message,\n        rootRef: state.chatDocRef!,\n        userID: auth.currentUser!.uid,\n        nickName: state.nickName);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 5 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1741,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 1741,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1775,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 1775,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1801,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 1801,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1837,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 1837,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1876,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 1876,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 73,
              "level": "none",
              "comment": "This method has 73 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/notifier/hamburger_menu_notifier.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "HamburgerNotifier": {
          "codeSpan": {
            "start": {
              "offset": 308,
              "line": 8,
              "column": 1
            },
            "end": {
              "offset": 906,
              "line": 28,
              "column": 2
            },
            "text": "class HamburgerNotifier extends StateNotifier<AsyncValue<HamburgerDto>> {\n  HamburgerNotifier() : super(const AsyncValue.loading()) {\n    state = AsyncValue.data(_getData());\n  }\n\n  final HamburgerMenuUseCase _useCase = HamburgerMenuUseCase();\n\n  HamburgerDto _getData() {\n    final profile = _useCase.getUserInfo();\n    return HamburgerDto(\n        isLogin: profile.isLogin,\n        userEmail: profile.email,\n        userName: profile.userName ?? '',\n        userIcon: profile.userIcon ?? '');\n  }\n\n  void logout() {\n    _useCase.logout();\n    state = AsyncValue.data(HamburgerDto.noUser());\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor HamburgerNotifier increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 384,
                      "line": 9,
                      "column": 3
                    },
                    "end": {
                      "offset": 486,
                      "line": 11,
                      "column": 4
                    },
                    "text": "HamburgerNotifier() : super(const AsyncValue.loading()) {\n    state = AsyncValue.data(_getData());\n  }"
                  }
                },
                {
                  "message": "method _getData increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 555,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 806,
                      "line": 22,
                      "column": 4
                    },
                    "text": "HamburgerDto _getData() {\n    final profile = _useCase.getUserInfo();\n    return HamburgerDto(\n        isLogin: profile.isLogin,\n        userEmail: profile.email,\n        userName: profile.userName ?? '',\n        userIcon: profile.userIcon ?? '');\n  }"
                  }
                },
                {
                  "message": "method logout increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 810,
                      "line": 24,
                      "column": 3
                    },
                    "end": {
                      "offset": 904,
                      "line": 27,
                      "column": 4
                    },
                    "text": "void logout() {\n    _useCase.logout();\n    state = AsyncValue.data(HamburgerDto.noUser());\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor HamburgerNotifier decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 384,
                      "line": 9,
                      "column": 3
                    },
                    "end": {
                      "offset": 486,
                      "line": 11,
                      "column": 4
                    },
                    "text": "HamburgerNotifier() : super(const AsyncValue.loading()) {\n    state = AsyncValue.data(_getData());\n  }"
                  }
                },
                {
                  "message": "functional method logout increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 810,
                      "line": 24,
                      "column": 3
                    },
                    "end": {
                      "offset": 904,
                      "line": 27,
                      "column": 4
                    },
                    "text": "void logout() {\n    _useCase.logout();\n    state = AsyncValue.data(HamburgerDto.noUser());\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "HamburgerNotifier.HamburgerNotifier": {
          "codeSpan": {
            "start": {
              "offset": 384,
              "line": 9,
              "column": 3
            },
            "end": {
              "offset": 486,
              "line": 11,
              "column": 4
            },
            "text": "HamburgerNotifier() : super(const AsyncValue.loading()) {\n    state = AsyncValue.data(_getData());\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 11.60964047443681,
              "level": "none",
              "comment": "This constructor has a halstead volume of 11.60964047443681.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 440,
                      "line": 9,
                      "column": 59
                    },
                    "end": {
                      "offset": 486,
                      "line": 11,
                      "column": 4
                    },
                    "text": "{\n    state = AsyncValue.data(_getData());\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 442,
                      "line": 10,
                      "column": 0
                    },
                    "end": {
                      "offset": 442,
                      "line": 10,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 93,
              "level": "none",
              "comment": "This constructor has 93 maintainability index.",
              "context": []
            }
          ]
        },
        "HamburgerNotifier._getData": {
          "codeSpan": {
            "start": {
              "offset": 555,
              "line": 15,
              "column": 3
            },
            "end": {
              "offset": 806,
              "line": 22,
              "column": 4
            },
            "text": "HamburgerDto _getData() {\n    final profile = _useCase.getUserInfo();\n    return HamburgerDto(\n        isLogin: profile.isLogin,\n        userEmail: profile.email,\n        userName: profile.userName ?? '',\n        userIcon: profile.userIcon ?? '');\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 3,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 3.",
              "context": [
                {
                  "message": "Operator ?? increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 753,
                      "line": 20,
                      "column": 36
                    },
                    "end": {
                      "offset": 755,
                      "line": 20,
                      "column": 38
                    },
                    "text": "??"
                  }
                },
                {
                  "message": "Operator ?? increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 795,
                      "line": 21,
                      "column": 36
                    },
                    "end": {
                      "offset": 797,
                      "line": 21,
                      "column": 38
                    },
                    "text": "??"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 65.72920075410866,
              "level": "none",
              "comment": "This method has a halstead volume of 65.72920075410866.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 8,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 8 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 579,
                      "line": 15,
                      "column": 27
                    },
                    "end": {
                      "offset": 806,
                      "line": 22,
                      "column": 4
                    },
                    "text": "{\n    final profile = _useCase.getUserInfo();\n    return HamburgerDto(\n        isLogin: profile.isLogin,\n        userEmail: profile.email,\n        userName: profile.userName ?? '',\n        userIcon: profile.userIcon ?? '');\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 6 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 581,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 581,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 625,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 625,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 650,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 650,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 684,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 684,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 718,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 718,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 760,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 760,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 70,
              "level": "none",
              "comment": "This method has 70 maintainability index.",
              "context": []
            }
          ]
        },
        "HamburgerNotifier.logout": {
          "codeSpan": {
            "start": {
              "offset": 810,
              "line": 24,
              "column": 3
            },
            "end": {
              "offset": 904,
              "line": 27,
              "column": 4
            },
            "text": "void logout() {\n    _useCase.logout();\n    state = AsyncValue.data(HamburgerDto.noUser());\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 24,
              "level": "none",
              "comment": "This method has a halstead volume of 24.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 824,
                      "line": 24,
                      "column": 17
                    },
                    "end": {
                      "offset": 904,
                      "line": 27,
                      "column": 4
                    },
                    "text": "{\n    _useCase.logout();\n    state = AsyncValue.data(HamburgerDto.noUser());\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 826,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 826,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 849,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 849,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 84,
              "level": "none",
              "comment": "This method has 84 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/notifier/tinder_notifier.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "TinderNotifier": {
          "codeSpan": {
            "start": {
              "offset": 429,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 1424,
              "line": 42,
              "column": 2
            },
            "text": "class TinderNotifier extends StateNotifier<AsyncValue<TinderPageState>> {\n  TinderNotifier({required this.chatRoomState})\n      : _tinderRepository = TinderRepository(),\n        super(const AsyncValue.loading()) {\n    initState();\n  }\n\n  final ChatRoomState chatRoomState;\n\n  final TinderRepository _tinderRepository;\n\n  Future<void> initState() async {\n    final evaluateTinderState =\n        await chatRoomState.chatDocRef!.get().then((value) {\n      final result = value.docs\n          .map((message) => EvaluateTinderState(\n              docID: message.reference.id,\n              message: message['message'].toString()))\n          .toList();\n\n      return result;\n    });\n\n    state = AsyncValue.data(TinderPageState(\n        roomID: chatRoomState.chatModel.roomUid ?? '',\n        evaluateTinderState: evaluateTinderState));\n  }\n\n  Future<void> saveEvaluate(EvaluateTinderState data) async {\n    await _tinderRepository.resisterEvaluateRate(\n        state.asData!.value.roomID, data);\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor TinderNotifier increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 505,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 663,
                      "line": 15,
                      "column": 4
                    },
                    "text": "TinderNotifier({required this.chatRoomState})\n      : _tinderRepository = TinderRepository(),\n        super(const AsyncValue.loading()) {\n    initState();\n  }"
                  }
                },
                {
                  "message": "method initState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 750,
                      "line": 21,
                      "column": 3
                    },
                    "end": {
                      "offset": 1262,
                      "line": 36,
                      "column": 4
                    },
                    "text": "Future<void> initState() async {\n    final evaluateTinderState =\n        await chatRoomState.chatDocRef!.get().then((value) {\n      final result = value.docs\n          .map((message) => EvaluateTinderState(\n              docID: message.reference.id,\n              message: message['message'].toString()))\n          .toList();\n\n      return result;\n    });\n\n    state = AsyncValue.data(TinderPageState(\n        roomID: chatRoomState.chatModel.roomUid ?? '',\n        evaluateTinderState: evaluateTinderState));\n  }"
                  }
                },
                {
                  "message": "method saveEvaluate increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1266,
                      "line": 38,
                      "column": 3
                    },
                    "end": {
                      "offset": 1422,
                      "line": 41,
                      "column": 4
                    },
                    "text": "Future<void> saveEvaluate(EvaluateTinderState data) async {\n    await _tinderRepository.resisterEvaluateRate(\n        state.asData!.value.roomID, data);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor TinderNotifier decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 505,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 663,
                      "line": 15,
                      "column": 4
                    },
                    "text": "TinderNotifier({required this.chatRoomState})\n      : _tinderRepository = TinderRepository(),\n        super(const AsyncValue.loading()) {\n    initState();\n  }"
                  }
                },
                {
                  "message": "functional method initState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 750,
                      "line": 21,
                      "column": 3
                    },
                    "end": {
                      "offset": 1262,
                      "line": 36,
                      "column": 4
                    },
                    "text": "Future<void> initState() async {\n    final evaluateTinderState =\n        await chatRoomState.chatDocRef!.get().then((value) {\n      final result = value.docs\n          .map((message) => EvaluateTinderState(\n              docID: message.reference.id,\n              message: message['message'].toString()))\n          .toList();\n\n      return result;\n    });\n\n    state = AsyncValue.data(TinderPageState(\n        roomID: chatRoomState.chatModel.roomUid ?? '',\n        evaluateTinderState: evaluateTinderState));\n  }"
                  }
                },
                {
                  "message": "functional method saveEvaluate increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1266,
                      "line": 38,
                      "column": 3
                    },
                    "end": {
                      "offset": 1422,
                      "line": 41,
                      "column": 4
                    },
                    "text": "Future<void> saveEvaluate(EvaluateTinderState data) async {\n    await _tinderRepository.resisterEvaluateRate(\n        state.asData!.value.roomID, data);\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "TinderNotifier.TinderNotifier": {
          "codeSpan": {
            "start": {
              "offset": 505,
              "line": 11,
              "column": 3
            },
            "end": {
              "offset": 663,
              "line": 15,
              "column": 4
            },
            "text": "TinderNotifier({required this.chatRoomState})\n      : _tinderRepository = TinderRepository(),\n        super(const AsyncValue.loading()) {\n    initState();\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 641,
                      "line": 13,
                      "column": 43
                    },
                    "end": {
                      "offset": 663,
                      "line": 15,
                      "column": 4
                    },
                    "text": "{\n    initState();\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 643,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 643,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "TinderNotifier.initState": {
          "codeSpan": {
            "start": {
              "offset": 750,
              "line": 21,
              "column": 3
            },
            "end": {
              "offset": 1262,
              "line": 36,
              "column": 4
            },
            "text": "Future<void> initState() async {\n    final evaluateTinderState =\n        await chatRoomState.chatDocRef!.get().then((value) {\n      final result = value.docs\n          .map((message) => EvaluateTinderState(\n              docID: message.reference.id,\n              message: message['message'].toString()))\n          .toList();\n\n      return result;\n    });\n\n    state = AsyncValue.data(TinderPageState(\n        roomID: chatRoomState.chatModel.roomUid ?? '',\n        evaluateTinderState: evaluateTinderState));\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "Operator ?? increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1200,
                      "line": 34,
                      "column": 49
                    },
                    "end": {
                      "offset": 1202,
                      "line": 34,
                      "column": 51
                    },
                    "text": "??"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 290.0481376319716,
              "level": "none",
              "comment": "This method has a halstead volume of 290.0481376319716.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 16,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 16 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 781,
                      "line": 21,
                      "column": 34
                    },
                    "end": {
                      "offset": 1262,
                      "line": 36,
                      "column": 4
                    },
                    "text": "{\n    final evaluateTinderState =\n        await chatRoomState.chatDocRef!.get().then((value) {\n      final result = value.docs\n          .map((message) => EvaluateTinderState(\n              docID: message.reference.id,\n              message: message['message'].toString()))\n          .toList();\n\n      return result;\n    });\n\n    state = AsyncValue.data(TinderPageState(\n        roomID: chatRoomState.chatModel.roomUid ?? '',\n        evaluateTinderState: evaluateTinderState));\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 874,
                      "line": 23,
                      "column": 60
                    },
                    "end": {
                      "offset": 1103,
                      "line": 31,
                      "column": 6
                    },
                    "text": "{\n      final result = value.docs\n          .map((message) => EvaluateTinderState(\n              docID: message.reference.id,\n              message: message['message'].toString()))\n          .toList();\n\n      return result;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 12 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 783,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 783,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 815,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 815,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 876,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 876,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 908,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 908,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 957,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 957,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1000,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 1000,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1055,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 1055,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1077,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1077,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1098,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1098,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1107,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1107,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1152,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1152,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1207,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1207,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 59,
              "level": "none",
              "comment": "This method has 59 maintainability index.",
              "context": []
            }
          ]
        },
        "TinderNotifier.saveEvaluate": {
          "codeSpan": {
            "start": {
              "offset": 1266,
              "line": 38,
              "column": 3
            },
            "end": {
              "offset": 1422,
              "line": 41,
              "column": 4
            },
            "text": "Future<void> saveEvaluate(EvaluateTinderState data) async {\n    await _tinderRepository.resisterEvaluateRate(\n        state.asData!.value.roomID, data);\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 28.529325012980813,
              "level": "none",
              "comment": "This method has a halstead volume of 28.529325012980813.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1324,
                      "line": 38,
                      "column": 61
                    },
                    "end": {
                      "offset": 1422,
                      "line": 41,
                      "column": 4
                    },
                    "text": "{\n    await _tinderRepository.resisterEvaluateRate(\n        state.asData!.value.roomID, data);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1326,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1326,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1376,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1376,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 84,
              "level": "none",
              "comment": "This method has 84 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/notifier/create_chat_room_notifier.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "CreateChatRoomNotifier": {
          "codeSpan": {
            "start": {
              "offset": 427,
              "line": 11,
              "column": 1
            },
            "end": {
              "offset": 1545,
              "line": 46,
              "column": 2
            },
            "text": "class CreateChatRoomNotifier extends StateNotifier<ChatRoomInformation> {\n  CreateChatRoomNotifier() : super(const ChatRoomInformation());\n\n  final roomInfoRepository = RoomInfoRepository();\n  final userInfoConfRepository = UserInfoConfRepository();\n\n  Future<bool> initRoom(\n      {required String agenda, required String nickName}) async {\n    try {\n      state = await roomInfoRepository.createRoom(\n          agenda: agenda, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }\n\n  Future<bool> joinRoom(\n      {required String roomID, required String nickName}) async {\n    try {\n      state =\n          await roomInfoRepository.joinRoom(roomID: roomID, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor CreateChatRoomNotifier increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 503,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 565,
                      "line": 12,
                      "column": 65
                    },
                    "text": "CreateChatRoomNotifier() : super(const ChatRoomInformation());"
                  }
                },
                {
                  "message": "method initRoom increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 680,
                      "line": 17,
                      "column": 3
                    },
                    "end": {
                      "offset": 1111,
                      "line": 30,
                      "column": 4
                    },
                    "text": "Future<bool> initRoom(\n      {required String agenda, required String nickName}) async {\n    try {\n      state = await roomInfoRepository.createRoom(\n          agenda: agenda, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
                  }
                },
                {
                  "message": "method joinRoom increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1115,
                      "line": 32,
                      "column": 3
                    },
                    "end": {
                      "offset": 1543,
                      "line": 45,
                      "column": 4
                    },
                    "text": "Future<bool> joinRoom(\n      {required String roomID, required String nickName}) async {\n    try {\n      state =\n          await roomInfoRepository.joinRoom(roomID: roomID, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor CreateChatRoomNotifier decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 503,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 565,
                      "line": 12,
                      "column": 65
                    },
                    "text": "CreateChatRoomNotifier() : super(const ChatRoomInformation());"
                  }
                },
                {
                  "message": "functional method initRoom increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 680,
                      "line": 17,
                      "column": 3
                    },
                    "end": {
                      "offset": 1111,
                      "line": 30,
                      "column": 4
                    },
                    "text": "Future<bool> initRoom(\n      {required String agenda, required String nickName}) async {\n    try {\n      state = await roomInfoRepository.createRoom(\n          agenda: agenda, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
                  }
                },
                {
                  "message": "functional method joinRoom increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1115,
                      "line": 32,
                      "column": 3
                    },
                    "end": {
                      "offset": 1543,
                      "line": 45,
                      "column": 4
                    },
                    "text": "Future<bool> joinRoom(\n      {required String roomID, required String nickName}) async {\n    try {\n      state =\n          await roomInfoRepository.joinRoom(roomID: roomID, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "CreateChatRoomNotifier.CreateChatRoomNotifier": {
          "codeSpan": {
            "start": {
              "offset": 503,
              "line": 12,
              "column": 3
            },
            "end": {
              "offset": 565,
              "line": 12,
              "column": 65
            },
            "text": "CreateChatRoomNotifier() : super(const ChatRoomInformation());"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "CreateChatRoomNotifier.initRoom": {
          "codeSpan": {
            "start": {
              "offset": 680,
              "line": 17,
              "column": 3
            },
            "end": {
              "offset": 1111,
              "line": 30,
              "column": 4
            },
            "text": "Future<bool> initRoom(\n      {required String agenda, required String nickName}) async {\n    try {\n      state = await roomInfoRepository.createRoom(\n          agenda: agenda, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "Catch clause increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1038,
                      "line": 26,
                      "column": 7
                    },
                    "end": {
                      "offset": 1107,
                      "line": 29,
                      "column": 6
                    },
                    "text": "on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 110.36149671375918,
              "level": "none",
              "comment": "This method has a halstead volume of 110.36149671375918.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 14,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 14 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 767,
                      "line": 18,
                      "column": 65
                    },
                    "end": {
                      "offset": 1111,
                      "line": 30,
                      "column": 4
                    },
                    "text": "{\n    try {\n      state = await roomInfoRepository.createRoom(\n          agenda: agenda, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
                  }
                },
                {
                  "message": "Try statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 777,
                      "line": 19,
                      "column": 9
                    },
                    "end": {
                      "offset": 1037,
                      "line": 26,
                      "column": 6
                    },
                    "text": "{\n      state = await roomInfoRepository.createRoom(\n          agenda: agenda, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 10,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 10 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 769,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 769,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 779,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 779,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 830,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 830,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 877,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 877,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 932,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 932,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1013,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 1013,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1032,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 1032,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1063,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 1063,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1082,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 1082,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1102,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1102,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 64,
              "level": "none",
              "comment": "This method has 64 maintainability index.",
              "context": []
            }
          ]
        },
        "CreateChatRoomNotifier.joinRoom": {
          "codeSpan": {
            "start": {
              "offset": 1115,
              "line": 32,
              "column": 3
            },
            "end": {
              "offset": 1543,
              "line": 45,
              "column": 4
            },
            "text": "Future<bool> joinRoom(\n      {required String roomID, required String nickName}) async {\n    try {\n      state =\n          await roomInfoRepository.joinRoom(roomID: roomID, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "Catch clause increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1470,
                      "line": 41,
                      "column": 7
                    },
                    "end": {
                      "offset": 1539,
                      "line": 44,
                      "column": 6
                    },
                    "text": "on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 110.36149671375918,
              "level": "none",
              "comment": "This method has a halstead volume of 110.36149671375918.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 14,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 14 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1202,
                      "line": 33,
                      "column": 65
                    },
                    "end": {
                      "offset": 1543,
                      "line": 45,
                      "column": 4
                    },
                    "text": "{\n    try {\n      state =\n          await roomInfoRepository.joinRoom(roomID: roomID, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    } on Exception catch (e) {\n      logger.e(e);\n      return false;\n    }\n  }"
                  }
                },
                {
                  "message": "Try statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1212,
                      "line": 34,
                      "column": 9
                    },
                    "end": {
                      "offset": 1469,
                      "line": 41,
                      "column": 6
                    },
                    "text": "{\n      state =\n          await roomInfoRepository.joinRoom(roomID: roomID, nickName: nickName);\n      await userInfoConfRepository.createUserConfInfo(\n          agenda: state.agenda, roomID: state.roomUid, hostUiD: state.hostUid);\n\n      return true;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 10,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 10 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1204,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1204,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1214,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1214,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1228,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1228,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1309,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1309,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1364,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1364,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1445,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1445,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1464,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1464,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1495,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1495,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1514,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1514,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1534,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1534,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 64,
              "level": "none",
              "comment": "This method has 64 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/notifier/remote_config_notifier.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {},
      "functions": {},
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/notifier/login_notifier.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "LoginNotifier": {
          "codeSpan": {
            "start": {
              "offset": 326,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 633,
              "line": 19,
              "column": 2
            },
            "text": "class LoginNotifier extends StateNotifier<LoginDto> {\n  LoginNotifier() : super(LoginDto.noLogin());\n\n  final loginUseCase = LoginUseCase();\n\n  Future<LoginStatus> emailLogin(LoginDto signUpDto) async {\n    return loginUseCase.emailLogin(\n        email: signUpDto.email, password: signUpDto.password);\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor LoginNotifier increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 382,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 426,
                      "line": 11,
                      "column": 47
                    },
                    "text": "LoginNotifier() : super(LoginDto.noLogin());"
                  }
                },
                {
                  "message": "method emailLogin increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 470,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 631,
                      "line": 18,
                      "column": 4
                    },
                    "text": "Future<LoginStatus> emailLogin(LoginDto signUpDto) async {\n    return loginUseCase.emailLogin(\n        email: signUpDto.email, password: signUpDto.password);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.5,
              "level": "none",
              "comment": "This class has a weight of 0.5.",
              "context": [
                {
                  "message": "public constructor LoginNotifier decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 382,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 426,
                      "line": 11,
                      "column": 47
                    },
                    "text": "LoginNotifier() : super(LoginDto.noLogin());"
                  }
                },
                {
                  "message": "functional method emailLogin increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 470,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 631,
                      "line": 18,
                      "column": 4
                    },
                    "text": "Future<LoginStatus> emailLogin(LoginDto signUpDto) async {\n    return loginUseCase.emailLogin(\n        email: signUpDto.email, password: signUpDto.password);\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "LoginNotifier.LoginNotifier": {
          "codeSpan": {
            "start": {
              "offset": 382,
              "line": 11,
              "column": 3
            },
            "end": {
              "offset": 426,
              "line": 11,
              "column": 47
            },
            "text": "LoginNotifier() : super(LoginDto.noLogin());"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "LoginNotifier.emailLogin": {
          "codeSpan": {
            "start": {
              "offset": 470,
              "line": 15,
              "column": 3
            },
            "end": {
              "offset": 631,
              "line": 18,
              "column": 4
            },
            "text": "Future<LoginStatus> emailLogin(LoginDto signUpDto) async {\n    return loginUseCase.emailLogin(\n        email: signUpDto.email, password: signUpDto.password);\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 18.575424759098897,
              "level": "none",
              "comment": "This method has a halstead volume of 18.575424759098897.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 527,
                      "line": 15,
                      "column": 60
                    },
                    "end": {
                      "offset": 631,
                      "line": 18,
                      "column": 4
                    },
                    "text": "{\n    return loginUseCase.emailLogin(\n        email: signUpDto.email, password: signUpDto.password);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 529,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 529,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 565,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 565,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 85,
              "level": "none",
              "comment": "This method has 85 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/notifier/conference_summary_notifier.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ConferenceSummaryNotifier": {
          "codeSpan": {
            "start": {
              "offset": 658,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 2382,
              "line": 65,
              "column": 2
            },
            "text": "class ConferenceSummaryNotifier\n    extends StateNotifier<ConferenceMessagesDetailState> {\n  ConferenceSummaryNotifier(ConferenceHistoryState conferenceData)\n      : _confMessagesRepository = ConfMessagesRepository(),\n        _conferenceData = conferenceData,\n        _tinderRepository = TinderRepository(),\n        _confSummaryPDFRepository = ConfSummaryPDFRepository(),\n        super(ConferenceMessagesDetailState(\n            agenda: conferenceData.agenda,\n            evaluateSummary: const AsyncValue.loading())) {\n    initState();\n  }\n\n  final ConferenceHistoryState _conferenceData;\n  final ConfMessagesRepository _confMessagesRepository;\n  final TinderRepository _tinderRepository;\n  final ConfSummaryPDFRepository _confSummaryPDFRepository;\n\n  Future<void> initState() async {\n    final messages = await _confMessagesRepository\n        .getMessages(_conferenceData.roomRef.collection('messages'));\n\n    final evaluateSummaryList = <EvaluationSummaryState>[];\n\n    for (final message in messages) {\n      final tinderList = await _tinderRepository.getEvaluateRate(\n          roomID: _conferenceData.roomRef.id, messageID: message.docID!);\n\n      evaluateSummaryList\n          .add(EvaluationSummaryState.create(message.message, tinderList));\n    }\n\n    state =\n        state.copyWith(evaluateSummary: AsyncValue.data(evaluateSummaryList));\n  }\n\n  Future<bool> sharePdf() async {\n    if (state.evaluateSummary is! AsyncData) {\n      return false;\n    }\n    final pdf = await _confSummaryPDFRepository.generatePdf(state);\n\n    if (pdf == null) {\n      return false;\n    }\n\n    final result = await _confSummaryPDFRepository.sharePdf(\n        fileName: '${state.agenda}_summary.pdf', pdf: pdf);\n    return result;\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor ConferenceSummaryNotifier increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 751,
                      "line": 17,
                      "column": 3
                    },
                    "end": {
                      "offset": 1198,
                      "line": 26,
                      "column": 4
                    },
                    "text": "ConferenceSummaryNotifier(ConferenceHistoryState conferenceData)\n      : _confMessagesRepository = ConfMessagesRepository(),\n        _conferenceData = conferenceData,\n        _tinderRepository = TinderRepository(),\n        _confSummaryPDFRepository = ConfSummaryPDFRepository(),\n        super(ConferenceMessagesDetailState(\n            agenda: conferenceData.agenda,\n            evaluateSummary: const AsyncValue.loading())) {\n    initState();\n  }"
                  }
                },
                {
                  "message": "method initState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1411,
                      "line": 33,
                      "column": 3
                    },
                    "end": {
                      "offset": 2009,
                      "line": 49,
                      "column": 4
                    },
                    "text": "Future<void> initState() async {\n    final messages = await _confMessagesRepository\n        .getMessages(_conferenceData.roomRef.collection('messages'));\n\n    final evaluateSummaryList = <EvaluationSummaryState>[];\n\n    for (final message in messages) {\n      final tinderList = await _tinderRepository.getEvaluateRate(\n          roomID: _conferenceData.roomRef.id, messageID: message.docID!);\n\n      evaluateSummaryList\n          .add(EvaluationSummaryState.create(message.message, tinderList));\n    }\n\n    state =\n        state.copyWith(evaluateSummary: AsyncValue.data(evaluateSummaryList));\n  }"
                  }
                },
                {
                  "message": "method sharePdf increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 2013,
                      "line": 51,
                      "column": 3
                    },
                    "end": {
                      "offset": 2380,
                      "line": 64,
                      "column": 4
                    },
                    "text": "Future<bool> sharePdf() async {\n    if (state.evaluateSummary is! AsyncData) {\n      return false;\n    }\n    final pdf = await _confSummaryPDFRepository.generatePdf(state);\n\n    if (pdf == null) {\n      return false;\n    }\n\n    final result = await _confSummaryPDFRepository.sharePdf(\n        fileName: '${state.agenda}_summary.pdf', pdf: pdf);\n    return result;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor ConferenceSummaryNotifier decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 751,
                      "line": 17,
                      "column": 3
                    },
                    "end": {
                      "offset": 1198,
                      "line": 26,
                      "column": 4
                    },
                    "text": "ConferenceSummaryNotifier(ConferenceHistoryState conferenceData)\n      : _confMessagesRepository = ConfMessagesRepository(),\n        _conferenceData = conferenceData,\n        _tinderRepository = TinderRepository(),\n        _confSummaryPDFRepository = ConfSummaryPDFRepository(),\n        super(ConferenceMessagesDetailState(\n            agenda: conferenceData.agenda,\n            evaluateSummary: const AsyncValue.loading())) {\n    initState();\n  }"
                  }
                },
                {
                  "message": "functional method initState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1411,
                      "line": 33,
                      "column": 3
                    },
                    "end": {
                      "offset": 2009,
                      "line": 49,
                      "column": 4
                    },
                    "text": "Future<void> initState() async {\n    final messages = await _confMessagesRepository\n        .getMessages(_conferenceData.roomRef.collection('messages'));\n\n    final evaluateSummaryList = <EvaluationSummaryState>[];\n\n    for (final message in messages) {\n      final tinderList = await _tinderRepository.getEvaluateRate(\n          roomID: _conferenceData.roomRef.id, messageID: message.docID!);\n\n      evaluateSummaryList\n          .add(EvaluationSummaryState.create(message.message, tinderList));\n    }\n\n    state =\n        state.copyWith(evaluateSummary: AsyncValue.data(evaluateSummaryList));\n  }"
                  }
                },
                {
                  "message": "functional method sharePdf increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 2013,
                      "line": 51,
                      "column": 3
                    },
                    "end": {
                      "offset": 2380,
                      "line": 64,
                      "column": 4
                    },
                    "text": "Future<bool> sharePdf() async {\n    if (state.evaluateSummary is! AsyncData) {\n      return false;\n    }\n    final pdf = await _confSummaryPDFRepository.generatePdf(state);\n\n    if (pdf == null) {\n      return false;\n    }\n\n    final result = await _confSummaryPDFRepository.sharePdf(\n        fileName: '${state.agenda}_summary.pdf', pdf: pdf);\n    return result;\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ConferenceSummaryNotifier.ConferenceSummaryNotifier": {
          "codeSpan": {
            "start": {
              "offset": 751,
              "line": 17,
              "column": 3
            },
            "end": {
              "offset": 1198,
              "line": 26,
              "column": 4
            },
            "text": "ConferenceSummaryNotifier(ConferenceHistoryState conferenceData)\n      : _confMessagesRepository = ConfMessagesRepository(),\n        _conferenceData = conferenceData,\n        _tinderRepository = TinderRepository(),\n        _confSummaryPDFRepository = ConfSummaryPDFRepository(),\n        super(ConferenceMessagesDetailState(\n            agenda: conferenceData.agenda,\n            evaluateSummary: const AsyncValue.loading())) {\n    initState();\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 10,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 10 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1176,
                      "line": 24,
                      "column": 59
                    },
                    "end": {
                      "offset": 1198,
                      "line": 26,
                      "column": 4
                    },
                    "text": "{\n    initState();\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1178,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 1178,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ConferenceSummaryNotifier.initState": {
          "codeSpan": {
            "start": {
              "offset": 1411,
              "line": 33,
              "column": 3
            },
            "end": {
              "offset": 2009,
              "line": 49,
              "column": 4
            },
            "text": "Future<void> initState() async {\n    final messages = await _confMessagesRepository\n        .getMessages(_conferenceData.roomRef.collection('messages'));\n\n    final evaluateSummaryList = <EvaluationSummaryState>[];\n\n    for (final message in messages) {\n      final tinderList = await _tinderRepository.getEvaluateRate(\n          roomID: _conferenceData.roomRef.id, messageID: message.docID!);\n\n      evaluateSummaryList\n          .add(EvaluationSummaryState.create(message.message, tinderList));\n    }\n\n    state =\n        state.copyWith(evaluateSummary: AsyncValue.data(evaluateSummaryList));\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "For statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 1631,
                      "line": 39,
                      "column": 5
                    },
                    "end": {
                      "offset": 1913,
                      "line": 45,
                      "column": 6
                    },
                    "text": "for (final message in messages) {\n      final tinderList = await _tinderRepository.getEvaluateRate(\n          roomID: _conferenceData.roomRef.id, messageID: message.docID!);\n\n      evaluateSummaryList\n          .add(EvaluationSummaryState.create(message.message, tinderList));\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 206.71626164847697,
              "level": "none",
              "comment": "This method has a halstead volume of 206.71626164847697.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 17,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 17 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1442,
                      "line": 33,
                      "column": 34
                    },
                    "end": {
                      "offset": 2009,
                      "line": 49,
                      "column": 4
                    },
                    "text": "{\n    final messages = await _confMessagesRepository\n        .getMessages(_conferenceData.roomRef.collection('messages'));\n\n    final evaluateSummaryList = <EvaluationSummaryState>[];\n\n    for (final message in messages) {\n      final tinderList = await _tinderRepository.getEvaluateRate(\n          roomID: _conferenceData.roomRef.id, messageID: message.docID!);\n\n      evaluateSummaryList\n          .add(EvaluationSummaryState.create(message.message, tinderList));\n    }\n\n    state =\n        state.copyWith(evaluateSummary: AsyncValue.data(evaluateSummaryList));\n  }"
                  }
                },
                {
                  "message": "For statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1663,
                      "line": 39,
                      "column": 37
                    },
                    "end": {
                      "offset": 1913,
                      "line": 45,
                      "column": 6
                    },
                    "text": "{\n      final tinderList = await _tinderRepository.getEvaluateRate(\n          roomID: _conferenceData.roomRef.id, messageID: message.docID!);\n\n      evaluateSummaryList\n          .add(EvaluationSummaryState.create(message.message, tinderList));\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 11,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 11 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1444,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1444,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1495,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1495,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1566,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1566,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1627,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1627,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1665,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1665,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1731,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1731,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1806,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1806,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1832,
                      "line": 44,
                      "column": 0
                    },
                    "end": {
                      "offset": 1832,
                      "line": 44,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1908,
                      "line": 45,
                      "column": 0
                    },
                    "end": {
                      "offset": 1908,
                      "line": 45,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1915,
                      "line": 47,
                      "column": 0
                    },
                    "end": {
                      "offset": 1915,
                      "line": 47,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1927,
                      "line": 48,
                      "column": 0
                    },
                    "end": {
                      "offset": 1927,
                      "line": 48,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 61,
              "level": "none",
              "comment": "This method has 61 maintainability index.",
              "context": []
            }
          ]
        },
        "ConferenceSummaryNotifier.sharePdf": {
          "codeSpan": {
            "start": {
              "offset": 2013,
              "line": 51,
              "column": 3
            },
            "end": {
              "offset": 2380,
              "line": 64,
              "column": 4
            },
            "text": "Future<bool> sharePdf() async {\n    if (state.evaluateSummary is! AsyncData) {\n      return false;\n    }\n    final pdf = await _confSummaryPDFRepository.generatePdf(state);\n\n    if (pdf == null) {\n      return false;\n    }\n\n    final result = await _confSummaryPDFRepository.sharePdf(\n        fileName: '${state.agenda}_summary.pdf', pdf: pdf);\n    return result;\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 3,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 3.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2049,
                      "line": 52,
                      "column": 5
                    },
                    "end": {
                      "offset": 2117,
                      "line": 54,
                      "column": 6
                    },
                    "text": "if (state.evaluateSummary is! AsyncData) {\n      return false;\n    }"
                  }
                },
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2191,
                      "line": 57,
                      "column": 5
                    },
                    "end": {
                      "offset": 2235,
                      "line": 59,
                      "column": 6
                    },
                    "text": "if (pdf == null) {\n      return false;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 87.56916320732489,
              "level": "none",
              "comment": "This method has a halstead volume of 87.56916320732489.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 14,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 14 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2043,
                      "line": 51,
                      "column": 33
                    },
                    "end": {
                      "offset": 2380,
                      "line": 64,
                      "column": 4
                    },
                    "text": "{\n    if (state.evaluateSummary is! AsyncData) {\n      return false;\n    }\n    final pdf = await _confSummaryPDFRepository.generatePdf(state);\n\n    if (pdf == null) {\n      return false;\n    }\n\n    final result = await _confSummaryPDFRepository.sharePdf(\n        fileName: '${state.agenda}_summary.pdf', pdf: pdf);\n    return result;\n  }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2090,
                      "line": 52,
                      "column": 46
                    },
                    "end": {
                      "offset": 2117,
                      "line": 54,
                      "column": 6
                    },
                    "text": "{\n      return false;\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 10,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 10 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2045,
                      "line": 52,
                      "column": 0
                    },
                    "end": {
                      "offset": 2045,
                      "line": 52,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2092,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 2092,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2112,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 2112,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2118,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 2118,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2187,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 2187,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2210,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 2210,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2230,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2230,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2237,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2237,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2298,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2298,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2358,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2358,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 65,
              "level": "none",
              "comment": "This method has 65 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/main.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "MyApp": {
          "codeSpan": {
            "start": {
              "offset": 1754,
              "line": 46,
              "column": 1
            },
            "end": {
              "offset": 4404,
              "line": 125,
              "column": 2
            },
            "text": "class MyApp extends StatelessWidget {\r\n  const MyApp({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    const usedFlexScheme = FlexScheme.hippieBlue;\r\n\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      localizationsDelegates: const <LocalizationsDelegate<dynamic>>[\r\n        DefaultMaterialLocalizations.delegate,\r\n        DefaultWidgetsLocalizations.delegate,\r\n        DefaultCupertinoLocalizations.delegate,\r\n      ],\r\n      theme: FlexColorScheme.light(scheme: usedFlexScheme).toTheme,\r\n      darkTheme: FlexColorScheme.dark(scheme: usedFlexScheme).toTheme,\r\n      navigatorKey: navigatorKey,\r\n      initialRoute: '/',\r\n      onGenerateRoute: settingRoute,\r\n    );\r\n  }\r\n\r\n  Route<dynamic>? settingRoute(RouteSettings settings) {\r\n    final arguments = settings.arguments;\r\n    switch (settings.name) {\r\n      case '/':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const HomePage(),\r\n        );\r\n      case SignUpPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => SignUpPage(),\r\n        );\r\n      case LoginPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => LoginPage(),\r\n        );\r\n      case ChatRoom.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => ChatRoom(arguments! as ChatRoomInformation),\r\n        );\r\n      case '/join':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => JoinChatRoomPage(),\r\n        );\r\n      case '/create':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => CreateChatRoomPage(),\r\n        );\r\n      case EvaluateTinderPage.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) =>\r\n              EvaluateTinderPage(chatRoomState: arguments! as ChatRoomState),\r\n        );\r\n      case '/history':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceHistoryPage(),\r\n        );\r\n      case '/history_detail':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceSummaryPage(),\r\n        );\r\n      case QRScanPage.route:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const QRScanPage(),\r\n        );\r\n    }\r\n    return null;\r\n  }\r\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor MyApp increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1795,
                      "line": 47,
                      "column": 3
                    },
                    "end": {
                      "offset": 1837,
                      "line": 47,
                      "column": 45
                    },
                    "text": "const MyApp({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1856,
                      "line": 50,
                      "column": 3
                    },
                    "end": {
                      "offset": 2490,
                      "line": 66,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\r\n    const usedFlexScheme = FlexScheme.hippieBlue;\r\n\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      localizationsDelegates: const <LocalizationsDelegate<dynamic>>[\r\n        DefaultMaterialLocalizations.delegate,\r\n        DefaultWidgetsLocalizations.delegate,\r\n        DefaultCupertinoLocalizations.delegate,\r\n      ],\r\n      theme: FlexColorScheme.light(scheme: usedFlexScheme).toTheme,\r\n      darkTheme: FlexColorScheme.dark(scheme: usedFlexScheme).toTheme,\r\n      navigatorKey: navigatorKey,\r\n      initialRoute: '/',\r\n      onGenerateRoute: settingRoute,\r\n    );\r\n  }"
                  }
                },
                {
                  "message": "method settingRoute increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 2496,
                      "line": 68,
                      "column": 3
                    },
                    "end": {
                      "offset": 4401,
                      "line": 124,
                      "column": 4
                    },
                    "text": "Route<dynamic>? settingRoute(RouteSettings settings) {\r\n    final arguments = settings.arguments;\r\n    switch (settings.name) {\r\n      case '/':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const HomePage(),\r\n        );\r\n      case SignUpPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => SignUpPage(),\r\n        );\r\n      case LoginPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => LoginPage(),\r\n        );\r\n      case ChatRoom.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => ChatRoom(arguments! as ChatRoomInformation),\r\n        );\r\n      case '/join':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => JoinChatRoomPage(),\r\n        );\r\n      case '/create':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => CreateChatRoomPage(),\r\n        );\r\n      case EvaluateTinderPage.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) =>\r\n              EvaluateTinderPage(chatRoomState: arguments! as ChatRoomState),\r\n        );\r\n      case '/history':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceHistoryPage(),\r\n        );\r\n      case '/history_detail':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceSummaryPage(),\r\n        );\r\n      case QRScanPage.route:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const QRScanPage(),\r\n        );\r\n    }\r\n    return null;\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor MyApp decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1795,
                      "line": 47,
                      "column": 3
                    },
                    "end": {
                      "offset": 1837,
                      "line": 47,
                      "column": 45
                    },
                    "text": "const MyApp({Key? key}) : super(key: key);"
                  }
                },
                {
                  "message": "functional method build increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 1856,
                      "line": 50,
                      "column": 3
                    },
                    "end": {
                      "offset": 2490,
                      "line": 66,
                      "column": 4
                    },
                    "text": "Widget build(BuildContext context) {\r\n    const usedFlexScheme = FlexScheme.hippieBlue;\r\n\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      localizationsDelegates: const <LocalizationsDelegate<dynamic>>[\r\n        DefaultMaterialLocalizations.delegate,\r\n        DefaultWidgetsLocalizations.delegate,\r\n        DefaultCupertinoLocalizations.delegate,\r\n      ],\r\n      theme: FlexColorScheme.light(scheme: usedFlexScheme).toTheme,\r\n      darkTheme: FlexColorScheme.dark(scheme: usedFlexScheme).toTheme,\r\n      navigatorKey: navigatorKey,\r\n      initialRoute: '/',\r\n      onGenerateRoute: settingRoute,\r\n    );\r\n  }"
                  }
                },
                {
                  "message": "functional method settingRoute increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 2496,
                      "line": 68,
                      "column": 3
                    },
                    "end": {
                      "offset": 4401,
                      "line": 124,
                      "column": 4
                    },
                    "text": "Route<dynamic>? settingRoute(RouteSettings settings) {\r\n    final arguments = settings.arguments;\r\n    switch (settings.name) {\r\n      case '/':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const HomePage(),\r\n        );\r\n      case SignUpPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => SignUpPage(),\r\n        );\r\n      case LoginPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => LoginPage(),\r\n        );\r\n      case ChatRoom.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => ChatRoom(arguments! as ChatRoomInformation),\r\n        );\r\n      case '/join':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => JoinChatRoomPage(),\r\n        );\r\n      case '/create':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => CreateChatRoomPage(),\r\n        );\r\n      case EvaluateTinderPage.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) =>\r\n              EvaluateTinderPage(chatRoomState: arguments! as ChatRoomState),\r\n        );\r\n      case '/history':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceHistoryPage(),\r\n        );\r\n      case '/history_detail':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceSummaryPage(),\r\n        );\r\n      case QRScanPage.route:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const QRScanPage(),\r\n        );\r\n    }\r\n    return null;\r\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "main": {
          "codeSpan": {
            "start": {
              "offset": 1176,
              "line": 24,
              "column": 1
            },
            "end": {
              "offset": 1750,
              "line": 44,
              "column": 2
            },
            "text": "Future<void> main() async {\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n\r\n  // ビルド時に指定したFlavorを取得\r\n  const flavorString =\r\n      String.fromEnvironment('FLAVOR', defaultValue: 'production');\r\n  final flavor = Flavor.values.firstWhere((e) => e.key == flavorString);\r\n\r\n  await Future.wait<void>([\r\n    FirebaseHelper.initializeFirebaseApp(),\r\n  ]);\r\n\r\n  runZonedGuarded(() {\r\n    runApp(ProviderScope(\r\n      overrides: [\r\n        flavorProvider.overrideWithValue(flavor),\r\n      ],\r\n      child: const MyApp(),\r\n    ));\r\n  }, FirebaseCrashlytics.instance.recordError);\r\n}"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 240,
              "level": "none",
              "comment": "This function has a halstead volume of 240.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 21,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 21 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This function has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1202,
                      "line": 24,
                      "column": 27
                    },
                    "end": {
                      "offset": 1750,
                      "line": 44,
                      "column": 2
                    },
                    "text": "{\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n\r\n  // ビルド時に指定したFlavorを取得\r\n  const flavorString =\r\n      String.fromEnvironment('FLAVOR', defaultValue: 'production');\r\n  final flavor = Flavor.values.firstWhere((e) => e.key == flavorString);\r\n\r\n  await Future.wait<void>([\r\n    FirebaseHelper.initializeFirebaseApp(),\r\n  ]);\r\n\r\n  runZonedGuarded(() {\r\n    runApp(ProviderScope(\r\n      overrides: [\r\n        flavorProvider.overrideWithValue(flavor),\r\n      ],\r\n      child: const MyApp(),\r\n    ));\r\n  }, FirebaseCrashlytics.instance.recordError);\r\n}"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1551,
                      "line": 36,
                      "column": 22
                    },
                    "end": {
                      "offset": 1703,
                      "line": 43,
                      "column": 4
                    },
                    "text": "{\r\n    runApp(ProviderScope(\r\n      overrides: [\r\n        flavorProvider.overrideWithValue(flavor),\r\n      ],\r\n      child: const MyApp(),\r\n    ));\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This function has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 15,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 15 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1205,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 1205,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1278,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 1278,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1302,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1302,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1371,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1371,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1447,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1447,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1476,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1476,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1521,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1521,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1530,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1530,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1554,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1554,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1581,
                      "line": 38,
                      "column": 0
                    },
                    "end": {
                      "offset": 1581,
                      "line": 38,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1601,
                      "line": 39,
                      "column": 0
                    },
                    "end": {
                      "offset": 1601,
                      "line": 39,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1652,
                      "line": 40,
                      "column": 0
                    },
                    "end": {
                      "offset": 1652,
                      "line": 40,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1662,
                      "line": 41,
                      "column": 0
                    },
                    "end": {
                      "offset": 1662,
                      "line": 41,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1691,
                      "line": 42,
                      "column": 0
                    },
                    "end": {
                      "offset": 1691,
                      "line": 42,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1700,
                      "line": 43,
                      "column": 0
                    },
                    "end": {
                      "offset": 1700,
                      "line": 43,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 58,
              "level": "none",
              "comment": "This function has 58 maintainability index.",
              "context": []
            }
          ]
        },
        "MyApp.MyApp": {
          "codeSpan": {
            "start": {
              "offset": 1795,
              "line": 47,
              "column": 3
            },
            "end": {
              "offset": 1837,
              "line": 47,
              "column": 45
            },
            "text": "const MyApp({Key? key}) : super(key: key);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "MyApp.build": {
          "codeSpan": {
            "start": {
              "offset": 1856,
              "line": 50,
              "column": 3
            },
            "end": {
              "offset": 2490,
              "line": 66,
              "column": 4
            },
            "text": "Widget build(BuildContext context) {\r\n    const usedFlexScheme = FlexScheme.hippieBlue;\r\n\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      localizationsDelegates: const <LocalizationsDelegate<dynamic>>[\r\n        DefaultMaterialLocalizations.delegate,\r\n        DefaultWidgetsLocalizations.delegate,\r\n        DefaultCupertinoLocalizations.delegate,\r\n      ],\r\n      theme: FlexColorScheme.light(scheme: usedFlexScheme).toTheme,\r\n      darkTheme: FlexColorScheme.dark(scheme: usedFlexScheme).toTheme,\r\n      navigatorKey: navigatorKey,\r\n      initialRoute: '/',\r\n      onGenerateRoute: settingRoute,\r\n    );\r\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 169.21582985307933,
              "level": "none",
              "comment": "This method has a halstead volume of 169.21582985307933.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 18,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 18 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 1891,
                      "line": 50,
                      "column": 38
                    },
                    "end": {
                      "offset": 2490,
                      "line": 66,
                      "column": 4
                    },
                    "text": "{\r\n    const usedFlexScheme = FlexScheme.hippieBlue;\r\n\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      localizationsDelegates: const <LocalizationsDelegate<dynamic>>[\r\n        DefaultMaterialLocalizations.delegate,\r\n        DefaultWidgetsLocalizations.delegate,\r\n        DefaultCupertinoLocalizations.delegate,\r\n      ],\r\n      theme: FlexColorScheme.light(scheme: usedFlexScheme).toTheme,\r\n      darkTheme: FlexColorScheme.dark(scheme: usedFlexScheme).toTheme,\r\n      navigatorKey: navigatorKey,\r\n      initialRoute: '/',\r\n      onGenerateRoute: settingRoute,\r\n    );\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 14,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 14 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1894,
                      "line": 51,
                      "column": 0
                    },
                    "end": {
                      "offset": 1894,
                      "line": 51,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1947,
                      "line": 53,
                      "column": 0
                    },
                    "end": {
                      "offset": 1947,
                      "line": 53,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1972,
                      "line": 54,
                      "column": 0
                    },
                    "end": {
                      "offset": 1972,
                      "line": 54,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2014,
                      "line": 55,
                      "column": 0
                    },
                    "end": {
                      "offset": 2014,
                      "line": 55,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2085,
                      "line": 56,
                      "column": 0
                    },
                    "end": {
                      "offset": 2085,
                      "line": 56,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2133,
                      "line": 57,
                      "column": 0
                    },
                    "end": {
                      "offset": 2133,
                      "line": 57,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2180,
                      "line": 58,
                      "column": 0
                    },
                    "end": {
                      "offset": 2180,
                      "line": 58,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2229,
                      "line": 59,
                      "column": 0
                    },
                    "end": {
                      "offset": 2229,
                      "line": 59,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2239,
                      "line": 60,
                      "column": 0
                    },
                    "end": {
                      "offset": 2239,
                      "line": 60,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2308,
                      "line": 61,
                      "column": 0
                    },
                    "end": {
                      "offset": 2308,
                      "line": 61,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2380,
                      "line": 62,
                      "column": 0
                    },
                    "end": {
                      "offset": 2380,
                      "line": 62,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2415,
                      "line": 63,
                      "column": 0
                    },
                    "end": {
                      "offset": 2415,
                      "line": 63,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2441,
                      "line": 64,
                      "column": 0
                    },
                    "end": {
                      "offset": 2441,
                      "line": 64,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2479,
                      "line": 65,
                      "column": 0
                    },
                    "end": {
                      "offset": 2479,
                      "line": 65,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 60,
              "level": "none",
              "comment": "This method has 60 maintainability index.",
              "context": []
            }
          ]
        },
        "MyApp.settingRoute": {
          "codeSpan": {
            "start": {
              "offset": 2496,
              "line": 68,
              "column": 3
            },
            "end": {
              "offset": 4401,
              "line": 124,
              "column": 4
            },
            "text": "Route<dynamic>? settingRoute(RouteSettings settings) {\r\n    final arguments = settings.arguments;\r\n    switch (settings.name) {\r\n      case '/':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const HomePage(),\r\n        );\r\n      case SignUpPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => SignUpPage(),\r\n        );\r\n      case LoginPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => LoginPage(),\r\n        );\r\n      case ChatRoom.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => ChatRoom(arguments! as ChatRoomInformation),\r\n        );\r\n      case '/join':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => JoinChatRoomPage(),\r\n        );\r\n      case '/create':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => CreateChatRoomPage(),\r\n        );\r\n      case EvaluateTinderPage.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) =>\r\n              EvaluateTinderPage(chatRoomState: arguments! as ChatRoomState),\r\n        );\r\n      case '/history':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceHistoryPage(),\r\n        );\r\n      case '/history_detail':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceSummaryPage(),\r\n        );\r\n      case QRScanPage.route:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const QRScanPage(),\r\n        );\r\n    }\r\n    return null;\r\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 11,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 11.",
              "context": [
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2631,
                      "line": 71,
                      "column": 7
                    },
                    "end": {
                      "offset": 2775,
                      "line": 75,
                      "column": 11
                    },
                    "text": "case '/':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const HomePage(),\r\n        );"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2783,
                      "line": 76,
                      "column": 7
                    },
                    "end": {
                      "offset": 2939,
                      "line": 80,
                      "column": 11
                    },
                    "text": "case SignUpPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => SignUpPage(),\r\n        );"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 2947,
                      "line": 81,
                      "column": 7
                    },
                    "end": {
                      "offset": 3101,
                      "line": 85,
                      "column": 11
                    },
                    "text": "case LoginPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => LoginPage(),\r\n        );"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3109,
                      "line": 86,
                      "column": 7
                    },
                    "end": {
                      "offset": 3295,
                      "line": 90,
                      "column": 11
                    },
                    "text": "case ChatRoom.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => ChatRoom(arguments! as ChatRoomInformation),\r\n        );"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3303,
                      "line": 91,
                      "column": 7
                    },
                    "end": {
                      "offset": 3453,
                      "line": 95,
                      "column": 11
                    },
                    "text": "case '/join':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => JoinChatRoomPage(),\r\n        );"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3461,
                      "line": 96,
                      "column": 7
                    },
                    "end": {
                      "offset": 3615,
                      "line": 100,
                      "column": 11
                    },
                    "text": "case '/create':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => CreateChatRoomPage(),\r\n        );"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3623,
                      "line": 101,
                      "column": 7
                    },
                    "end": {
                      "offset": 3853,
                      "line": 106,
                      "column": 11
                    },
                    "text": "case EvaluateTinderPage.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) =>\r\n              EvaluateTinderPage(chatRoomState: arguments! as ChatRoomState),\r\n        );"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 3861,
                      "line": 107,
                      "column": 7
                    },
                    "end": {
                      "offset": 4025,
                      "line": 111,
                      "column": 11
                    },
                    "text": "case '/history':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceHistoryPage(),\r\n        );"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 4033,
                      "line": 112,
                      "column": 7
                    },
                    "end": {
                      "offset": 4204,
                      "line": 116,
                      "column": 11
                    },
                    "text": "case '/history_detail':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceSummaryPage(),\r\n        );"
                  }
                },
                {
                  "message": "Switch case increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 4212,
                      "line": 117,
                      "column": 7
                    },
                    "end": {
                      "offset": 4371,
                      "line": 121,
                      "column": 11
                    },
                    "text": "case QRScanPage.route:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const QRScanPage(),\r\n        );"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 589.6060502682702,
              "level": "none",
              "comment": "This method has a halstead volume of 589.6060502682702.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 57,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 57 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 2549,
                      "line": 68,
                      "column": 56
                    },
                    "end": {
                      "offset": 4401,
                      "line": 124,
                      "column": 4
                    },
                    "text": "{\r\n    final arguments = settings.arguments;\r\n    switch (settings.name) {\r\n      case '/':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const HomePage(),\r\n        );\r\n      case SignUpPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => SignUpPage(),\r\n        );\r\n      case LoginPage.rootName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => LoginPage(),\r\n        );\r\n      case ChatRoom.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => ChatRoom(arguments! as ChatRoomInformation),\r\n        );\r\n      case '/join':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => JoinChatRoomPage(),\r\n        );\r\n      case '/create':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => CreateChatRoomPage(),\r\n        );\r\n      case EvaluateTinderPage.routeName:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) =>\r\n              EvaluateTinderPage(chatRoomState: arguments! as ChatRoomState),\r\n        );\r\n      case '/history':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceHistoryPage(),\r\n        );\r\n      case '/history_detail':\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const ConferenceSummaryPage(),\r\n        );\r\n      case QRScanPage.route:\r\n        return MaterialPageRoute<void>(\r\n          settings: settings,\r\n          builder: (context) => const QRScanPage(),\r\n        );\r\n    }\r\n    return null;\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 55,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 55 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2552,
                      "line": 69,
                      "column": 0
                    },
                    "end": {
                      "offset": 2552,
                      "line": 69,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2595,
                      "line": 70,
                      "column": 0
                    },
                    "end": {
                      "offset": 2595,
                      "line": 70,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2625,
                      "line": 71,
                      "column": 0
                    },
                    "end": {
                      "offset": 2625,
                      "line": 71,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2642,
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "offset": 2642,
                      "line": 72,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2683,
                      "line": 73,
                      "column": 0
                    },
                    "end": {
                      "offset": 2683,
                      "line": 73,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2714,
                      "line": 74,
                      "column": 0
                    },
                    "end": {
                      "offset": 2714,
                      "line": 74,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2765,
                      "line": 75,
                      "column": 0
                    },
                    "end": {
                      "offset": 2765,
                      "line": 75,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2777,
                      "line": 76,
                      "column": 0
                    },
                    "end": {
                      "offset": 2777,
                      "line": 76,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2810,
                      "line": 77,
                      "column": 0
                    },
                    "end": {
                      "offset": 2810,
                      "line": 77,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2851,
                      "line": 78,
                      "column": 0
                    },
                    "end": {
                      "offset": 2851,
                      "line": 78,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2882,
                      "line": 79,
                      "column": 0
                    },
                    "end": {
                      "offset": 2882,
                      "line": 79,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2929,
                      "line": 80,
                      "column": 0
                    },
                    "end": {
                      "offset": 2929,
                      "line": 80,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2941,
                      "line": 81,
                      "column": 0
                    },
                    "end": {
                      "offset": 2941,
                      "line": 81,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 2973,
                      "line": 82,
                      "column": 0
                    },
                    "end": {
                      "offset": 2973,
                      "line": 82,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3014,
                      "line": 83,
                      "column": 0
                    },
                    "end": {
                      "offset": 3014,
                      "line": 83,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3045,
                      "line": 84,
                      "column": 0
                    },
                    "end": {
                      "offset": 3045,
                      "line": 84,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3091,
                      "line": 85,
                      "column": 0
                    },
                    "end": {
                      "offset": 3091,
                      "line": 85,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3103,
                      "line": 86,
                      "column": 0
                    },
                    "end": {
                      "offset": 3103,
                      "line": 86,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3135,
                      "line": 87,
                      "column": 0
                    },
                    "end": {
                      "offset": 3135,
                      "line": 87,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3176,
                      "line": 88,
                      "column": 0
                    },
                    "end": {
                      "offset": 3176,
                      "line": 88,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3207,
                      "line": 89,
                      "column": 0
                    },
                    "end": {
                      "offset": 3207,
                      "line": 89,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3285,
                      "line": 90,
                      "column": 0
                    },
                    "end": {
                      "offset": 3285,
                      "line": 90,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3297,
                      "line": 91,
                      "column": 0
                    },
                    "end": {
                      "offset": 3297,
                      "line": 91,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3318,
                      "line": 92,
                      "column": 0
                    },
                    "end": {
                      "offset": 3318,
                      "line": 92,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3359,
                      "line": 93,
                      "column": 0
                    },
                    "end": {
                      "offset": 3359,
                      "line": 93,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3390,
                      "line": 94,
                      "column": 0
                    },
                    "end": {
                      "offset": 3390,
                      "line": 94,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3443,
                      "line": 95,
                      "column": 0
                    },
                    "end": {
                      "offset": 3443,
                      "line": 95,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3455,
                      "line": 96,
                      "column": 0
                    },
                    "end": {
                      "offset": 3455,
                      "line": 96,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3478,
                      "line": 97,
                      "column": 0
                    },
                    "end": {
                      "offset": 3478,
                      "line": 97,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3519,
                      "line": 98,
                      "column": 0
                    },
                    "end": {
                      "offset": 3519,
                      "line": 98,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3550,
                      "line": 99,
                      "column": 0
                    },
                    "end": {
                      "offset": 3550,
                      "line": 99,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3605,
                      "line": 100,
                      "column": 0
                    },
                    "end": {
                      "offset": 3605,
                      "line": 100,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3617,
                      "line": 101,
                      "column": 0
                    },
                    "end": {
                      "offset": 3617,
                      "line": 101,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3659,
                      "line": 102,
                      "column": 0
                    },
                    "end": {
                      "offset": 3659,
                      "line": 102,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3700,
                      "line": 103,
                      "column": 0
                    },
                    "end": {
                      "offset": 3700,
                      "line": 103,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3731,
                      "line": 104,
                      "column": 0
                    },
                    "end": {
                      "offset": 3731,
                      "line": 104,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3764,
                      "line": 105,
                      "column": 0
                    },
                    "end": {
                      "offset": 3764,
                      "line": 105,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3843,
                      "line": 106,
                      "column": 0
                    },
                    "end": {
                      "offset": 3843,
                      "line": 106,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3855,
                      "line": 107,
                      "column": 0
                    },
                    "end": {
                      "offset": 3855,
                      "line": 107,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3879,
                      "line": 108,
                      "column": 0
                    },
                    "end": {
                      "offset": 3879,
                      "line": 108,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3920,
                      "line": 109,
                      "column": 0
                    },
                    "end": {
                      "offset": 3920,
                      "line": 109,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 3951,
                      "line": 110,
                      "column": 0
                    },
                    "end": {
                      "offset": 3951,
                      "line": 110,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4015,
                      "line": 111,
                      "column": 0
                    },
                    "end": {
                      "offset": 4015,
                      "line": 111,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4027,
                      "line": 112,
                      "column": 0
                    },
                    "end": {
                      "offset": 4027,
                      "line": 112,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4058,
                      "line": 113,
                      "column": 0
                    },
                    "end": {
                      "offset": 4058,
                      "line": 113,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4099,
                      "line": 114,
                      "column": 0
                    },
                    "end": {
                      "offset": 4099,
                      "line": 114,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4130,
                      "line": 115,
                      "column": 0
                    },
                    "end": {
                      "offset": 4130,
                      "line": 115,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4194,
                      "line": 116,
                      "column": 0
                    },
                    "end": {
                      "offset": 4194,
                      "line": 116,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4206,
                      "line": 117,
                      "column": 0
                    },
                    "end": {
                      "offset": 4206,
                      "line": 117,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4236,
                      "line": 118,
                      "column": 0
                    },
                    "end": {
                      "offset": 4236,
                      "line": 118,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4277,
                      "line": 119,
                      "column": 0
                    },
                    "end": {
                      "offset": 4277,
                      "line": 119,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4308,
                      "line": 120,
                      "column": 0
                    },
                    "end": {
                      "offset": 4308,
                      "line": 120,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4361,
                      "line": 121,
                      "column": 0
                    },
                    "end": {
                      "offset": 4361,
                      "line": 121,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4373,
                      "line": 122,
                      "column": 0
                    },
                    "end": {
                      "offset": 4373,
                      "line": 122,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 4380,
                      "line": 123,
                      "column": 0
                    },
                    "end": {
                      "offset": 4380,
                      "line": 123,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 42,
              "level": "none",
              "comment": "This method has 42 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/dto/conference_history_state.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ConferenceHistoryState": {
          "codeSpan": {
            "start": {
              "offset": 173,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 440,
              "line": 14,
              "column": 2
            },
            "text": "class ConferenceHistoryState with _$ConferenceHistoryState {\n  const factory ConferenceHistoryState({\n    required String agenda,\n    required DocumentReference roomRef,\n    required DateTime createAt,\n    @Default(true) bool isHost,\n  }) = _ConferenceHistoryState;\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 1,
              "unitType": "method",
              "level": "none",
              "comment": "This class has 1 method.",
              "context": [
                {
                  "message": "constructor ConferenceHistoryState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 236,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 438,
                      "line": 13,
                      "column": 32
                    },
                    "text": "const factory ConferenceHistoryState({\n    required String agenda,\n    required DocumentReference roomRef,\n    required DateTime createAt,\n    @Default(true) bool isHost,\n  }) = _ConferenceHistoryState;"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor ConferenceHistoryState decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 236,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 438,
                      "line": 13,
                      "column": 32
                    },
                    "text": "const factory ConferenceHistoryState({\n    required String agenda,\n    required DocumentReference roomRef,\n    required DateTime createAt,\n    @Default(true) bool isHost,\n  }) = _ConferenceHistoryState;"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ConferenceHistoryState.ConferenceHistoryState": {
          "codeSpan": {
            "start": {
              "offset": 236,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 438,
              "line": 13,
              "column": 32
            },
            "text": "const factory ConferenceHistoryState({\n    required String agenda,\n    required DocumentReference roomRef,\n    required DateTime createAt,\n    @Default(true) bool isHost,\n  }) = _ConferenceHistoryState;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 6 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/dto/chat_message_dto.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ChatMessageDomain": {
          "codeSpan": {
            "start": {
              "offset": 0,
              "line": 1,
              "column": 1
            },
            "end": {
              "offset": 208,
              "line": 11,
              "column": 2
            },
            "text": "class ChatMessageDomain {\n  const ChatMessageDomain({\n    required this.message,\n    required this.uid,\n    required this.createAt,\n  });\n\n  final String message;\n  final int uid;\n  final DateTime createAt;\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 1,
              "unitType": "method",
              "level": "none",
              "comment": "This class has 1 method.",
              "context": [
                {
                  "message": "constructor ChatMessageDomain increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 28,
                      "line": 2,
                      "column": 3
                    },
                    "end": {
                      "offset": 137,
                      "line": 6,
                      "column": 6
                    },
                    "text": "const ChatMessageDomain({\n    required this.message,\n    required this.uid,\n    required this.createAt,\n  });"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor ChatMessageDomain decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 28,
                      "line": 2,
                      "column": 3
                    },
                    "end": {
                      "offset": 137,
                      "line": 6,
                      "column": 6
                    },
                    "text": "const ChatMessageDomain({\n    required this.message,\n    required this.uid,\n    required this.createAt,\n  });"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ChatMessageDomain.ChatMessageDomain": {
          "codeSpan": {
            "start": {
              "offset": 28,
              "line": 2,
              "column": 3
            },
            "end": {
              "offset": 137,
              "line": 6,
              "column": 6
            },
            "text": "const ChatMessageDomain({\n    required this.message,\n    required this.uid,\n    required this.createAt,\n  });"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/dto/sign_up_dto.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "SignUpDto": {
          "codeSpan": {
            "start": {
              "offset": 105,
              "line": 6,
              "column": 1
            },
            "end": {
              "offset": 239,
              "line": 11,
              "column": 2
            },
            "text": "class SignUpDto with _$SignUpDto {\n  factory SignUpDto({\n    required String email,\n    required String password,\n  }) = _SignUpDto;\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 1,
              "unitType": "method",
              "level": "none",
              "comment": "This class has 1 method.",
              "context": [
                {
                  "message": "constructor SignUpDto increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 142,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 237,
                      "line": 10,
                      "column": 19
                    },
                    "text": "factory SignUpDto({\n    required String email,\n    required String password,\n  }) = _SignUpDto;"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor SignUpDto decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 142,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 237,
                      "line": 10,
                      "column": 19
                    },
                    "text": "factory SignUpDto({\n    required String email,\n    required String password,\n  }) = _SignUpDto;"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "SignUpDto.SignUpDto": {
          "codeSpan": {
            "start": {
              "offset": 142,
              "line": 7,
              "column": 3
            },
            "end": {
              "offset": 237,
              "line": 10,
              "column": 19
            },
            "text": "factory SignUpDto({\n    required String email,\n    required String password,\n  }) = _SignUpDto;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/dto/conference_messages_detail_state.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ConferenceMessagesDetailState": {
          "codeSpan": {
            "start": {
              "offset": 244,
              "line": 8,
              "column": 1
            },
            "end": {
              "offset": 506,
              "line": 13,
              "column": 2
            },
            "text": "class ConferenceMessagesDetailState with _$ConferenceMessagesDetailState {\n  const factory ConferenceMessagesDetailState({\n    required String agenda,\n    required AsyncValue<List<EvaluationSummaryState>> evaluateSummary,\n  }) = _ConferenceMessagesDetailState;\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 1,
              "unitType": "method",
              "level": "none",
              "comment": "This class has 1 method.",
              "context": [
                {
                  "message": "constructor ConferenceMessagesDetailState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 321,
                      "line": 9,
                      "column": 3
                    },
                    "end": {
                      "offset": 504,
                      "line": 12,
                      "column": 39
                    },
                    "text": "const factory ConferenceMessagesDetailState({\n    required String agenda,\n    required AsyncValue<List<EvaluationSummaryState>> evaluateSummary,\n  }) = _ConferenceMessagesDetailState;"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor ConferenceMessagesDetailState decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 321,
                      "line": 9,
                      "column": 3
                    },
                    "end": {
                      "offset": 504,
                      "line": 12,
                      "column": 39
                    },
                    "text": "const factory ConferenceMessagesDetailState({\n    required String agenda,\n    required AsyncValue<List<EvaluationSummaryState>> evaluateSummary,\n  }) = _ConferenceMessagesDetailState;"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ConferenceMessagesDetailState.ConferenceMessagesDetailState": {
          "codeSpan": {
            "start": {
              "offset": 321,
              "line": 9,
              "column": 3
            },
            "end": {
              "offset": 504,
              "line": 12,
              "column": 39
            },
            "text": "const factory ConferenceMessagesDetailState({\n    required String agenda,\n    required AsyncValue<List<EvaluationSummaryState>> evaluateSummary,\n  }) = _ConferenceMessagesDetailState;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/dto/evaluation_summary_state.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "EvaluationSummaryState": {
          "codeSpan": {
            "start": {
              "offset": 172,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 749,
              "line": 24,
              "column": 2
            },
            "text": "class EvaluationSummaryState with _$EvaluationSummaryState {\n  const factory EvaluationSummaryState({\n    required String message,\n    required int thumbUp,\n    required int thumbDown,\n  }) = _EvaluationSummaryState;\n\n  const EvaluationSummaryState._();\n\n  factory EvaluationSummaryState.create(\n      String message, List<TinderEvaluation> tinderList) {\n    return EvaluationSummaryState(\n      message: message,\n      thumbUp: tinderList.where((element) => element.tinder == 1).length,\n      thumbDown: tinderList.where((element) => element.tinder == -1).length,\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor EvaluationSummaryState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 235,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 388,
                      "line": 12,
                      "column": 32
                    },
                    "text": "const factory EvaluationSummaryState({\n    required String message,\n    required int thumbUp,\n    required int thumbDown,\n  }) = _EvaluationSummaryState;"
                  }
                },
                {
                  "message": "constructor _ increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 392,
                      "line": 14,
                      "column": 3
                    },
                    "end": {
                      "offset": 425,
                      "line": 14,
                      "column": 36
                    },
                    "text": "const EvaluationSummaryState._();"
                  }
                },
                {
                  "message": "constructor create increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 429,
                      "line": 16,
                      "column": 3
                    },
                    "end": {
                      "offset": 747,
                      "line": 23,
                      "column": 4
                    },
                    "text": "factory EvaluationSummaryState.create(\n      String message, List<TinderEvaluation> tinderList) {\n    return EvaluationSummaryState(\n      message: message,\n      thumbUp: tinderList.where((element) => element.tinder == 1).length,\n      thumbDown: tinderList.where((element) => element.tinder == -1).length,\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor EvaluationSummaryState decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 235,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 388,
                      "line": 12,
                      "column": 32
                    },
                    "text": "const factory EvaluationSummaryState({\n    required String message,\n    required int thumbUp,\n    required int thumbDown,\n  }) = _EvaluationSummaryState;"
                  }
                },
                {
                  "message": "public constructor create decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 429,
                      "line": 16,
                      "column": 3
                    },
                    "end": {
                      "offset": 747,
                      "line": 23,
                      "column": 4
                    },
                    "text": "factory EvaluationSummaryState.create(\n      String message, List<TinderEvaluation> tinderList) {\n    return EvaluationSummaryState(\n      message: message,\n      thumbUp: tinderList.where((element) => element.tinder == 1).length,\n      thumbDown: tinderList.where((element) => element.tinder == -1).length,\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "EvaluationSummaryState.EvaluationSummaryState": {
          "codeSpan": {
            "start": {
              "offset": 235,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 388,
              "line": 12,
              "column": 32
            },
            "text": "const factory EvaluationSummaryState({\n    required String message,\n    required int thumbUp,\n    required int thumbDown,\n  }) = _EvaluationSummaryState;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "EvaluationSummaryState._": {
          "codeSpan": {
            "start": {
              "offset": 392,
              "line": 14,
              "column": 3
            },
            "end": {
              "offset": 425,
              "line": 14,
              "column": 36
            },
            "text": "const EvaluationSummaryState._();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "EvaluationSummaryState.create": {
          "codeSpan": {
            "start": {
              "offset": 429,
              "line": 16,
              "column": 3
            },
            "end": {
              "offset": 747,
              "line": 23,
              "column": 4
            },
            "text": "factory EvaluationSummaryState.create(\n      String message, List<TinderEvaluation> tinderList) {\n    return EvaluationSummaryState(\n      message: message,\n      thumbUp: tinderList.where((element) => element.tinder == 1).length,\n      thumbDown: tinderList.where((element) => element.tinder == -1).length,\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 93.40465370320705,
              "level": "none",
              "comment": "This constructor has a halstead volume of 93.40465370320705.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 8,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 8 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 525,
                      "line": 17,
                      "column": 58
                    },
                    "end": {
                      "offset": 747,
                      "line": 23,
                      "column": 4
                    },
                    "text": "{\n    return EvaluationSummaryState(\n      message: message,\n      thumbUp: tinderList.where((element) => element.tinder == 1).length,\n      thumbDown: tinderList.where((element) => element.tinder == -1).length,\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 5 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 527,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 527,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 562,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 562,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 586,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 586,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 660,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 660,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 737,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 737,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 71,
              "level": "none",
              "comment": "This constructor has 71 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/dto/evaluate_tinder_state.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "TinderPageState": {
          "codeSpan": {
            "start": {
              "offset": 170,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 359,
              "line": 12,
              "column": 2
            },
            "text": "class TinderPageState with _$TinderPageState {\n  factory TinderPageState({\n    required String roomID,\n    required List<EvaluateTinderState> evaluateTinderState,\n  }) = _TinderPageState;\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 1,
              "unitType": "method",
              "level": "none",
              "comment": "This class has 1 method.",
              "context": [
                {
                  "message": "constructor TinderPageState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 219,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 357,
                      "line": 11,
                      "column": 25
                    },
                    "text": "factory TinderPageState({\n    required String roomID,\n    required List<EvaluateTinderState> evaluateTinderState,\n  }) = _TinderPageState;"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor TinderPageState decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 219,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 357,
                      "line": 11,
                      "column": 25
                    },
                    "text": "factory TinderPageState({\n    required String roomID,\n    required List<EvaluateTinderState> evaluateTinderState,\n  }) = _TinderPageState;"
                  }
                }
              ]
            }
          ]
        },
        "EvaluateTinderState": {
          "codeSpan": {
            "start": {
              "offset": 370,
              "line": 15,
              "column": 1
            },
            "end": {
              "offset": 681,
              "line": 27,
              "column": 2
            },
            "text": "class EvaluateTinderState extends SwipeableStackIdentifiable\n    with _$EvaluateTinderState {\n  factory EvaluateTinderState({\n    required String docID,\n    required String message,\n    @Default(0) int evaluation,\n  }) = _EvaluateTinderState;\n\n  EvaluateTinderState._();\n\n  @override\n  String get id => docID;\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor EvaluateTinderState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 466,
                      "line": 17,
                      "column": 3
                    },
                    "end": {
                      "offset": 612,
                      "line": 21,
                      "column": 29
                    },
                    "text": "factory EvaluateTinderState({\n    required String docID,\n    required String message,\n    @Default(0) int evaluation,\n  }) = _EvaluateTinderState;"
                  }
                },
                {
                  "message": "constructor _ increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 616,
                      "line": 23,
                      "column": 3
                    },
                    "end": {
                      "offset": 640,
                      "line": 23,
                      "column": 27
                    },
                    "text": "EvaluateTinderState._();"
                  }
                },
                {
                  "message": "getter id increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 656,
                      "line": 26,
                      "column": 3
                    },
                    "end": {
                      "offset": 679,
                      "line": 26,
                      "column": 26
                    },
                    "text": "String get id => docID;"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor EvaluateTinderState decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 466,
                      "line": 17,
                      "column": 3
                    },
                    "end": {
                      "offset": 612,
                      "line": 21,
                      "column": 29
                    },
                    "text": "factory EvaluateTinderState({\n    required String docID,\n    required String message,\n    @Default(0) int evaluation,\n  }) = _EvaluateTinderState;"
                  }
                },
                {
                  "message": "public getter id decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 656,
                      "line": 26,
                      "column": 3
                    },
                    "end": {
                      "offset": 679,
                      "line": 26,
                      "column": 26
                    },
                    "text": "String get id => docID;"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "TinderPageState.TinderPageState": {
          "codeSpan": {
            "start": {
              "offset": 219,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 357,
              "line": 11,
              "column": 25
            },
            "text": "factory TinderPageState({\n    required String roomID,\n    required List<EvaluateTinderState> evaluateTinderState,\n  }) = _TinderPageState;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "EvaluateTinderState.EvaluateTinderState": {
          "codeSpan": {
            "start": {
              "offset": 466,
              "line": 17,
              "column": 3
            },
            "end": {
              "offset": 612,
              "line": 21,
              "column": 29
            },
            "text": "factory EvaluateTinderState({\n    required String docID,\n    required String message,\n    @Default(0) int evaluation,\n  }) = _EvaluateTinderState;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "EvaluateTinderState._": {
          "codeSpan": {
            "start": {
              "offset": 616,
              "line": 23,
              "column": 3
            },
            "end": {
              "offset": 640,
              "line": 23,
              "column": 27
            },
            "text": "EvaluateTinderState._();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "EvaluateTinderState.id": {
          "codeSpan": {
            "start": {
              "offset": 656,
              "line": 26,
              "column": 3
            },
            "end": {
              "offset": 679,
              "line": 26,
              "column": 26
            },
            "text": "String get id => docID;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This getter has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This getter has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This getter has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This getter has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This getter has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This getter has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 654,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 654,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This getter has 100 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/dto/chat_list_dto.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ChatListDomain": {
          "codeSpan": {
            "start": {
              "offset": 58,
              "line": 3,
              "column": 1
            },
            "end": {
              "offset": 202,
              "line": 9,
              "column": 2
            },
            "text": "class ChatListDomain {\n  const ChatListDomain({\n    required this.chatMessageDomain,\n  });\n\n  final List<ChatMessageDomain> chatMessageDomain;\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 1,
              "unitType": "method",
              "level": "none",
              "comment": "This class has 1 method.",
              "context": [
                {
                  "message": "constructor ChatListDomain increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 83,
                      "line": 4,
                      "column": 3
                    },
                    "end": {
                      "offset": 148,
                      "line": 6,
                      "column": 6
                    },
                    "text": "const ChatListDomain({\n    required this.chatMessageDomain,\n  });"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor ChatListDomain decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 83,
                      "line": 4,
                      "column": 3
                    },
                    "end": {
                      "offset": 148,
                      "line": 6,
                      "column": 6
                    },
                    "text": "const ChatListDomain({\n    required this.chatMessageDomain,\n  });"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ChatListDomain.ChatListDomain": {
          "codeSpan": {
            "start": {
              "offset": 83,
              "line": 4,
              "column": 3
            },
            "end": {
              "offset": 148,
              "line": 6,
              "column": 6
            },
            "text": "const ChatListDomain({\n    required this.chatMessageDomain,\n  });"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/dto/hamburger_dto.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "HamburgerDto": {
          "codeSpan": {
            "start": {
              "offset": 107,
              "line": 6,
              "column": 1
            },
            "end": {
              "offset": 446,
              "line": 18,
              "column": 2
            },
            "text": "class HamburgerDto with _$HamburgerDto {\n  factory HamburgerDto({\n    required bool isLogin,\n    required String userName,\n    required String userEmail,\n    required String userIcon,\n  }) = _HamburgerDto;\n\n  factory HamburgerDto.noUser() {\n    return HamburgerDto(\n        isLogin: false, userEmail: '', userName: '', userIcon: '');\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor HamburgerDto increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 150,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 312,
                      "line": 12,
                      "column": 22
                    },
                    "text": "factory HamburgerDto({\n    required bool isLogin,\n    required String userName,\n    required String userEmail,\n    required String userIcon,\n  }) = _HamburgerDto;"
                  }
                },
                {
                  "message": "constructor noUser increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 316,
                      "line": 14,
                      "column": 3
                    },
                    "end": {
                      "offset": 444,
                      "line": 17,
                      "column": 4
                    },
                    "text": "factory HamburgerDto.noUser() {\n    return HamburgerDto(\n        isLogin: false, userEmail: '', userName: '', userIcon: '');\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor HamburgerDto decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 150,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 312,
                      "line": 12,
                      "column": 22
                    },
                    "text": "factory HamburgerDto({\n    required bool isLogin,\n    required String userName,\n    required String userEmail,\n    required String userIcon,\n  }) = _HamburgerDto;"
                  }
                },
                {
                  "message": "public constructor noUser decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 316,
                      "line": 14,
                      "column": 3
                    },
                    "end": {
                      "offset": 444,
                      "line": 17,
                      "column": 4
                    },
                    "text": "factory HamburgerDto.noUser() {\n    return HamburgerDto(\n        isLogin: false, userEmail: '', userName: '', userIcon: '');\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "HamburgerDto.HamburgerDto": {
          "codeSpan": {
            "start": {
              "offset": 150,
              "line": 7,
              "column": 3
            },
            "end": {
              "offset": 312,
              "line": 12,
              "column": 22
            },
            "text": "factory HamburgerDto({\n    required bool isLogin,\n    required String userName,\n    required String userEmail,\n    required String userIcon,\n  }) = _HamburgerDto;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 6 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "HamburgerDto.noUser": {
          "codeSpan": {
            "start": {
              "offset": 316,
              "line": 14,
              "column": 3
            },
            "end": {
              "offset": 444,
              "line": 17,
              "column": 4
            },
            "text": "factory HamburgerDto.noUser() {\n    return HamburgerDto(\n        isLogin: false, userEmail: '', userName: '', userIcon: '');\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 11.60964047443681,
              "level": "none",
              "comment": "This constructor has a halstead volume of 11.60964047443681.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 346,
                      "line": 14,
                      "column": 33
                    },
                    "end": {
                      "offset": 444,
                      "line": 17,
                      "column": 4
                    },
                    "text": "{\n    return HamburgerDto(\n        isLogin: false, userEmail: '', userName: '', userIcon: '');\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 348,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 348,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 373,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 373,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 86,
              "level": "none",
              "comment": "This constructor has 86 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/dto/chat_room_state.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ChatRoomState": {
          "codeSpan": {
            "start": {
              "offset": 262,
              "line": 9,
              "column": 1
            },
            "end": {
              "offset": 533,
              "line": 17,
              "column": 2
            },
            "text": "class ChatRoomState with _$ChatRoomState {\n  const factory ChatRoomState({\n    CollectionReference? chatDocRef,\n    @Default('') String nickName,\n    DateTime? discussStartAt,\n    User? user,\n    @Default(ChatRoomModel()) ChatRoomModel chatModel,\n  }) = _ChatRoomState;\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 1,
              "unitType": "method",
              "level": "none",
              "comment": "This class has 1 method.",
              "context": [
                {
                  "message": "constructor ChatRoomState increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 307,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 531,
                      "line": 16,
                      "column": 23
                    },
                    "text": "const factory ChatRoomState({\n    CollectionReference? chatDocRef,\n    @Default('') String nickName,\n    DateTime? discussStartAt,\n    User? user,\n    @Default(ChatRoomModel()) ChatRoomModel chatModel,\n  }) = _ChatRoomState;"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor ChatRoomState decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 307,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 531,
                      "line": 16,
                      "column": 23
                    },
                    "text": "const factory ChatRoomState({\n    CollectionReference? chatDocRef,\n    @Default('') String nickName,\n    DateTime? discussStartAt,\n    User? user,\n    @Default(ChatRoomModel()) ChatRoomModel chatModel,\n  }) = _ChatRoomState;"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ChatRoomState.ChatRoomState": {
          "codeSpan": {
            "start": {
              "offset": 307,
              "line": 10,
              "column": 3
            },
            "end": {
              "offset": 531,
              "line": 16,
              "column": 23
            },
            "text": "const factory ChatRoomState({\n    CollectionReference? chatDocRef,\n    @Default('') String nickName,\n    DateTime? discussStartAt,\n    User? user,\n    @Default(ChatRoomModel()) ChatRoomModel chatModel,\n  }) = _ChatRoomState;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 7,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 7 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/dto/login_dto.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "LoginDto": {
          "codeSpan": {
            "start": {
              "offset": 103,
              "line": 6,
              "column": 1
            },
            "end": {
              "offset": 315,
              "line": 15,
              "column": 2
            },
            "text": "class LoginDto with _$LoginDto {\n  factory LoginDto({\n    required String email,\n    required String password,\n  }) = _LoginDto;\n\n  factory LoginDto.noLogin() {\n    return LoginDto(email: '', password: '');\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor LoginDto increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 138,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 231,
                      "line": 10,
                      "column": 18
                    },
                    "text": "factory LoginDto({\n    required String email,\n    required String password,\n  }) = _LoginDto;"
                  }
                },
                {
                  "message": "constructor noLogin increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 235,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 313,
                      "line": 14,
                      "column": 4
                    },
                    "text": "factory LoginDto.noLogin() {\n    return LoginDto(email: '', password: '');\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor LoginDto decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 138,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 231,
                      "line": 10,
                      "column": 18
                    },
                    "text": "factory LoginDto({\n    required String email,\n    required String password,\n  }) = _LoginDto;"
                  }
                },
                {
                  "message": "public constructor noLogin decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 235,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 313,
                      "line": 14,
                      "column": 4
                    },
                    "text": "factory LoginDto.noLogin() {\n    return LoginDto(email: '', password: '');\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "LoginDto.LoginDto": {
          "codeSpan": {
            "start": {
              "offset": 138,
              "line": 7,
              "column": 3
            },
            "end": {
              "offset": 231,
              "line": 10,
              "column": 18
            },
            "text": "factory LoginDto({\n    required String email,\n    required String password,\n  }) = _LoginDto;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "LoginDto.noLogin": {
          "codeSpan": {
            "start": {
              "offset": 235,
              "line": 12,
              "column": 3
            },
            "end": {
              "offset": 313,
              "line": 14,
              "column": 4
            },
            "text": "factory LoginDto.noLogin() {\n    return LoginDto(email: '', password: '');\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 4.754887502163469,
              "level": "none",
              "comment": "This constructor has a halstead volume of 4.754887502163469.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 262,
                      "line": 12,
                      "column": 30
                    },
                    "end": {
                      "offset": 313,
                      "line": 14,
                      "column": 4
                    },
                    "text": "{\n    return LoginDto(email: '', password: '');\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 264,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 264,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 96,
              "level": "none",
              "comment": "This constructor has 96 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/entity/user_entity.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "UserEntity": {
          "codeSpan": {
            "start": {
              "offset": 132,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 383,
              "line": 15,
              "column": 2
            },
            "text": "class UserEntity with _$UserEntity {\n  const factory UserEntity({\n    @Default('') String nickName,\n    @Default(false) bool purchase,\n  }) = _UserEntity;\n\n  factory UserEntity.fromJson(Map<String, dynamic> json) =>\n      _$UserEntityFromJson(json);\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor UserEntity increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 171,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 286,
                      "line": 11,
                      "column": 20
                    },
                    "text": "const factory UserEntity({\n    @Default('') String nickName,\n    @Default(false) bool purchase,\n  }) = _UserEntity;"
                  }
                },
                {
                  "message": "constructor fromJson increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 290,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 381,
                      "line": 14,
                      "column": 34
                    },
                    "text": "factory UserEntity.fromJson(Map<String, dynamic> json) =>\n      _$UserEntityFromJson(json);"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor UserEntity decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 171,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 286,
                      "line": 11,
                      "column": 20
                    },
                    "text": "const factory UserEntity({\n    @Default('') String nickName,\n    @Default(false) bool purchase,\n  }) = _UserEntity;"
                  }
                },
                {
                  "message": "public constructor fromJson decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 290,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 381,
                      "line": 14,
                      "column": 34
                    },
                    "text": "factory UserEntity.fromJson(Map<String, dynamic> json) =>\n      _$UserEntityFromJson(json);"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "UserEntity.UserEntity": {
          "codeSpan": {
            "start": {
              "offset": 171,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 286,
              "line": 11,
              "column": 20
            },
            "text": "const factory UserEntity({\n    @Default('') String nickName,\n    @Default(false) bool purchase,\n  }) = _UserEntity;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "UserEntity.fromJson": {
          "codeSpan": {
            "start": {
              "offset": 290,
              "line": 13,
              "column": 3
            },
            "end": {
              "offset": 381,
              "line": 14,
              "column": 34
            },
            "text": "factory UserEntity.fromJson(Map<String, dynamic> json) =>\n      _$UserEntityFromJson(json);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 2,
              "level": "none",
              "comment": "This constructor has a halstead volume of 2.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 288,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 288,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 348,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 348,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 92,
              "level": "none",
              "comment": "This constructor has 92 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/entity/user_join_conf.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "UserJoinConf": {
          "codeSpan": {
            "start": {
              "offset": 375,
              "line": 11,
              "column": 1
            },
            "end": {
              "offset": 757,
              "line": 22,
              "column": 2
            },
            "text": "class UserJoinConf with _$UserJoinConf {\n  const factory UserJoinConf({\n    required String agenda,\n    required String roomUid,\n    required String hostUid,\n    @referenceKey required DocumentReference? roomRef,\n    @timestampKey required DateTime? createAt,\n  }) = _UserJoinConf;\n\n  factory UserJoinConf.fromJson(Map<String, dynamic> json) =>\n      _$UserJoinConfFromJson(json);\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor UserJoinConf increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 418,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 656,
                      "line": 18,
                      "column": 22
                    },
                    "text": "const factory UserJoinConf({\n    required String agenda,\n    required String roomUid,\n    required String hostUid,\n    @referenceKey required DocumentReference? roomRef,\n    @timestampKey required DateTime? createAt,\n  }) = _UserJoinConf;"
                  }
                },
                {
                  "message": "constructor fromJson increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 660,
                      "line": 20,
                      "column": 3
                    },
                    "end": {
                      "offset": 755,
                      "line": 21,
                      "column": 36
                    },
                    "text": "factory UserJoinConf.fromJson(Map<String, dynamic> json) =>\n      _$UserJoinConfFromJson(json);"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor UserJoinConf decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 418,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 656,
                      "line": 18,
                      "column": 22
                    },
                    "text": "const factory UserJoinConf({\n    required String agenda,\n    required String roomUid,\n    required String hostUid,\n    @referenceKey required DocumentReference? roomRef,\n    @timestampKey required DateTime? createAt,\n  }) = _UserJoinConf;"
                  }
                },
                {
                  "message": "public constructor fromJson decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 660,
                      "line": 20,
                      "column": 3
                    },
                    "end": {
                      "offset": 755,
                      "line": 21,
                      "column": 36
                    },
                    "text": "factory UserJoinConf.fromJson(Map<String, dynamic> json) =>\n      _$UserJoinConfFromJson(json);"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "UserJoinConf.UserJoinConf": {
          "codeSpan": {
            "start": {
              "offset": 418,
              "line": 12,
              "column": 3
            },
            "end": {
              "offset": 656,
              "line": 18,
              "column": 22
            },
            "text": "const factory UserJoinConf({\n    required String agenda,\n    required String roomUid,\n    required String hostUid,\n    @referenceKey required DocumentReference? roomRef,\n    @timestampKey required DateTime? createAt,\n  }) = _UserJoinConf;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 7,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 7 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "UserJoinConf.fromJson": {
          "codeSpan": {
            "start": {
              "offset": 660,
              "line": 20,
              "column": 3
            },
            "end": {
              "offset": 755,
              "line": 21,
              "column": 36
            },
            "text": "factory UserJoinConf.fromJson(Map<String, dynamic> json) =>\n      _$UserJoinConfFromJson(json);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 2,
              "level": "none",
              "comment": "This constructor has a halstead volume of 2.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 658,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 658,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 720,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 720,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 92,
              "level": "none",
              "comment": "This constructor has 92 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/entity/update_info_entity.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "UpdateInfoEntity": {
          "codeSpan": {
            "start": {
              "offset": 146,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 557,
              "line": 21,
              "column": 2
            },
            "text": "class UpdateInfoEntity with _$UpdateInfoEntity {\n  const factory UpdateInfoEntity({\n    /// 要求バージョン e.g., '1.0.0'\n    required String requiredVersion,\n\n    /// アップデートを後回し可能にするかどうか\n    @Default(false) bool canCancel,\n\n    /// 有効日（この日時以降のみ有効とする）\n    required DateTime enabledAt,\n  }) = _UpdateInfoEntity;\n\n  factory UpdateInfoEntity.fromJson(Map<String, dynamic> json) =>\n      _$UpdateInfoEntityFromJson(json);\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor UpdateInfoEntity increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 197,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 448,
                      "line": 17,
                      "column": 26
                    },
                    "text": "const factory UpdateInfoEntity({\n    /// 要求バージョン e.g., '1.0.0'\n    required String requiredVersion,\n\n    /// アップデートを後回し可能にするかどうか\n    @Default(false) bool canCancel,\n\n    /// 有効日（この日時以降のみ有効とする）\n    required DateTime enabledAt,\n  }) = _UpdateInfoEntity;"
                  }
                },
                {
                  "message": "constructor fromJson increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 452,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 555,
                      "line": 20,
                      "column": 40
                    },
                    "text": "factory UpdateInfoEntity.fromJson(Map<String, dynamic> json) =>\n      _$UpdateInfoEntityFromJson(json);"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor UpdateInfoEntity decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 197,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 448,
                      "line": 17,
                      "column": 26
                    },
                    "text": "const factory UpdateInfoEntity({\n    /// 要求バージョン e.g., '1.0.0'\n    required String requiredVersion,\n\n    /// アップデートを後回し可能にするかどうか\n    @Default(false) bool canCancel,\n\n    /// 有効日（この日時以降のみ有効とする）\n    required DateTime enabledAt,\n  }) = _UpdateInfoEntity;"
                  }
                },
                {
                  "message": "public constructor fromJson decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 452,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 555,
                      "line": 20,
                      "column": 40
                    },
                    "text": "factory UpdateInfoEntity.fromJson(Map<String, dynamic> json) =>\n      _$UpdateInfoEntityFromJson(json);"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "UpdateInfoEntity.UpdateInfoEntity": {
          "codeSpan": {
            "start": {
              "offset": 197,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 448,
              "line": 17,
              "column": 26
            },
            "text": "const factory UpdateInfoEntity({\n    /// 要求バージョン e.g., '1.0.0'\n    required String requiredVersion,\n\n    /// アップデートを後回し可能にするかどうか\n    @Default(false) bool canCancel,\n\n    /// 有効日（この日時以降のみ有効とする）\n    required DateTime enabledAt,\n  }) = _UpdateInfoEntity;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 10,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 10 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "UpdateInfoEntity.fromJson": {
          "codeSpan": {
            "start": {
              "offset": 452,
              "line": 19,
              "column": 3
            },
            "end": {
              "offset": 555,
              "line": 20,
              "column": 40
            },
            "text": "factory UpdateInfoEntity.fromJson(Map<String, dynamic> json) =>\n      _$UpdateInfoEntityFromJson(json);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 2,
              "level": "none",
              "comment": "This constructor has a halstead volume of 2.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 450,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 450,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 516,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 516,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 92,
              "level": "none",
              "comment": "This constructor has 92 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/enum/flavor.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "FlavorExtension": {
          "codeSpan": {
            "start": {
              "offset": 232,
              "line": 12,
              "column": 1
            },
            "end": {
              "offset": 311,
              "line": 14,
              "column": 2
            },
            "text": "extension FlavorExtension on Flavor {\n  String get key => describeEnum(this);\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 1,
              "unitType": "method",
              "level": "none",
              "comment": "This extension has 1 method.",
              "context": [
                {
                  "message": "getter key increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 272,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 309,
                      "line": 13,
                      "column": 40
                    },
                    "text": "String get key => describeEnum(this);"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This extension has a weight of 0.0.",
              "context": [
                {
                  "message": "public getter key decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 272,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 309,
                      "line": 13,
                      "column": 40
                    },
                    "text": "String get key => describeEnum(this);"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "FlavorExtension.key": {
          "codeSpan": {
            "start": {
              "offset": 272,
              "line": 13,
              "column": 3
            },
            "end": {
              "offset": 309,
              "line": 13,
              "column": 40
            },
            "text": "String get key => describeEnum(this);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This getter has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This getter has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This getter has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This getter has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This getter has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This getter has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 270,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 270,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This getter has 100 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/enum/update_request_type.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {},
      "functions": {},
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/chat_message_model.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ChatMessageModel": {
          "codeSpan": {
            "start": {
              "offset": 314,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 1183,
              "line": 35,
              "column": 2
            },
            "text": "class ChatMessageModel with _$ChatMessageModel {\n  const factory ChatMessageModel({\n    @timestampKey required DateTime? createAt,\n    required String message,\n    required String uid,\n    required String userName,\n    @JsonKey(ignore: true) String? docID,\n  }) = _ChatMessageModel;\n\n  factory ChatMessageModel.fromJson(Map<String, dynamic> json) =>\n      _$ChatMessageModelFromJson(json);\n\n  factory ChatMessageModel.fromFireStore(QueryDocumentSnapshot message) =>\n      _$ChatMessageModelFromJson(message.data()! as Map<String, dynamic>)\n          .copyWith(docID: message.id);\n\n  factory ChatMessageModel.create(\n          {required String message,\n          required String userID,\n          required String nickName}) =>\n      ChatMessageModel(\n          uid: userID,\n          message: message,\n          userName: nickName,\n          createAt: DateTime.now());\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 4,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 4 methods.",
              "context": [
                {
                  "message": "constructor ChatMessageModel increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 365,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 596,
                      "line": 17,
                      "column": 26
                    },
                    "text": "const factory ChatMessageModel({\n    @timestampKey required DateTime? createAt,\n    required String message,\n    required String uid,\n    required String userName,\n    @JsonKey(ignore: true) String? docID,\n  }) = _ChatMessageModel;"
                  }
                },
                {
                  "message": "constructor fromJson increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 600,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 703,
                      "line": 20,
                      "column": 40
                    },
                    "text": "factory ChatMessageModel.fromJson(Map<String, dynamic> json) =>\n      _$ChatMessageModelFromJson(json);"
                  }
                },
                {
                  "message": "constructor fromFireStore increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 707,
                      "line": 22,
                      "column": 3
                    },
                    "end": {
                      "offset": 893,
                      "line": 24,
                      "column": 40
                    },
                    "text": "factory ChatMessageModel.fromFireStore(QueryDocumentSnapshot message) =>\n      _$ChatMessageModelFromJson(message.data()! as Map<String, dynamic>)\n          .copyWith(docID: message.id);"
                  }
                },
                {
                  "message": "constructor create increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 897,
                      "line": 26,
                      "column": 3
                    },
                    "end": {
                      "offset": 1181,
                      "line": 34,
                      "column": 37
                    },
                    "text": "factory ChatMessageModel.create(\n          {required String message,\n          required String userID,\n          required String nickName}) =>\n      ChatMessageModel(\n          uid: userID,\n          message: message,\n          userName: nickName,\n          createAt: DateTime.now());"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor ChatMessageModel decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 365,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 596,
                      "line": 17,
                      "column": 26
                    },
                    "text": "const factory ChatMessageModel({\n    @timestampKey required DateTime? createAt,\n    required String message,\n    required String uid,\n    required String userName,\n    @JsonKey(ignore: true) String? docID,\n  }) = _ChatMessageModel;"
                  }
                },
                {
                  "message": "public constructor fromJson decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 600,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 703,
                      "line": 20,
                      "column": 40
                    },
                    "text": "factory ChatMessageModel.fromJson(Map<String, dynamic> json) =>\n      _$ChatMessageModelFromJson(json);"
                  }
                },
                {
                  "message": "public constructor fromFireStore decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 707,
                      "line": 22,
                      "column": 3
                    },
                    "end": {
                      "offset": 893,
                      "line": 24,
                      "column": 40
                    },
                    "text": "factory ChatMessageModel.fromFireStore(QueryDocumentSnapshot message) =>\n      _$ChatMessageModelFromJson(message.data()! as Map<String, dynamic>)\n          .copyWith(docID: message.id);"
                  }
                },
                {
                  "message": "public constructor create decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 897,
                      "line": 26,
                      "column": 3
                    },
                    "end": {
                      "offset": 1181,
                      "line": 34,
                      "column": 37
                    },
                    "text": "factory ChatMessageModel.create(\n          {required String message,\n          required String userID,\n          required String nickName}) =>\n      ChatMessageModel(\n          uid: userID,\n          message: message,\n          userName: nickName,\n          createAt: DateTime.now());"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ChatMessageModel.ChatMessageModel": {
          "codeSpan": {
            "start": {
              "offset": 365,
              "line": 11,
              "column": 3
            },
            "end": {
              "offset": 596,
              "line": 17,
              "column": 26
            },
            "text": "const factory ChatMessageModel({\n    @timestampKey required DateTime? createAt,\n    required String message,\n    required String uid,\n    required String userName,\n    @JsonKey(ignore: true) String? docID,\n  }) = _ChatMessageModel;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 7,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 7 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatMessageModel.fromJson": {
          "codeSpan": {
            "start": {
              "offset": 600,
              "line": 19,
              "column": 3
            },
            "end": {
              "offset": 703,
              "line": 20,
              "column": 40
            },
            "text": "factory ChatMessageModel.fromJson(Map<String, dynamic> json) =>\n      _$ChatMessageModelFromJson(json);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 2,
              "level": "none",
              "comment": "This constructor has a halstead volume of 2.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 598,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 598,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 664,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 664,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 92,
              "level": "none",
              "comment": "This constructor has 92 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatMessageModel.fromFireStore": {
          "codeSpan": {
            "start": {
              "offset": 707,
              "line": 22,
              "column": 3
            },
            "end": {
              "offset": 893,
              "line": 24,
              "column": 40
            },
            "text": "factory ChatMessageModel.fromFireStore(QueryDocumentSnapshot message) =>\n      _$ChatMessageModelFromJson(message.data()! as Map<String, dynamic>)\n          .copyWith(docID: message.id);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 51.80615605397529,
              "level": "none",
              "comment": "This constructor has a halstead volume of 51.80615605397529.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 3 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 705,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 705,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 780,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 780,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 854,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 854,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 78,
              "level": "none",
              "comment": "This constructor has 78 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatMessageModel.create": {
          "codeSpan": {
            "start": {
              "offset": 897,
              "line": 26,
              "column": 3
            },
            "end": {
              "offset": 1181,
              "line": 34,
              "column": 37
            },
            "text": "factory ChatMessageModel.create(\n          {required String message,\n          required String userID,\n          required String nickName}) =>\n      ChatMessageModel(\n          uid: userID,\n          message: message,\n          userName: nickName,\n          createAt: DateTime.now());"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 31.699250014423125,
              "level": "none",
              "comment": "This constructor has a halstead volume of 31.699250014423125.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 9 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 6 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1000,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1000,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1040,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1040,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1064,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1064,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1087,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1087,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1115,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1115,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1145,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1145,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 73,
              "level": "none",
              "comment": "This constructor has 73 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/chat_room_information.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ChatRoomInformation": {
          "codeSpan": {
            "start": {
              "offset": 265,
              "line": 9,
              "column": 1
            },
            "end": {
              "offset": 1312,
              "line": 38,
              "column": 2
            },
            "text": "class ChatRoomInformation with _$ChatRoomInformation {\n  const factory ChatRoomInformation({\n    @JsonKey(nullable: true) @Default('') String agenda,\n    @JsonKey(ignore: true) @Default('') String nickName,\n    @timestampKey DateTime? createAt,\n    @JsonKey(nullable: true) @Default('') String hostUid,\n    @JsonKey(nullable: true) @Default('') String roomUid,\n    @JsonKey(nullable: true) @Default(['']) List<String> participants,\n    @JsonKey(ignore: true) @Default(false) bool isCreate,\n  }) = _ChatRoomInformation;\n\n  factory ChatRoomInformation.fromJson(Map<String, dynamic> json) =>\n      _$ChatRoomInformationFromJson(json);\n\n  factory ChatRoomInformation.create({\n    required String agenda,\n    required String nickName,\n    required String hostUid,\n    required String roomUid,\n    required List<String> participants,\n  }) =>\n      ChatRoomInformation(\n        agenda: agenda,\n        nickName: nickName,\n        hostUid: hostUid,\n        roomUid: roomUid,\n        participants: participants,\n        createAt: DateTime.now(),\n      );\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor ChatRoomInformation increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 322,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 783,
                      "line": 18,
                      "column": 29
                    },
                    "text": "const factory ChatRoomInformation({\n    @JsonKey(nullable: true) @Default('') String agenda,\n    @JsonKey(ignore: true) @Default('') String nickName,\n    @timestampKey DateTime? createAt,\n    @JsonKey(nullable: true) @Default('') String hostUid,\n    @JsonKey(nullable: true) @Default('') String roomUid,\n    @JsonKey(nullable: true) @Default(['']) List<String> participants,\n    @JsonKey(ignore: true) @Default(false) bool isCreate,\n  }) = _ChatRoomInformation;"
                  }
                },
                {
                  "message": "constructor fromJson increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 787,
                      "line": 20,
                      "column": 3
                    },
                    "end": {
                      "offset": 896,
                      "line": 21,
                      "column": 43
                    },
                    "text": "factory ChatRoomInformation.fromJson(Map<String, dynamic> json) =>\n      _$ChatRoomInformationFromJson(json);"
                  }
                },
                {
                  "message": "constructor create increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 900,
                      "line": 23,
                      "column": 3
                    },
                    "end": {
                      "offset": 1310,
                      "line": 37,
                      "column": 9
                    },
                    "text": "factory ChatRoomInformation.create({\n    required String agenda,\n    required String nickName,\n    required String hostUid,\n    required String roomUid,\n    required List<String> participants,\n  }) =>\n      ChatRoomInformation(\n        agenda: agenda,\n        nickName: nickName,\n        hostUid: hostUid,\n        roomUid: roomUid,\n        participants: participants,\n        createAt: DateTime.now(),\n      );"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor ChatRoomInformation decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 322,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 783,
                      "line": 18,
                      "column": 29
                    },
                    "text": "const factory ChatRoomInformation({\n    @JsonKey(nullable: true) @Default('') String agenda,\n    @JsonKey(ignore: true) @Default('') String nickName,\n    @timestampKey DateTime? createAt,\n    @JsonKey(nullable: true) @Default('') String hostUid,\n    @JsonKey(nullable: true) @Default('') String roomUid,\n    @JsonKey(nullable: true) @Default(['']) List<String> participants,\n    @JsonKey(ignore: true) @Default(false) bool isCreate,\n  }) = _ChatRoomInformation;"
                  }
                },
                {
                  "message": "public constructor fromJson decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 787,
                      "line": 20,
                      "column": 3
                    },
                    "end": {
                      "offset": 896,
                      "line": 21,
                      "column": 43
                    },
                    "text": "factory ChatRoomInformation.fromJson(Map<String, dynamic> json) =>\n      _$ChatRoomInformationFromJson(json);"
                  }
                },
                {
                  "message": "public constructor create decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 900,
                      "line": 23,
                      "column": 3
                    },
                    "end": {
                      "offset": 1310,
                      "line": 37,
                      "column": 9
                    },
                    "text": "factory ChatRoomInformation.create({\n    required String agenda,\n    required String nickName,\n    required String hostUid,\n    required String roomUid,\n    required List<String> participants,\n  }) =>\n      ChatRoomInformation(\n        agenda: agenda,\n        nickName: nickName,\n        hostUid: hostUid,\n        roomUid: roomUid,\n        participants: participants,\n        createAt: DateTime.now(),\n      );"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ChatRoomInformation.ChatRoomInformation": {
          "codeSpan": {
            "start": {
              "offset": 322,
              "line": 10,
              "column": 3
            },
            "end": {
              "offset": 783,
              "line": 18,
              "column": 29
            },
            "text": "const factory ChatRoomInformation({\n    @JsonKey(nullable: true) @Default('') String agenda,\n    @JsonKey(ignore: true) @Default('') String nickName,\n    @timestampKey DateTime? createAt,\n    @JsonKey(nullable: true) @Default('') String hostUid,\n    @JsonKey(nullable: true) @Default('') String roomUid,\n    @JsonKey(nullable: true) @Default(['']) List<String> participants,\n    @JsonKey(ignore: true) @Default(false) bool isCreate,\n  }) = _ChatRoomInformation;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 9 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatRoomInformation.fromJson": {
          "codeSpan": {
            "start": {
              "offset": 787,
              "line": 20,
              "column": 3
            },
            "end": {
              "offset": 896,
              "line": 21,
              "column": 43
            },
            "text": "factory ChatRoomInformation.fromJson(Map<String, dynamic> json) =>\n      _$ChatRoomInformationFromJson(json);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 2,
              "level": "none",
              "comment": "This constructor has a halstead volume of 2.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 785,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 785,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 854,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 854,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 92,
              "level": "none",
              "comment": "This constructor has 92 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatRoomInformation.create": {
          "codeSpan": {
            "start": {
              "offset": 900,
              "line": 23,
              "column": 3
            },
            "end": {
              "offset": 1310,
              "line": 37,
              "column": 9
            },
            "text": "factory ChatRoomInformation.create({\n    required String agenda,\n    required String nickName,\n    required String hostUid,\n    required String roomUid,\n    required List<String> participants,\n  }) =>\n      ChatRoomInformation(\n        agenda: agenda,\n        nickName: nickName,\n        hostUid: hostUid,\n        roomUid: roomUid,\n        participants: participants,\n        createAt: DateTime.now(),\n      );"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 44.37895002019238,
              "level": "none",
              "comment": "This constructor has a halstead volume of 44.37895002019238.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 15,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 15 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 9,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 9 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1093,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 1093,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1101,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1101,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1128,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1128,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1152,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1152,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1180,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1180,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1206,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1206,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1232,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1232,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1268,
                      "line": 36,
                      "column": 0
                    },
                    "end": {
                      "offset": 1268,
                      "line": 36,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1302,
                      "line": 37,
                      "column": 0
                    },
                    "end": {
                      "offset": 1302,
                      "line": 37,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 68,
              "level": "none",
              "comment": "This constructor has 68 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/chat_model.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ChatRoomModel": {
          "codeSpan": {
            "start": {
              "offset": 243,
              "line": 9,
              "column": 1
            },
            "end": {
              "offset": 781,
              "line": 21,
              "column": 2
            },
            "text": "class ChatRoomModel with _$ChatRoomModel {\n  const factory ChatRoomModel({\n    @JsonKey(nullable: true) @Default('エレブラ') String agenda,\n    @timestampKey DateTime? createAt,\n    @timestampKey DateTime? discussStartAt,\n    @JsonKey(nullable: true) @Default('') String? hostUid,\n    @JsonKey(nullable: true) @Default('') String? roomUid,\n    @JsonKey(nullable: true) @Default(<String>[]) List<String> participants,\n  }) = _ChatRoomModel;\n\n  factory ChatRoomModel.fromJson(Map<String, dynamic> json) =>\n      _$ChatRoomModelFromJson(json);\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor ChatRoomModel increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 288,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 678,
                      "line": 17,
                      "column": 23
                    },
                    "text": "const factory ChatRoomModel({\n    @JsonKey(nullable: true) @Default('エレブラ') String agenda,\n    @timestampKey DateTime? createAt,\n    @timestampKey DateTime? discussStartAt,\n    @JsonKey(nullable: true) @Default('') String? hostUid,\n    @JsonKey(nullable: true) @Default('') String? roomUid,\n    @JsonKey(nullable: true) @Default(<String>[]) List<String> participants,\n  }) = _ChatRoomModel;"
                  }
                },
                {
                  "message": "constructor fromJson increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 682,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 779,
                      "line": 20,
                      "column": 37
                    },
                    "text": "factory ChatRoomModel.fromJson(Map<String, dynamic> json) =>\n      _$ChatRoomModelFromJson(json);"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor ChatRoomModel decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 288,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 678,
                      "line": 17,
                      "column": 23
                    },
                    "text": "const factory ChatRoomModel({\n    @JsonKey(nullable: true) @Default('エレブラ') String agenda,\n    @timestampKey DateTime? createAt,\n    @timestampKey DateTime? discussStartAt,\n    @JsonKey(nullable: true) @Default('') String? hostUid,\n    @JsonKey(nullable: true) @Default('') String? roomUid,\n    @JsonKey(nullable: true) @Default(<String>[]) List<String> participants,\n  }) = _ChatRoomModel;"
                  }
                },
                {
                  "message": "public constructor fromJson decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 682,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 779,
                      "line": 20,
                      "column": 37
                    },
                    "text": "factory ChatRoomModel.fromJson(Map<String, dynamic> json) =>\n      _$ChatRoomModelFromJson(json);"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ChatRoomModel.ChatRoomModel": {
          "codeSpan": {
            "start": {
              "offset": 288,
              "line": 10,
              "column": 3
            },
            "end": {
              "offset": 678,
              "line": 17,
              "column": 23
            },
            "text": "const factory ChatRoomModel({\n    @JsonKey(nullable: true) @Default('エレブラ') String agenda,\n    @timestampKey DateTime? createAt,\n    @timestampKey DateTime? discussStartAt,\n    @JsonKey(nullable: true) @Default('') String? hostUid,\n    @JsonKey(nullable: true) @Default('') String? roomUid,\n    @JsonKey(nullable: true) @Default(<String>[]) List<String> participants,\n  }) = _ChatRoomModel;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 8,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 8 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ChatRoomModel.fromJson": {
          "codeSpan": {
            "start": {
              "offset": 682,
              "line": 19,
              "column": 3
            },
            "end": {
              "offset": 779,
              "line": 20,
              "column": 37
            },
            "text": "factory ChatRoomModel.fromJson(Map<String, dynamic> json) =>\n      _$ChatRoomModelFromJson(json);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 2,
              "level": "none",
              "comment": "This constructor has a halstead volume of 2.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 680,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 680,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 743,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 743,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 92,
              "level": "none",
              "comment": "This constructor has 92 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/model/tinder_evaluation.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "TinderEvaluation": {
          "codeSpan": {
            "start": {
              "offset": 144,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 406,
              "line": 15,
              "column": 2
            },
            "text": "class TinderEvaluation with _$TinderEvaluation {\n  factory TinderEvaluation({\n    required int tinder,\n    required String uid,\n  }) = _TinderEvaluation;\n\n  factory TinderEvaluation.fromJson(Map<String, dynamic> json) =>\n      _$TinderEvaluationFromJson(json);\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor TinderEvaluation increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 195,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 297,
                      "line": 11,
                      "column": 26
                    },
                    "text": "factory TinderEvaluation({\n    required int tinder,\n    required String uid,\n  }) = _TinderEvaluation;"
                  }
                },
                {
                  "message": "constructor fromJson increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 301,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 404,
                      "line": 14,
                      "column": 40
                    },
                    "text": "factory TinderEvaluation.fromJson(Map<String, dynamic> json) =>\n      _$TinderEvaluationFromJson(json);"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor TinderEvaluation decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 195,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 297,
                      "line": 11,
                      "column": 26
                    },
                    "text": "factory TinderEvaluation({\n    required int tinder,\n    required String uid,\n  }) = _TinderEvaluation;"
                  }
                },
                {
                  "message": "public constructor fromJson decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 301,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 404,
                      "line": 14,
                      "column": 40
                    },
                    "text": "factory TinderEvaluation.fromJson(Map<String, dynamic> json) =>\n      _$TinderEvaluationFromJson(json);"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "TinderEvaluation.TinderEvaluation": {
          "codeSpan": {
            "start": {
              "offset": 195,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 297,
              "line": 11,
              "column": 26
            },
            "text": "factory TinderEvaluation({\n    required int tinder,\n    required String uid,\n  }) = _TinderEvaluation;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "TinderEvaluation.fromJson": {
          "codeSpan": {
            "start": {
              "offset": 301,
              "line": 13,
              "column": 3
            },
            "end": {
              "offset": 404,
              "line": 14,
              "column": 40
            },
            "text": "factory TinderEvaluation.fromJson(Map<String, dynamic> json) =>\n      _$TinderEvaluationFromJson(json);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 2,
              "level": "none",
              "comment": "This constructor has a halstead volume of 2.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 299,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 299,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 365,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 365,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 92,
              "level": "none",
              "comment": "This constructor has 92 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/infrastructure/conference_overview.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "ConferenceOverview": {
          "codeSpan": {
            "start": {
              "offset": 246,
              "line": 10,
              "column": 1
            },
            "end": {
              "offset": 616,
              "line": 21,
              "column": 2
            },
            "text": "class ConferenceOverview with _$ConferenceOverview {\n  const factory ConferenceOverview({\n    @timestampKey required DateTime? createAt,\n    required String agenda,\n    required String hostUserID,\n  }) = _ConferenceOverview;\n\n  const ConferenceOverview._();\n\n  factory ConferenceOverview.fromJson(Map<String, dynamic> json) =>\n      _$ConferenceOverviewFromJson(json);\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor ConferenceOverview increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 301,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 470,
                      "line": 15,
                      "column": 28
                    },
                    "text": "const factory ConferenceOverview({\n    @timestampKey required DateTime? createAt,\n    required String agenda,\n    required String hostUserID,\n  }) = _ConferenceOverview;"
                  }
                },
                {
                  "message": "constructor _ increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 474,
                      "line": 17,
                      "column": 3
                    },
                    "end": {
                      "offset": 503,
                      "line": 17,
                      "column": 32
                    },
                    "text": "const ConferenceOverview._();"
                  }
                },
                {
                  "message": "constructor fromJson increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 507,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 614,
                      "line": 20,
                      "column": 42
                    },
                    "text": "factory ConferenceOverview.fromJson(Map<String, dynamic> json) =>\n      _$ConferenceOverviewFromJson(json);"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor ConferenceOverview decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 301,
                      "line": 11,
                      "column": 3
                    },
                    "end": {
                      "offset": 470,
                      "line": 15,
                      "column": 28
                    },
                    "text": "const factory ConferenceOverview({\n    @timestampKey required DateTime? createAt,\n    required String agenda,\n    required String hostUserID,\n  }) = _ConferenceOverview;"
                  }
                },
                {
                  "message": "public constructor fromJson decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 507,
                      "line": 19,
                      "column": 3
                    },
                    "end": {
                      "offset": 614,
                      "line": 20,
                      "column": 42
                    },
                    "text": "factory ConferenceOverview.fromJson(Map<String, dynamic> json) =>\n      _$ConferenceOverviewFromJson(json);"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "ConferenceOverview.ConferenceOverview": {
          "codeSpan": {
            "start": {
              "offset": 301,
              "line": 11,
              "column": 3
            },
            "end": {
              "offset": 470,
              "line": 15,
              "column": 28
            },
            "text": "const factory ConferenceOverview({\n    @timestampKey required DateTime? createAt,\n    required String agenda,\n    required String hostUserID,\n  }) = _ConferenceOverview;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 5 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ConferenceOverview._": {
          "codeSpan": {
            "start": {
              "offset": 474,
              "line": 17,
              "column": 3
            },
            "end": {
              "offset": 503,
              "line": 17,
              "column": 32
            },
            "text": "const ConferenceOverview._();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "ConferenceOverview.fromJson": {
          "codeSpan": {
            "start": {
              "offset": 507,
              "line": 19,
              "column": 3
            },
            "end": {
              "offset": 614,
              "line": 20,
              "column": 42
            },
            "text": "factory ConferenceOverview.fromJson(Map<String, dynamic> json) =>\n      _$ConferenceOverviewFromJson(json);"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 2,
              "level": "none",
              "comment": "This constructor has a halstead volume of 2.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 505,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 505,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 573,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 573,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 92,
              "level": "none",
              "comment": "This constructor has 92 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/usecase/login_usecase.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "LoginUseCase": {
          "codeSpan": {
            "start": {
              "offset": 143,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 588,
              "line": 19,
              "column": 2
            },
            "text": "class LoginUseCase {\n  LoginUseCase() : userRepository = UserAuthRepository();\n  LoginUseCase.test({required this.userRepository});\n\n  final UserAuthRepository userRepository;\n  final _logger = Logger();\n\n  Future<LoginStatus> emailLogin(\n      {required String email, required String password}) async {\n    final result =\n        await userRepository.emailLogin(email: email, password: password);\n    _logger.d(result);\n    return result;\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor LoginUseCase increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 166,
                      "line": 6,
                      "column": 3
                    },
                    "end": {
                      "offset": 221,
                      "line": 6,
                      "column": 58
                    },
                    "text": "LoginUseCase() : userRepository = UserAuthRepository();"
                  }
                },
                {
                  "message": "constructor test increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 224,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 274,
                      "line": 7,
                      "column": 53
                    },
                    "text": "LoginUseCase.test({required this.userRepository});"
                  }
                },
                {
                  "message": "method emailLogin increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 350,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 586,
                      "line": 18,
                      "column": 4
                    },
                    "text": "Future<LoginStatus> emailLogin(\n      {required String email, required String password}) async {\n    final result =\n        await userRepository.emailLogin(email: email, password: password);\n    _logger.d(result);\n    return result;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.3333333333333333,
              "level": "none",
              "comment": "This class has a weight of 0.3333333333333333.",
              "context": [
                {
                  "message": "public constructor LoginUseCase decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 166,
                      "line": 6,
                      "column": 3
                    },
                    "end": {
                      "offset": 221,
                      "line": 6,
                      "column": 58
                    },
                    "text": "LoginUseCase() : userRepository = UserAuthRepository();"
                  }
                },
                {
                  "message": "public constructor test decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 224,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 274,
                      "line": 7,
                      "column": 53
                    },
                    "text": "LoginUseCase.test({required this.userRepository});"
                  }
                },
                {
                  "message": "functional method emailLogin increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 350,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 586,
                      "line": 18,
                      "column": 4
                    },
                    "text": "Future<LoginStatus> emailLogin(\n      {required String email, required String password}) async {\n    final result =\n        await userRepository.emailLogin(email: email, password: password);\n    _logger.d(result);\n    return result;\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "LoginUseCase.LoginUseCase": {
          "codeSpan": {
            "start": {
              "offset": 166,
              "line": 6,
              "column": 3
            },
            "end": {
              "offset": 221,
              "line": 6,
              "column": 58
            },
            "text": "LoginUseCase() : userRepository = UserAuthRepository();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "LoginUseCase.test": {
          "codeSpan": {
            "start": {
              "offset": 224,
              "line": 7,
              "column": 3
            },
            "end": {
              "offset": 274,
              "line": 7,
              "column": 53
            },
            "text": "LoginUseCase.test({required this.userRepository});"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "LoginUseCase.emailLogin": {
          "codeSpan": {
            "start": {
              "offset": 350,
              "line": 12,
              "column": 3
            },
            "end": {
              "offset": 586,
              "line": 18,
              "column": 4
            },
            "text": "Future<LoginStatus> emailLogin(\n      {required String email, required String password}) async {\n    final result =\n        await userRepository.emailLogin(email: email, password: password);\n    _logger.d(result);\n    return result;\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 41.20902501875006,
              "level": "none",
              "comment": "This method has a halstead volume of 41.20902501875006.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 7,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 7 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 445,
                      "line": 13,
                      "column": 64
                    },
                    "end": {
                      "offset": 586,
                      "line": 18,
                      "column": 4
                    },
                    "text": "{\n    final result =\n        await userRepository.emailLogin(email: email, password: password);\n    _logger.d(result);\n    return result;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 447,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 447,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 466,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 466,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 541,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 541,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 564,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 564,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 76,
              "level": "none",
              "comment": "This method has 76 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/usecase/hamburger_menu_usecase.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "HamburgerMenuUseCase": {
          "codeSpan": {
            "start": {
              "offset": 103,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 393,
              "line": 16,
              "column": 2
            },
            "text": "class HamburgerMenuUseCase {\n  HamburgerMenuUseCase() : _userRepository = UserAuthRepository();\n  final UserAuthRepository _userRepository;\n\n  UserProfile getUserInfo() {\n    return _userRepository.getProfile();\n  }\n\n  Future<void> logout() async {\n    await _userRepository.logout();\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor HamburgerMenuUseCase increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 134,
                      "line": 6,
                      "column": 3
                    },
                    "end": {
                      "offset": 198,
                      "line": 6,
                      "column": 67
                    },
                    "text": "HamburgerMenuUseCase() : _userRepository = UserAuthRepository();"
                  }
                },
                {
                  "message": "method getUserInfo increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 246,
                      "line": 9,
                      "column": 3
                    },
                    "end": {
                      "offset": 318,
                      "line": 11,
                      "column": 4
                    },
                    "text": "UserProfile getUserInfo() {\n    return _userRepository.getProfile();\n  }"
                  }
                },
                {
                  "message": "method logout increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 322,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 391,
                      "line": 15,
                      "column": 4
                    },
                    "text": "Future<void> logout() async {\n    await _userRepository.logout();\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.6666666666666666,
              "level": "none",
              "comment": "This class has a weight of 0.6666666666666666.",
              "context": [
                {
                  "message": "public constructor HamburgerMenuUseCase decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 134,
                      "line": 6,
                      "column": 3
                    },
                    "end": {
                      "offset": 198,
                      "line": 6,
                      "column": 67
                    },
                    "text": "HamburgerMenuUseCase() : _userRepository = UserAuthRepository();"
                  }
                },
                {
                  "message": "functional method getUserInfo increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 246,
                      "line": 9,
                      "column": 3
                    },
                    "end": {
                      "offset": 318,
                      "line": 11,
                      "column": 4
                    },
                    "text": "UserProfile getUserInfo() {\n    return _userRepository.getProfile();\n  }"
                  }
                },
                {
                  "message": "functional method logout increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 322,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 391,
                      "line": 15,
                      "column": 4
                    },
                    "text": "Future<void> logout() async {\n    await _userRepository.logout();\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "HamburgerMenuUseCase.HamburgerMenuUseCase": {
          "codeSpan": {
            "start": {
              "offset": 134,
              "line": 6,
              "column": 3
            },
            "end": {
              "offset": 198,
              "line": 6,
              "column": 67
            },
            "text": "HamburgerMenuUseCase() : _userRepository = UserAuthRepository();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "HamburgerMenuUseCase.getUserInfo": {
          "codeSpan": {
            "start": {
              "offset": 246,
              "line": 9,
              "column": 3
            },
            "end": {
              "offset": 318,
              "line": 11,
              "column": 4
            },
            "text": "UserProfile getUserInfo() {\n    return _userRepository.getProfile();\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 2,
              "level": "none",
              "comment": "This method has a halstead volume of 2.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 272,
                      "line": 9,
                      "column": 29
                    },
                    "end": {
                      "offset": 318,
                      "line": 11,
                      "column": 4
                    },
                    "text": "{\n    return _userRepository.getProfile();\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This method has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 274,
                      "line": 10,
                      "column": 0
                    },
                    "end": {
                      "offset": 274,
                      "line": 10,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 98,
              "level": "none",
              "comment": "This method has 98 maintainability index.",
              "context": []
            }
          ]
        },
        "HamburgerMenuUseCase.logout": {
          "codeSpan": {
            "start": {
              "offset": 322,
              "line": 13,
              "column": 3
            },
            "end": {
              "offset": 391,
              "line": 15,
              "column": 4
            },
            "text": "Future<void> logout() async {\n    await _userRepository.logout();\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 4.754887502163469,
              "level": "none",
              "comment": "This method has a halstead volume of 4.754887502163469.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 3,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 3 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 350,
                      "line": 13,
                      "column": 31
                    },
                    "end": {
                      "offset": 391,
                      "line": 15,
                      "column": 4
                    },
                    "text": "{\n    await _userRepository.logout();\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This method has 1 source line of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 352,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 352,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 96,
              "level": "none",
              "comment": "This method has 96 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/usecase/sign_up_usecase.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "SignUpUseCase": {
          "codeSpan": {
            "start": {
              "offset": 145,
              "line": 5,
              "column": 1
            },
            "end": {
              "offset": 591,
              "line": 19,
              "column": 2
            },
            "text": "class SignUpUseCase {\n  SignUpUseCase() : userRepository = UserAuthRepository();\n  SignUpUseCase.test({required this.userRepository});\n\n  final UserAuthRepository userRepository;\n  final _logger = Logger();\n\n  Future<SignUpStatus> signUp(\n      {required String email, required String password}) async {\n    final result =\n        await userRepository.emailSignUp(email: email, password: password);\n    _logger.d(result);\n    return result;\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 3,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 3 methods.",
              "context": [
                {
                  "message": "constructor SignUpUseCase increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 169,
                      "line": 6,
                      "column": 3
                    },
                    "end": {
                      "offset": 225,
                      "line": 6,
                      "column": 59
                    },
                    "text": "SignUpUseCase() : userRepository = UserAuthRepository();"
                  }
                },
                {
                  "message": "constructor test increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 228,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 279,
                      "line": 7,
                      "column": 54
                    },
                    "text": "SignUpUseCase.test({required this.userRepository});"
                  }
                },
                {
                  "message": "method signUp increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 355,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 589,
                      "line": 18,
                      "column": 4
                    },
                    "text": "Future<SignUpStatus> signUp(\n      {required String email, required String password}) async {\n    final result =\n        await userRepository.emailSignUp(email: email, password: password);\n    _logger.d(result);\n    return result;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0.3333333333333333,
              "level": "none",
              "comment": "This class has a weight of 0.3333333333333333.",
              "context": [
                {
                  "message": "public constructor SignUpUseCase decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 169,
                      "line": 6,
                      "column": 3
                    },
                    "end": {
                      "offset": 225,
                      "line": 6,
                      "column": 59
                    },
                    "text": "SignUpUseCase() : userRepository = UserAuthRepository();"
                  }
                },
                {
                  "message": "public constructor test decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 228,
                      "line": 7,
                      "column": 3
                    },
                    "end": {
                      "offset": 279,
                      "line": 7,
                      "column": 54
                    },
                    "text": "SignUpUseCase.test({required this.userRepository});"
                  }
                },
                {
                  "message": "functional method signUp increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 355,
                      "line": 12,
                      "column": 3
                    },
                    "end": {
                      "offset": 589,
                      "line": 18,
                      "column": 4
                    },
                    "text": "Future<SignUpStatus> signUp(\n      {required String email, required String password}) async {\n    final result =\n        await userRepository.emailSignUp(email: email, password: password);\n    _logger.d(result);\n    return result;\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "SignUpUseCase.SignUpUseCase": {
          "codeSpan": {
            "start": {
              "offset": 169,
              "line": 6,
              "column": 3
            },
            "end": {
              "offset": 225,
              "line": 6,
              "column": 59
            },
            "text": "SignUpUseCase() : userRepository = UserAuthRepository();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "SignUpUseCase.test": {
          "codeSpan": {
            "start": {
              "offset": 228,
              "line": 7,
              "column": 3
            },
            "end": {
              "offset": 279,
              "line": 7,
              "column": 54
            },
            "text": "SignUpUseCase.test({required this.userRepository});"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 1,
              "unitType": "line",
              "level": "none",
              "comment": "This constructor has 1 line of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "SignUpUseCase.signUp": {
          "codeSpan": {
            "start": {
              "offset": 355,
              "line": 12,
              "column": 3
            },
            "end": {
              "offset": 589,
              "line": 18,
              "column": 4
            },
            "text": "Future<SignUpStatus> signUp(\n      {required String email, required String password}) async {\n    final result =\n        await userRepository.emailSignUp(email: email, password: password);\n    _logger.d(result);\n    return result;\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 41.20902501875006,
              "level": "none",
              "comment": "This method has a halstead volume of 41.20902501875006.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 7,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 7 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 447,
                      "line": 13,
                      "column": 64
                    },
                    "end": {
                      "offset": 589,
                      "line": 18,
                      "column": 4
                    },
                    "text": "{\n    final result =\n        await userRepository.emailSignUp(email: email, password: password);\n    _logger.d(result);\n    return result;\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 2,
              "level": "none",
              "comment": "This method has 2 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 449,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 449,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 468,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 468,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 544,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 544,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 567,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 567,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 76,
              "level": "none",
              "comment": "This method has 76 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/domain/model/user_profile.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "UserProfile": {
          "codeSpan": {
            "start": {
              "offset": 157,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 603,
              "line": 23,
              "column": 2
            },
            "text": "class UserProfile with _$UserProfile {\n  const factory UserProfile({\n    required String email,\n    required String? userName,\n    required String? userIcon,\n    required bool isLogin,\n  }) = _UserProfile;\n\n  factory UserProfile.fromUser({required User? user}) {\n    return UserProfile(\n      isLogin: user != null,\n      email: user?.email ?? '',\n      userIcon: user?.photoURL ?? '',\n      userName: user?.displayName ?? 'No user',\n    );\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This class has 2 methods.",
              "context": [
                {
                  "message": "constructor UserProfile increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 198,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 362,
                      "line": 13,
                      "column": 21
                    },
                    "text": "const factory UserProfile({\n    required String email,\n    required String? userName,\n    required String? userIcon,\n    required bool isLogin,\n  }) = _UserProfile;"
                  }
                },
                {
                  "message": "constructor fromUser increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 366,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 601,
                      "line": 22,
                      "column": 4
                    },
                    "text": "factory UserProfile.fromUser({required User? user}) {\n    return UserProfile(\n      isLogin: user != null,\n      email: user?.email ?? '',\n      userIcon: user?.photoURL ?? '',\n      userName: user?.displayName ?? 'No user',\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 0,
              "level": "none",
              "comment": "This class has a weight of 0.0.",
              "context": [
                {
                  "message": "public constructor UserProfile decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 198,
                      "line": 8,
                      "column": 3
                    },
                    "end": {
                      "offset": 362,
                      "line": 13,
                      "column": 21
                    },
                    "text": "const factory UserProfile({\n    required String email,\n    required String? userName,\n    required String? userIcon,\n    required bool isLogin,\n  }) = _UserProfile;"
                  }
                },
                {
                  "message": "public constructor fromUser decrease metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 366,
                      "line": 15,
                      "column": 3
                    },
                    "end": {
                      "offset": 601,
                      "line": 22,
                      "column": 4
                    },
                    "text": "factory UserProfile.fromUser({required User? user}) {\n    return UserProfile(\n      isLogin: user != null,\n      email: user?.email ?? '',\n      userIcon: user?.photoURL ?? '',\n      userName: user?.displayName ?? 'No user',\n    );\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "UserProfile.UserProfile": {
          "codeSpan": {
            "start": {
              "offset": 198,
              "line": 8,
              "column": 3
            },
            "end": {
              "offset": 362,
              "line": 13,
              "column": 21
            },
            "text": "const factory UserProfile({\n    required String email,\n    required String? userName,\n    required String? userIcon,\n    required bool isLogin,\n  }) = _UserProfile;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a halstead volume of 0.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 6 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This constructor has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 0,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 0 source lines of code.",
              "context": []
            },
            {
              "metricsId": "maintainability-index",
              "value": 100,
              "level": "none",
              "comment": "This constructor has 100 maintainability index.",
              "context": []
            }
          ]
        },
        "UserProfile.fromUser": {
          "codeSpan": {
            "start": {
              "offset": 366,
              "line": 15,
              "column": 3
            },
            "end": {
              "offset": 601,
              "line": 22,
              "column": 4
            },
            "text": "factory UserProfile.fromUser({required User? user}) {\n    return UserProfile(\n      isLogin: user != null,\n      email: user?.email ?? '',\n      userIcon: user?.photoURL ?? '',\n      userName: user?.displayName ?? 'No user',\n    );\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 7,
              "level": "none",
              "comment": "This constructor has a cyclomatic complexity of 7.",
              "context": [
                {
                  "message": "Operator ?. increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 490,
                      "line": 18,
                      "column": 18
                    },
                    "end": {
                      "offset": 492,
                      "line": 18,
                      "column": 20
                    },
                    "text": "?."
                  }
                },
                {
                  "message": "Operator ?? increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 498,
                      "line": 18,
                      "column": 26
                    },
                    "end": {
                      "offset": 500,
                      "line": 18,
                      "column": 28
                    },
                    "text": "??"
                  }
                },
                {
                  "message": "Operator ?. increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 525,
                      "line": 19,
                      "column": 21
                    },
                    "end": {
                      "offset": 527,
                      "line": 19,
                      "column": 23
                    },
                    "text": "?."
                  }
                },
                {
                  "message": "Operator ?? increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 536,
                      "line": 19,
                      "column": 32
                    },
                    "end": {
                      "offset": 538,
                      "line": 19,
                      "column": 34
                    },
                    "text": "??"
                  }
                },
                {
                  "message": "Operator ?. increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 563,
                      "line": 20,
                      "column": 21
                    },
                    "end": {
                      "offset": 565,
                      "line": 20,
                      "column": 23
                    },
                    "text": "?."
                  }
                },
                {
                  "message": "Operator ?? increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 577,
                      "line": 20,
                      "column": 35
                    },
                    "end": {
                      "offset": 579,
                      "line": 20,
                      "column": 37
                    },
                    "text": "??"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 65.72920075410866,
              "level": "none",
              "comment": "This constructor has a halstead volume of 65.72920075410866.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 8,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 8 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This constructor has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 418,
                      "line": 15,
                      "column": 55
                    },
                    "end": {
                      "offset": 601,
                      "line": 22,
                      "column": 4
                    },
                    "text": "{\n    return UserProfile(\n      isLogin: user != null,\n      email: user?.email ?? '',\n      userIcon: user?.photoURL ?? '',\n      userName: user?.displayName ?? 'No user',\n    );\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 6,
              "unitType": "lines",
              "level": "none",
              "comment": "This constructor has 6 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 420,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 420,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 444,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 444,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 473,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 473,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 505,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 505,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 543,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 543,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 591,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 591,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 70,
              "level": "none",
              "comment": "This constructor has 70 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/firebase_helper/timestamp_annotation.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {},
      "functions": {
        "dateFromTimestampValue": {
          "codeSpan": {
            "start": {
              "offset": 117,
              "line": 4,
              "column": 1
            },
            "end": {
              "offset": 202,
              "line": 5,
              "column": 35
            },
            "text": "DateTime? dateFromTimestampValue(dynamic value) =>\n    (value as Timestamp).toDate();"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 8,
              "level": "none",
              "comment": "This function has a halstead volume of 8.0.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This function has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This function has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 117,
                      "line": 4,
                      "column": 0
                    },
                    "end": {
                      "offset": 117,
                      "line": 4,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 168,
                      "line": 5,
                      "column": 0
                    },
                    "end": {
                      "offset": 168,
                      "line": 5,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 87,
              "level": "none",
              "comment": "This function has 87 maintainability index.",
              "context": []
            }
          ]
        },
        "timestampFromDateValue": {
          "codeSpan": {
            "start": {
              "offset": 204,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 313,
              "line": 8,
              "column": 58
            },
            "text": "Timestamp? timestampFromDateValue(dynamic value) =>\n    value is DateTime ? Timestamp.fromDate(value) : null;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 260,
                      "line": 8,
                      "column": 5
                    },
                    "end": {
                      "offset": 312,
                      "line": 8,
                      "column": 57
                    },
                    "text": "value is DateTime ? Timestamp.fromDate(value) : null"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 13.931568569324174,
              "level": "none",
              "comment": "This function has a halstead volume of 13.931568569324174.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This function has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This function has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 204,
                      "line": 7,
                      "column": 0
                    },
                    "end": {
                      "offset": 204,
                      "line": 7,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 256,
                      "line": 8,
                      "column": 0
                    },
                    "end": {
                      "offset": 256,
                      "line": 8,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 86,
              "level": "none",
              "comment": "This function has 86 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/firebase_helper/firebase_helper.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "FirebaseHelper": {
          "codeSpan": {
            "start": {
              "offset": 377,
              "line": 12,
              "column": 1
            },
            "end": {
              "offset": 1259,
              "line": 37,
              "column": 2
            },
            "text": "mixin FirebaseHelper {\n  static Future<void> initializeFirebaseApp() async {\n    await Firebase.initializeApp();\n\n    FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterError;\n    await DynamicLinkHelper().initDynamicLink();\n\n    const useEmulator = bool.fromEnvironment('USE_EMULATOR');\n\n    await useEmulators(useEmulator: useEmulator);\n  }\n\n  static Future<void> useEmulators({required bool useEmulator}) async {\n    if (useEmulator) {\n      final emulatorDomain =\n          (!kIsWeb && Platform.isAndroid) ? '10.0.2.2' : 'localhost';\n      const defaultStoreEmulatorPort = 8080;\n      FirebaseFirestore.instance.useFirestoreEmulator(\n        emulatorDomain,\n        defaultStoreEmulatorPort,\n      );\n      await FirebaseAuth.instance.useAuthEmulator(emulatorDomain, 9099);\n      await FirebaseStorage.instance.useStorageEmulator(emulatorDomain, 9199);\n    }\n  }\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 2,
              "unitType": "methods",
              "level": "none",
              "comment": "This mixin has 2 methods.",
              "context": [
                {
                  "message": "method initializeFirebaseApp increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 402,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 733,
                      "line": 22,
                      "column": 4
                    },
                    "text": "static Future<void> initializeFirebaseApp() async {\n    await Firebase.initializeApp();\n\n    FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterError;\n    await DynamicLinkHelper().initDynamicLink();\n\n    const useEmulator = bool.fromEnvironment('USE_EMULATOR');\n\n    await useEmulators(useEmulator: useEmulator);\n  }"
                  }
                },
                {
                  "message": "method useEmulators increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 737,
                      "line": 24,
                      "column": 3
                    },
                    "end": {
                      "offset": 1257,
                      "line": 36,
                      "column": 4
                    },
                    "text": "static Future<void> useEmulators({required bool useEmulator}) async {\n    if (useEmulator) {\n      final emulatorDomain =\n          (!kIsWeb && Platform.isAndroid) ? '10.0.2.2' : 'localhost';\n      const defaultStoreEmulatorPort = 8080;\n      FirebaseFirestore.instance.useFirestoreEmulator(\n        emulatorDomain,\n        defaultStoreEmulatorPort,\n      );\n      await FirebaseAuth.instance.useAuthEmulator(emulatorDomain, 9099);\n      await FirebaseStorage.instance.useStorageEmulator(emulatorDomain, 9199);\n    }\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 1,
              "level": "none",
              "comment": "This mixin has a weight of 1.0.",
              "context": [
                {
                  "message": "functional method initializeFirebaseApp increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 402,
                      "line": 13,
                      "column": 3
                    },
                    "end": {
                      "offset": 733,
                      "line": 22,
                      "column": 4
                    },
                    "text": "static Future<void> initializeFirebaseApp() async {\n    await Firebase.initializeApp();\n\n    FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterError;\n    await DynamicLinkHelper().initDynamicLink();\n\n    const useEmulator = bool.fromEnvironment('USE_EMULATOR');\n\n    await useEmulators(useEmulator: useEmulator);\n  }"
                  }
                },
                {
                  "message": "functional method useEmulators increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 737,
                      "line": 24,
                      "column": 3
                    },
                    "end": {
                      "offset": 1257,
                      "line": 36,
                      "column": 4
                    },
                    "text": "static Future<void> useEmulators({required bool useEmulator}) async {\n    if (useEmulator) {\n      final emulatorDomain =\n          (!kIsWeb && Platform.isAndroid) ? '10.0.2.2' : 'localhost';\n      const defaultStoreEmulatorPort = 8080;\n      FirebaseFirestore.instance.useFirestoreEmulator(\n        emulatorDomain,\n        defaultStoreEmulatorPort,\n      );\n      await FirebaseAuth.instance.useAuthEmulator(emulatorDomain, 9099);\n      await FirebaseStorage.instance.useStorageEmulator(emulatorDomain, 9199);\n    }\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "FirebaseHelper.initializeFirebaseApp": {
          "codeSpan": {
            "start": {
              "offset": 402,
              "line": 13,
              "column": 3
            },
            "end": {
              "offset": 733,
              "line": 22,
              "column": 4
            },
            "text": "static Future<void> initializeFirebaseApp() async {\n    await Firebase.initializeApp();\n\n    FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterError;\n    await DynamicLinkHelper().initDynamicLink();\n\n    const useEmulator = bool.fromEnvironment('USE_EMULATOR');\n\n    await useEmulators(useEmulator: useEmulator);\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 1,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 1.",
              "context": []
            },
            {
              "metricsId": "halstead-volume",
              "value": 78.13781191217038,
              "level": "none",
              "comment": "This method has a halstead volume of 78.13781191217038.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 10,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 10 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 1,
              "level": "none",
              "comment": "This method has a nesting level of 1.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 452,
                      "line": 13,
                      "column": 53
                    },
                    "end": {
                      "offset": 733,
                      "line": 22,
                      "column": 4
                    },
                    "text": "{\n    await Firebase.initializeApp();\n\n    FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterError;\n    await DynamicLinkHelper().initDynamicLink();\n\n    const useEmulator = bool.fromEnvironment('USE_EMULATOR');\n\n    await useEmulators(useEmulator: useEmulator);\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 5,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 5 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 454,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 454,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 491,
                      "line": 16,
                      "column": 0
                    },
                    "end": {
                      "offset": 491,
                      "line": 16,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 567,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 567,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 617,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 617,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 680,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 680,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 72,
              "level": "none",
              "comment": "This method has 72 maintainability index.",
              "context": []
            }
          ]
        },
        "FirebaseHelper.useEmulators": {
          "codeSpan": {
            "start": {
              "offset": 737,
              "line": 24,
              "column": 3
            },
            "end": {
              "offset": 1257,
              "line": 36,
              "column": 4
            },
            "text": "static Future<void> useEmulators({required bool useEmulator}) async {\n    if (useEmulator) {\n      final emulatorDomain =\n          (!kIsWeb && Platform.isAndroid) ? '10.0.2.2' : 'localhost';\n      const defaultStoreEmulatorPort = 8080;\n      FirebaseFirestore.instance.useFirestoreEmulator(\n        emulatorDomain,\n        defaultStoreEmulatorPort,\n      );\n      await FirebaseAuth.instance.useAuthEmulator(emulatorDomain, 9099);\n      await FirebaseStorage.instance.useStorageEmulator(emulatorDomain, 9199);\n    }\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 4,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 4.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 811,
                      "line": 25,
                      "column": 5
                    },
                    "end": {
                      "offset": 1253,
                      "line": 35,
                      "column": 6
                    },
                    "text": "if (useEmulator) {\n      final emulatorDomain =\n          (!kIsWeb && Platform.isAndroid) ? '10.0.2.2' : 'localhost';\n      const defaultStoreEmulatorPort = 8080;\n      FirebaseFirestore.instance.useFirestoreEmulator(\n        emulatorDomain,\n        defaultStoreEmulatorPort,\n      );\n      await FirebaseAuth.instance.useAuthEmulator(emulatorDomain, 9099);\n      await FirebaseStorage.instance.useStorageEmulator(emulatorDomain, 9199);\n    }"
                  }
                },
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 869,
                      "line": 27,
                      "column": 11
                    },
                    "end": {
                      "offset": 927,
                      "line": 27,
                      "column": 69
                    },
                    "text": "(!kIsWeb && Platform.isAndroid) ? '10.0.2.2' : 'localhost'"
                  }
                },
                {
                  "message": "Operator && increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 878,
                      "line": 27,
                      "column": 20
                    },
                    "end": {
                      "offset": 880,
                      "line": 27,
                      "column": 22
                    },
                    "text": "&&"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 108.41805003750011,
              "level": "none",
              "comment": "This method has a halstead volume of 108.41805003750011.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 13,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 13 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 2,
              "level": "none",
              "comment": "This method has a nesting level of 2.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 805,
                      "line": 24,
                      "column": 71
                    },
                    "end": {
                      "offset": 1257,
                      "line": 36,
                      "column": 4
                    },
                    "text": "{\n    if (useEmulator) {\n      final emulatorDomain =\n          (!kIsWeb && Platform.isAndroid) ? '10.0.2.2' : 'localhost';\n      const defaultStoreEmulatorPort = 8080;\n      FirebaseFirestore.instance.useFirestoreEmulator(\n        emulatorDomain,\n        defaultStoreEmulatorPort,\n      );\n      await FirebaseAuth.instance.useAuthEmulator(emulatorDomain, 9099);\n      await FirebaseStorage.instance.useStorageEmulator(emulatorDomain, 9199);\n    }\n  }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 828,
                      "line": 25,
                      "column": 22
                    },
                    "end": {
                      "offset": 1253,
                      "line": 35,
                      "column": 6
                    },
                    "text": "{\n      final emulatorDomain =\n          (!kIsWeb && Platform.isAndroid) ? '10.0.2.2' : 'localhost';\n      const defaultStoreEmulatorPort = 8080;\n      FirebaseFirestore.instance.useFirestoreEmulator(\n        emulatorDomain,\n        defaultStoreEmulatorPort,\n      );\n      await FirebaseAuth.instance.useAuthEmulator(emulatorDomain, 9099);\n      await FirebaseStorage.instance.useStorageEmulator(emulatorDomain, 9199);\n    }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This method has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 11,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 11 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 807,
                      "line": 25,
                      "column": 0
                    },
                    "end": {
                      "offset": 807,
                      "line": 25,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 830,
                      "line": 26,
                      "column": 0
                    },
                    "end": {
                      "offset": 830,
                      "line": 26,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 859,
                      "line": 27,
                      "column": 0
                    },
                    "end": {
                      "offset": 859,
                      "line": 27,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 929,
                      "line": 28,
                      "column": 0
                    },
                    "end": {
                      "offset": 929,
                      "line": 28,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 974,
                      "line": 29,
                      "column": 0
                    },
                    "end": {
                      "offset": 974,
                      "line": 29,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1029,
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "offset": 1029,
                      "line": 30,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1053,
                      "line": 31,
                      "column": 0
                    },
                    "end": {
                      "offset": 1053,
                      "line": 31,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1087,
                      "line": 32,
                      "column": 0
                    },
                    "end": {
                      "offset": 1087,
                      "line": 32,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1096,
                      "line": 33,
                      "column": 0
                    },
                    "end": {
                      "offset": 1096,
                      "line": 33,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1169,
                      "line": 34,
                      "column": 0
                    },
                    "end": {
                      "offset": 1169,
                      "line": 34,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 1248,
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "offset": 1248,
                      "line": 35,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 63,
              "level": "none",
              "comment": "This method has 63 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/firebase_helper/force_update_provider.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {},
      "functions": {},
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/firebase_helper/remote_config_provider.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {},
      "functions": {},
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/firebase_helper/documet_ref_annotation.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {},
      "functions": {
        "referenceFromValue": {
          "codeSpan": {
            "start": {
              "offset": 117,
              "line": 4,
              "column": 1
            },
            "end": {
              "offset": 272,
              "line": 7,
              "column": 16
            },
            "text": "DocumentReference? referenceFromValue(dynamic value) =>\n    value is DocumentReference\n        ? FirebaseFirestore.instance.doc(value.path)\n        : null;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 177,
                      "line": 5,
                      "column": 5
                    },
                    "end": {
                      "offset": 271,
                      "line": 7,
                      "column": 15
                    },
                    "text": "value is DocumentReference\n        ? FirebaseFirestore.instance.doc(value.path)\n        : null"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 22.458839376460833,
              "level": "none",
              "comment": "This function has a halstead volume of 22.458839376460833.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 4 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This function has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This function has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 4,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 4 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 117,
                      "line": 4,
                      "column": 0
                    },
                    "end": {
                      "offset": 117,
                      "line": 4,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 173,
                      "line": 5,
                      "column": 0
                    },
                    "end": {
                      "offset": 173,
                      "line": 5,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 204,
                      "line": 6,
                      "column": 0
                    },
                    "end": {
                      "offset": 204,
                      "line": 6,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 257,
                      "line": 7,
                      "column": 0
                    },
                    "end": {
                      "offset": 257,
                      "line": 7,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 78,
              "level": "none",
              "comment": "This function has 78 maintainability index.",
              "context": []
            }
          ]
        },
        "referenceToValue": {
          "codeSpan": {
            "start": {
              "offset": 274,
              "line": 9,
              "column": 1
            },
            "end": {
              "offset": 374,
              "line": 10,
              "column": 47
            },
            "text": "DocumentReference? referenceToValue(dynamic value) =>\n    value is DocumentReference ? value : null;"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This function has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "Conditional expression increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 332,
                      "line": 10,
                      "column": 5
                    },
                    "end": {
                      "offset": 373,
                      "line": 10,
                      "column": 46
                    },
                    "text": "value is DocumentReference ? value : null"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 6.339850002884625,
              "level": "none",
              "comment": "This function has a halstead volume of 6.339850002884625.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 2 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 0,
              "level": "none",
              "comment": "This function has a nesting level of 0.",
              "context": []
            },
            {
              "metricsId": "number-of-parameters",
              "value": 1,
              "level": "none",
              "comment": "This function has 1 parameter.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 2,
              "unitType": "lines",
              "level": "none",
              "comment": "This function has 2 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 274,
                      "line": 9,
                      "column": 0
                    },
                    "end": {
                      "offset": 274,
                      "line": 9,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 328,
                      "line": 10,
                      "column": 0
                    },
                    "end": {
                      "offset": 328,
                      "line": 10,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 88,
              "level": "none",
              "comment": "This function has 88 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    },
    {
      "path": "lib/firebase_helper/dynamic_link_helper.dart",
      "fileMetrics": [
        {
          "metricsId": "technical-debt",
          "value": 0,
          "level": "none",
          "comment": "This compilation unit has 0.0 swe hours of debt.",
          "context": []
        }
      ],
      "classes": {
        "DynamicLinkHelper": {
          "codeSpan": {
            "start": {
              "offset": 204,
              "line": 7,
              "column": 1
            },
            "end": {
              "offset": 767,
              "line": 26,
              "column": 2
            },
            "text": "class DynamicLinkHelper {\r\n  final _logger = Logger();\r\n\r\n  Future<void> initDynamicLink() async {\r\n    final dynamicLink = FirebaseDynamicLinks.instance;\r\n\r\n    dynamicLink.onLink.listen(\r\n      (PendingDynamicLinkData? dynamicLink) async {\r\n        final deepLink = dynamicLink!.link;\r\n\r\n        await navigatorKey.currentState!.pushNamed(deepLink.path);\r\n      },\r\n    ).onError((Object error) {\r\n      if (error is UnimplementedError) {\r\n        _logger.e(error.message);\r\n      }\r\n      _logger.e('Link Error Object is ${error.toString()}');\r\n    });\r\n  }\r\n}"
          },
          "metrics": [
            {
              "metricsId": "number-of-methods",
              "value": 1,
              "unitType": "method",
              "level": "none",
              "comment": "This class has 1 method.",
              "context": [
                {
                  "message": "method initDynamicLink increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 264,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 764,
                      "line": 25,
                      "column": 4
                    },
                    "text": "Future<void> initDynamicLink() async {\r\n    final dynamicLink = FirebaseDynamicLinks.instance;\r\n\r\n    dynamicLink.onLink.listen(\r\n      (PendingDynamicLinkData? dynamicLink) async {\r\n        final deepLink = dynamicLink!.link;\r\n\r\n        await navigatorKey.currentState!.pushNamed(deepLink.path);\r\n      },\r\n    ).onError((Object error) {\r\n      if (error is UnimplementedError) {\r\n        _logger.e(error.message);\r\n      }\r\n      _logger.e('Link Error Object is ${error.toString()}');\r\n    });\r\n  }"
                  }
                }
              ]
            },
            {
              "metricsId": "weight-of-class",
              "value": 1,
              "level": "none",
              "comment": "This class has a weight of 1.0.",
              "context": [
                {
                  "message": "functional method initDynamicLink increase metric value",
                  "codeSpan": {
                    "start": {
                      "offset": 264,
                      "line": 10,
                      "column": 3
                    },
                    "end": {
                      "offset": 764,
                      "line": 25,
                      "column": 4
                    },
                    "text": "Future<void> initDynamicLink() async {\r\n    final dynamicLink = FirebaseDynamicLinks.instance;\r\n\r\n    dynamicLink.onLink.listen(\r\n      (PendingDynamicLinkData? dynamicLink) async {\r\n        final deepLink = dynamicLink!.link;\r\n\r\n        await navigatorKey.currentState!.pushNamed(deepLink.path);\r\n      },\r\n    ).onError((Object error) {\r\n      if (error is UnimplementedError) {\r\n        _logger.e(error.message);\r\n      }\r\n      _logger.e('Link Error Object is ${error.toString()}');\r\n    });\r\n  }"
                  }
                }
              ]
            }
          ]
        }
      },
      "functions": {
        "DynamicLinkHelper.initDynamicLink": {
          "codeSpan": {
            "start": {
              "offset": 264,
              "line": 10,
              "column": 3
            },
            "end": {
              "offset": 764,
              "line": 25,
              "column": 4
            },
            "text": "Future<void> initDynamicLink() async {\r\n    final dynamicLink = FirebaseDynamicLinks.instance;\r\n\r\n    dynamicLink.onLink.listen(\r\n      (PendingDynamicLinkData? dynamicLink) async {\r\n        final deepLink = dynamicLink!.link;\r\n\r\n        await navigatorKey.currentState!.pushNamed(deepLink.path);\r\n      },\r\n    ).onError((Object error) {\r\n      if (error is UnimplementedError) {\r\n        _logger.e(error.message);\r\n      }\r\n      _logger.e('Link Error Object is ${error.toString()}');\r\n    });\r\n  }"
          },
          "metrics": [
            {
              "metricsId": "cyclomatic-complexity",
              "value": 2,
              "level": "none",
              "comment": "This method has a cyclomatic complexity of 2.",
              "context": [
                {
                  "message": "If statement increases complexity",
                  "codeSpan": {
                    "start": {
                      "offset": 610,
                      "line": 20,
                      "column": 7
                    },
                    "end": {
                      "offset": 688,
                      "line": 22,
                      "column": 8
                    },
                    "text": "if (error is UnimplementedError) {\r\n        _logger.e(error.message);\r\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "halstead-volume",
              "value": 269.343659006934,
              "level": "none",
              "comment": "This method has a halstead volume of 269.343659006934.",
              "context": []
            },
            {
              "metricsId": "lines-of-code",
              "value": 16,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 16 lines of code.",
              "context": []
            },
            {
              "metricsId": "maximum-nesting-level",
              "value": 3,
              "level": "none",
              "comment": "This method has a nesting level of 3.",
              "context": [
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 301,
                      "line": 10,
                      "column": 40
                    },
                    "end": {
                      "offset": 764,
                      "line": 25,
                      "column": 4
                    },
                    "text": "{\r\n    final dynamicLink = FirebaseDynamicLinks.instance;\r\n\r\n    dynamicLink.onLink.listen(\r\n      (PendingDynamicLinkData? dynamicLink) async {\r\n        final deepLink = dynamicLink!.link;\r\n\r\n        await navigatorKey.currentState!.pushNamed(deepLink.path);\r\n      },\r\n    ).onError((Object error) {\r\n      if (error is UnimplementedError) {\r\n        _logger.e(error.message);\r\n      }\r\n      _logger.e('Link Error Object is ${error.toString()}');\r\n    });\r\n  }"
                  }
                },
                {
                  "message": "Block function body increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 601,
                      "line": 19,
                      "column": 30
                    },
                    "end": {
                      "offset": 757,
                      "line": 24,
                      "column": 6
                    },
                    "text": "{\r\n      if (error is UnimplementedError) {\r\n        _logger.e(error.message);\r\n      }\r\n      _logger.e('Link Error Object is ${error.toString()}');\r\n    }"
                  }
                },
                {
                  "message": "If statement increases depth",
                  "codeSpan": {
                    "start": {
                      "offset": 643,
                      "line": 20,
                      "column": 40
                    },
                    "end": {
                      "offset": 688,
                      "line": 22,
                      "column": 8
                    },
                    "text": "{\r\n        _logger.e(error.message);\r\n      }"
                  }
                }
              ]
            },
            {
              "metricsId": "number-of-parameters",
              "value": 0,
              "level": "none",
              "comment": "This method has 0 parameters.",
              "context": []
            },
            {
              "metricsId": "source-lines-of-code",
              "value": 12,
              "unitType": "lines",
              "level": "none",
              "comment": "This method has 12 source lines of code.",
              "context": [
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 304,
                      "line": 11,
                      "column": 0
                    },
                    "end": {
                      "offset": 304,
                      "line": 11,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 362,
                      "line": 13,
                      "column": 0
                    },
                    "end": {
                      "offset": 362,
                      "line": 13,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 394,
                      "line": 14,
                      "column": 0
                    },
                    "end": {
                      "offset": 394,
                      "line": 14,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 447,
                      "line": 15,
                      "column": 0
                    },
                    "end": {
                      "offset": 447,
                      "line": 15,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 494,
                      "line": 17,
                      "column": 0
                    },
                    "end": {
                      "offset": 494,
                      "line": 17,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 562,
                      "line": 18,
                      "column": 0
                    },
                    "end": {
                      "offset": 562,
                      "line": 18,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 572,
                      "line": 19,
                      "column": 0
                    },
                    "end": {
                      "offset": 572,
                      "line": 19,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 604,
                      "line": 20,
                      "column": 0
                    },
                    "end": {
                      "offset": 604,
                      "line": 20,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 646,
                      "line": 21,
                      "column": 0
                    },
                    "end": {
                      "offset": 646,
                      "line": 21,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 681,
                      "line": 22,
                      "column": 0
                    },
                    "end": {
                      "offset": 681,
                      "line": 22,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 690,
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "offset": 690,
                      "line": 23,
                      "column": 0
                    },
                    "text": ""
                  }
                },
                {
                  "message": "line contains source code",
                  "codeSpan": {
                    "start": {
                      "offset": 752,
                      "line": 24,
                      "column": 0
                    },
                    "end": {
                      "offset": 752,
                      "line": 24,
                      "column": 0
                    },
                    "text": ""
                  }
                }
              ]
            },
            {
              "metricsId": "maintainability-index",
              "value": 60,
              "level": "none",
              "comment": "This method has 60 maintainability index.",
              "context": []
            }
          ]
        }
      },
      "issues": [],
      "antiPatternCases": []
    }
  ],
  "summary": [
    {
      "status": "none",
      "title": "Scanned folders",
      "value": [
        "lib"
      ],
      "violations": 0
    },
    {
      "status": "none",
      "title": "Total scanned files",
      "value": 75,
      "violations": 0
    },
    {
      "status": "none",
      "title": "Total lines of source code",
      "value": 1665,
      "violations": 0
    },
    {
      "status": "none",
      "title": "Total classes",
      "value": 70,
      "violations": 0
    },
    {
      "status": "none",
      "title": "Average Cyclomatic Number per line of code",
      "value": 0.16876876876876876,
      "violations": 0
    },
    {
      "status": "none",
      "title": "Average Source Lines of Code per method",
      "value": 9,
      "violations": 0
    },
    {
      "status": "none",
      "title": "Total tech debt",
      "value": "not found",
      "violations": 0
    }
  ]
}
